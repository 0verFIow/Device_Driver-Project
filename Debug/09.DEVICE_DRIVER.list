
09.DEVICE_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800ad60  0800ad60  0001ad60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b26c  0800b26c  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800b26c  0800b26c  0001b26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b274  0800b274  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b274  0800b274  0001b274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800b27c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005048  20000230  0800b4ac  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005278  0800b4ac  00025278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002592d  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048a9  00000000  00000000  00045b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  0004a438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  0004bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000604c  00000000  00000000  0004d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3b6  00000000  00000000  00053624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d33c  00000000  00000000  000719da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ed16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007af0  00000000  00000000  0010ed6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad44 	.word	0x0800ad44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	0800ad44 	.word	0x0800ad44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <init_button>:

int get_button(GPIO_TypeDef *GPIO,int button_pin, int button_num);
void button_led_toggle_test(void);

void init_button(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
	GPIOC->PUPDR = 0x00000055;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <init_button+0x14>)
 8000eb6:	2255      	movs	r2, #85	; 0x55
 8000eb8:	60da      	str	r2, [r3, #12]
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40020800 	.word	0x40020800

08000ec8 <button_led_toggle_test>:



void button_led_toggle_test(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	init_button();
 8000ecc:	f7ff fff0 	bl	8000eb0 <init_button>
	// 버튼을 한 번 눌렀다 떼면 led가 toggle되도록 code를 구현
	if(get_button(GPIOC,GPIO_PIN_0, BTN0) == BUTTON_PRESS)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	481e      	ldr	r0, [pc, #120]	; (8000f50 <button_led_toggle_test+0x88>)
 8000ed6:	f000 f841 	bl	8000f5c <get_button>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d103      	bne.n	8000ee8 <button_led_toggle_test+0x20>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <button_led_toggle_test+0x8c>)
 8000ee4:	f001 fed3 	bl	8002c8e <HAL_GPIO_TogglePin>
	}
	if(get_button(GPIOC,GPIO_PIN_1, BTN1) == BUTTON_PRESS)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2102      	movs	r1, #2
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <button_led_toggle_test+0x88>)
 8000eee:	f000 f835 	bl	8000f5c <get_button>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d103      	bne.n	8000f00 <button_led_toggle_test+0x38>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <button_led_toggle_test+0x8c>)
 8000efc:	f001 fec7 	bl	8002c8e <HAL_GPIO_TogglePin>
	}
	if(get_button(GPIOC,GPIO_PIN_2, BTN2) == BUTTON_PRESS)
 8000f00:	2202      	movs	r2, #2
 8000f02:	2104      	movs	r1, #4
 8000f04:	4812      	ldr	r0, [pc, #72]	; (8000f50 <button_led_toggle_test+0x88>)
 8000f06:	f000 f829 	bl	8000f5c <get_button>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d103      	bne.n	8000f18 <button_led_toggle_test+0x50>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4810      	ldr	r0, [pc, #64]	; (8000f54 <button_led_toggle_test+0x8c>)
 8000f14:	f001 febb 	bl	8002c8e <HAL_GPIO_TogglePin>
	}
	if(get_button(GPIOC,GPIO_PIN_3, BTN3) == BUTTON_PRESS)
 8000f18:	2203      	movs	r2, #3
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <button_led_toggle_test+0x88>)
 8000f1e:	f000 f81d 	bl	8000f5c <get_button>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <button_led_toggle_test+0x68>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000f28:	2108      	movs	r1, #8
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <button_led_toggle_test+0x8c>)
 8000f2c:	f001 feaf 	bl	8002c8e <HAL_GPIO_TogglePin>
	}
	if(get_button(GPIOC,GPIO_PIN_13, BTN4) == BUTTON_PRESS) // BLUE BUTTON
 8000f30:	2204      	movs	r2, #4
 8000f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <button_led_toggle_test+0x88>)
 8000f38:	f000 f810 	bl	8000f5c <get_button>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d103      	bne.n	8000f4a <button_led_toggle_test+0x82>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f42:	2120      	movs	r1, #32
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <button_led_toggle_test+0x90>)
 8000f46:	f001 fea2 	bl	8002c8e <HAL_GPIO_TogglePin>
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020000 	.word	0x40020000

08000f5c <get_button>:

int get_button(GPIO_TypeDef *GPIO,int button_pin, int button_num) //interlock & debounce 구현
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
	// 지역 변수에 static을 쓰면 전역 변수처럼 함수를 빠져 나갔다 와도 값이 유지가 된다.
	static unsigned char button_status[] = {BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};

	int current_state;
	current_state = HAL_GPIO_ReadPin(GPIO, button_pin);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f001 fe5c 	bl	8002c2c <HAL_GPIO_ReadPin>
 8000f74:	4603      	mov	r3, r0
 8000f76:	617b      	str	r3, [r7, #20]

	if(current_state == BUTTON_PRESS && button_status[button_num] == BUTTON_RELEASE) //버튼이 처음 눌러진 상태
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <get_button+0x42>
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <get_button+0x74>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d109      	bne.n	8000f9e <get_button+0x42>
	{
		HAL_Delay(60); // noise가 지나가기를 기다린다.
 8000f8a:	203c      	movs	r0, #60	; 0x3c
 8000f8c:	f001 fb32 	bl	80025f4 <HAL_Delay>
		button_status[button_num] = BUTTON_PRESS; // noise가 지나간 상태의 High 상태
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <get_button+0x74>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
		return BUTTON_RELEASE; // 아직은 완전히 눌렸다 떼어진 상태가 아니다.
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e013      	b.n	8000fc6 <get_button+0x6a>
	}
	else if(current_state == BUTTON_RELEASE && button_status[button_num] == BUTTON_PRESS)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d10f      	bne.n	8000fc4 <get_button+0x68>
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <get_button+0x74>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d109      	bne.n	8000fc4 <get_button+0x68>
	{
		HAL_Delay(60);
 8000fb0:	203c      	movs	r0, #60	; 0x3c
 8000fb2:	f001 fb1f 	bl	80025f4 <HAL_Delay>
		button_status[button_num] = BUTTON_RELEASE; // 다음 버튼 체크를 위해서 초기화
 8000fb6:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <get_button+0x74>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4413      	add	r3, r2
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS; // 완전히 1번 눌렀다 떼어진 상태로 인정
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e000      	b.n	8000fc6 <get_button+0x6a>
	}
	return BUTTON_RELEASE; // 버튼이 OPEN상태
 8000fc4:	2301      	movs	r3, #1
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <queue_full>:
	     return TRUE;
	else return FALSE;
}

int queue_full(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
	int tmp=(rear1+1)%QUEUE_MAX; //원형 큐에서 rear+1을 MAX로 나눈 나머지값이
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <queue_full+0x40>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <queue_full+0x44>)
 8000fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe6:	1151      	asrs	r1, r2, #5
 8000fe8:	17da      	asrs	r2, r3, #31
 8000fea:	1a8a      	subs	r2, r1, r2
 8000fec:	2164      	movs	r1, #100	; 0x64
 8000fee:	fb01 f202 	mul.w	r2, r1, r2
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	607b      	str	r3, [r7, #4]
	if (tmp == front1) //front와 같으면 큐는 가득차 있는 상태
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <queue_full+0x48>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d101      	bne.n	8001004 <queue_full+0x30>
		return TRUE;
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <queue_full+0x32>
	else
		return FALSE;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000000c 	.word	0x2000000c
 8001018:	51eb851f 	.word	0x51eb851f
 800101c:	20000008 	.word	0x20000008

08001020 <insert_queue>:
void insert_queue(unsigned char value)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	if (queue_full())
 800102a:	f7ff ffd3 	bl	8000fd4 <queue_full>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <insert_queue+0x1c>
	{
		printf("Queue is Full.\n");
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <insert_queue+0x4c>)
 8001036:	f007 ff0d 	bl	8008e54 <puts>
	{
		rear1 = (rear1+1) % QUEUE_MAX;
		queue[rear1]=value;
	}

}
 800103a:	e013      	b.n	8001064 <insert_queue+0x44>
		rear1 = (rear1+1) % QUEUE_MAX;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <insert_queue+0x50>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1c5a      	adds	r2, r3, #1
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <insert_queue+0x54>)
 8001044:	fb83 1302 	smull	r1, r3, r3, r2
 8001048:	1159      	asrs	r1, r3, #5
 800104a:	17d3      	asrs	r3, r2, #31
 800104c:	1acb      	subs	r3, r1, r3
 800104e:	2164      	movs	r1, #100	; 0x64
 8001050:	fb01 f303 	mul.w	r3, r1, r3
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	4a06      	ldr	r2, [pc, #24]	; (8001070 <insert_queue+0x50>)
 8001058:	6013      	str	r3, [r2, #0]
		queue[rear1]=value;
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <insert_queue+0x50>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4906      	ldr	r1, [pc, #24]	; (8001078 <insert_queue+0x58>)
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	54ca      	strb	r2, [r1, r3]
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800ad60 	.word	0x0800ad60
 8001070:	2000000c 	.word	0x2000000c
 8001074:	51eb851f 	.word	0x51eb851f
 8001078:	20004c38 	.word	0x20004c38

0800107c <i2c_lcd_main>:
void i2c_lcd_init(void);

unsigned char lcd_test[4] = { '4','3', 0};

void i2c_lcd_main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
//		  //HAL_Delay(1);
//	   }
//	   HAL_Delay(1000);
//  }
#if 1
	uint8_t value=0;
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
	init_i2c();
 8001086:	f000 f9b3 	bl	80013f0 <init_i2c>
	i2c_lcd_init();
 800108a:	f000 f8b1 	bl	80011f0 <i2c_lcd_init>
	while(1)
	{
		move_cursor(0,0);
 800108e:	2100      	movs	r1, #0
 8001090:	2000      	movs	r0, #0
 8001092:	f000 f8db 	bl	800124c <move_cursor>
		lcd_string("Hello World!");
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <i2c_lcd_main+0x50>)
 8001098:	f000 f8c3 	bl	8001222 <lcd_string>
		move_cursor(1,0);
 800109c:	2100      	movs	r1, #0
 800109e:	2001      	movs	r0, #1
 80010a0:	f000 f8d4 	bl	800124c <move_cursor>
		lcd_data(value + '0');
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	3330      	adds	r3, #48	; 0x30
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f858 	bl	8001160 <lcd_data>
		value++;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3301      	adds	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
		if(value>9)value=0;
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b09      	cmp	r3, #9
 80010ba:	d901      	bls.n	80010c0 <i2c_lcd_main+0x44>
 80010bc:	2300      	movs	r3, #0
 80010be:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80010c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c4:	f001 fa96 	bl	80025f4 <HAL_Delay>
		move_cursor(0,0);
 80010c8:	e7e1      	b.n	800108e <i2c_lcd_main+0x12>
 80010ca:	bf00      	nop
 80010cc:	0800ad80 	.word	0x0800ad80

080010d0 <lcd_command>:
	}
#endif
}

void lcd_command(uint8_t command){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f023 030f 	bic.w	r3, r3, #15
 80010e0:	74fb      	strb	r3, [r7, #19]
	low_nibble = (command<<4) & 0xf0;
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	74bb      	strb	r3, [r7, #18]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80010e8:	7cfb      	ldrb	r3, [r7, #19]
 80010ea:	f043 030c 	orr.w	r3, r3, #12
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 80010f2:	7cfb      	ldrb	r3, [r7, #19]
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	737b      	strb	r3, [r7, #13]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 80010fc:	7cbb      	ldrb	r3, [r7, #18]
 80010fe:	f043 030c 	orr.w	r3, r3, #12
 8001102:	b2db      	uxtb	r3, r3
 8001104:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001106:	7cbb      	ldrb	r3, [r7, #18]
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	b2db      	uxtb	r3, r3
 800110e:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
#else
	i2c_start();
 8001110:	f000 f8b4 	bl	800127c <i2c_start>
	//주소 전송
	if (i2c_send_byte(I2C_LCD_ADDRESS) != 0) {
 8001114:	204e      	movs	r0, #78	; 0x4e
 8001116:	f000 f925 	bl	8001364 <i2c_send_byte>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <lcd_command+0x5c>
		// 슬레이브가 ACK하지 않으면 에러 처리
		printf("Error sending slave address for command\n");
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <lcd_command+0x8c>)
 8001122:	f007 fe97 	bl	8008e54 <puts>
		i2c_stop();
 8001126:	f000 f8cb 	bl	80012c0 <i2c_stop>
		return;
 800112a:	e013      	b.n	8001154 <lcd_command+0x84>
	}
	//데이터 전송
	for(int i=0; i<4; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <lcd_command+0x78>
	{
		i2c_send_byte(i2c_buffer[i]);
 8001132:	f107 020c 	add.w	r2, r7, #12
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f911 	bl	8001364 <i2c_send_byte>
	for(int i=0; i<4; i++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b03      	cmp	r3, #3
 800114c:	ddf1      	ble.n	8001132 <lcd_command+0x62>
	}
	i2c_stop();
 800114e:	f000 f8b7 	bl	80012c0 <i2c_stop>
#endif
	return;
 8001152:	bf00      	nop
}
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	0800ad90 	.word	0x0800ad90

08001160 <lcd_data>:
void lcd_data(uint8_t data){ // 1byte를 출력
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f023 030f 	bic.w	r3, r3, #15
 8001170:	74fb      	strb	r3, [r7, #19]
	low_nibble = (data<<4) & 0xf0;
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	74bb      	strb	r3, [r7, #18]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001178:	7cfb      	ldrb	r3, [r7, #19]
 800117a:	f043 030d 	orr.w	r3, r3, #13
 800117e:	b2db      	uxtb	r3, r3
 8001180:	733b      	strb	r3, [r7, #12]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	f043 0309 	orr.w	r3, r3, #9
 8001188:	b2db      	uxtb	r3, r3
 800118a:	737b      	strb	r3, [r7, #13]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 800118c:	7cbb      	ldrb	r3, [r7, #18]
 800118e:	f043 030d 	orr.w	r3, r3, #13
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8001196:	7cbb      	ldrb	r3, [r7, #18]
 8001198:	f043 0309 	orr.w	r3, r3, #9
 800119c:	b2db      	uxtb	r3, r3
 800119e:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
#else
	i2c_start();
 80011a0:	f000 f86c 	bl	800127c <i2c_start>
	//주소 전송
	if (i2c_send_byte(I2C_LCD_ADDRESS) != 0) {
 80011a4:	204e      	movs	r0, #78	; 0x4e
 80011a6:	f000 f8dd 	bl	8001364 <i2c_send_byte>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <lcd_data+0x5c>
		// 슬레이브가 ACK하지 않으면 에러 처리
		printf("Error sending slave address for command\n");
 80011b0:	480e      	ldr	r0, [pc, #56]	; (80011ec <lcd_data+0x8c>)
 80011b2:	f007 fe4f 	bl	8008e54 <puts>
		i2c_stop();
 80011b6:	f000 f883 	bl	80012c0 <i2c_stop>
		return;
 80011ba:	e013      	b.n	80011e4 <lcd_data+0x84>
	}
	// 데이터 전송
	for(int i=0; i<4; i++)
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e00a      	b.n	80011d8 <lcd_data+0x78>
	{
		i2c_send_byte(i2c_buffer[i]);
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f8c9 	bl	8001364 <i2c_send_byte>
	for(int i=0; i<4; i++)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	ddf1      	ble.n	80011c2 <lcd_data+0x62>
	}
	i2c_stop();
 80011de:	f000 f86f 	bl	80012c0 <i2c_stop>
#endif
	return;
 80011e2:	bf00      	nop
}
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800ad90 	.word	0x0800ad90

080011f0 <i2c_lcd_init>:
void i2c_lcd_init(void){ //초기화
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	lcd_command(0x33);
 80011f4:	2033      	movs	r0, #51	; 0x33
 80011f6:	f7ff ff6b 	bl	80010d0 <lcd_command>
	lcd_command(0x32);
 80011fa:	2032      	movs	r0, #50	; 0x32
 80011fc:	f7ff ff68 	bl	80010d0 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8001200:	2028      	movs	r0, #40	; 0x28
 8001202:	f7ff ff65 	bl	80010d0 <lcd_command>
	lcd_command(DISPLAY_ON);
 8001206:	200c      	movs	r0, #12
 8001208:	f7ff ff62 	bl	80010d0 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 800120c:	2006      	movs	r0, #6
 800120e:	f7ff ff5f 	bl	80010d0 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff ff5c 	bl	80010d0 <lcd_command>
	HAL_Delay(2);
 8001218:	2002      	movs	r0, #2
 800121a:	f001 f9eb 	bl	80025f4 <HAL_Delay>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}

08001222 <lcd_string>:
void lcd_string(uint8_t *str){ //string값 찍는 함수 , null을 만날 때 까지 출력
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	while(*str)lcd_data(*str++);
 800122a:	e006      	b.n	800123a <lcd_string+0x18>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff93 	bl	8001160 <lcd_data>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f4      	bne.n	800122c <lcd_string+0xa>
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <move_cursor>:
void move_cursor(uint8_t row, uint8_t column){ // 커서 이동 함수
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	460a      	mov	r2, r1
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	019b      	lsls	r3, r3, #6
 8001260:	b2da      	uxtb	r2, r3
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	4313      	orrs	r3, r2
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff2e 	bl	80010d0 <lcd_command>
	return;
 8001274:	bf00      	nop
}
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <i2c_start>:
 *
 * SDA --> PB9 , SCL --> PB8
*/

void i2c_start(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	// SDA, SCL HIGH
	GPIOB->ODR |= 1 << I2C_SDA | 1 << I2C_SCL;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <i2c_start+0x40>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <i2c_start+0x40>)
 8001286:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800128a:	6153      	str	r3, [r2, #20]
	delay_us(5);
 800128c:	2005      	movs	r0, #5
 800128e:	f001 f8d7 	bl	8002440 <delay_us>

	// SDA LOW
	GPIOB->ODR &= ~(1 << I2C_SDA);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <i2c_start+0x40>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <i2c_start+0x40>)
 8001298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800129c:	6153      	str	r3, [r2, #20]
	delay_us(5);
 800129e:	2005      	movs	r0, #5
 80012a0:	f001 f8ce 	bl	8002440 <delay_us>

	// SCL LOW
	GPIOB->ODR &= ~(1 << I2C_SCL);
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <i2c_start+0x40>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <i2c_start+0x40>)
 80012aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ae:	6153      	str	r3, [r2, #20]
	delay_us(5);
 80012b0:	2005      	movs	r0, #5
 80012b2:	f001 f8c5 	bl	8002440 <delay_us>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020400 	.word	0x40020400

080012c0 <i2c_stop>:

void i2c_stop(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	// SDA LOW
	GPIOB->ODR &= ~(1 << I2C_SDA);
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <i2c_stop+0x40>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <i2c_stop+0x40>)
 80012ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012ce:	6153      	str	r3, [r2, #20]
	delay_us(5);
 80012d0:	2005      	movs	r0, #5
 80012d2:	f001 f8b5 	bl	8002440 <delay_us>

	// SCL HIGH
	GPIOB->ODR |= 1 << I2C_SCL;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <i2c_stop+0x40>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <i2c_stop+0x40>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6153      	str	r3, [r2, #20]
	delay_us(5);
 80012e2:	2005      	movs	r0, #5
 80012e4:	f001 f8ac 	bl	8002440 <delay_us>

	// SDA HIGH
	GPIOB->ODR |= 1 << I2C_SDA;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <i2c_stop+0x40>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <i2c_stop+0x40>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	6153      	str	r3, [r2, #20]
	delay_us(5);
 80012f4:	2005      	movs	r0, #5
 80012f6:	f001 f8a3 	bl	8002440 <delay_us>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40020400 	.word	0x40020400

08001304 <i2c_send_bit>:

// I2C 한 비트 전송 함수 (MSB부터 전송)
void i2c_send_bit(uint8_t bit)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	if(bit) // 비트가 1일 경우 SDA를 HIGH로
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d006      	beq.n	8001322 <i2c_send_bit+0x1e>
	{
		GPIOB->ODR |= 1 << I2C_SDA;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <i2c_send_bit+0x5c>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <i2c_send_bit+0x5c>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131e:	6153      	str	r3, [r2, #20]
 8001320:	e005      	b.n	800132e <i2c_send_bit+0x2a>
	}
	else // 비트가 0일 경우 SDA를 LOW로
	{
		GPIOB->ODR &= ~(1 << I2C_SDA);
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <i2c_send_bit+0x5c>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <i2c_send_bit+0x5c>)
 8001328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800132c:	6153      	str	r3, [r2, #20]
	}
	delay_us(5);
 800132e:	2005      	movs	r0, #5
 8001330:	f001 f886 	bl	8002440 <delay_us>

	// SCL 펄스 : HIGH일 때 슬레이브가 SDA를 샘플링
	GPIOB->ODR |= 1 << I2C_SCL;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <i2c_send_bit+0x5c>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	4a09      	ldr	r2, [pc, #36]	; (8001360 <i2c_send_bit+0x5c>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6153      	str	r3, [r2, #20]
	delay_us(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f001 f87d 	bl	8002440 <delay_us>
	GPIOB->ODR &= ~(1 << I2C_SCL);
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <i2c_send_bit+0x5c>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <i2c_send_bit+0x5c>)
 800134c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001350:	6153      	str	r3, [r2, #20]
	delay_us(5);
 8001352:	2005      	movs	r0, #5
 8001354:	f001 f874 	bl	8002440 <delay_us>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020400 	.word	0x40020400

08001364 <i2c_send_byte>:

// I2C로 1바이트 전송 (MSB부터) 후 ACK 읽기
// ACK가 LOW이면 정상으로 간주하고, HIGH이면 NACK
uint8_t i2c_send_byte(uint8_t data)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]


	for(int i=7;i>=0;i--) //MSB부터 전송
 800136e:	2307      	movs	r3, #7
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e00d      	b.n	8001390 <i2c_send_byte+0x2c>
	{
		i2c_send_bit((data >> i) & 0x01);
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	fa42 f303 	asr.w	r3, r2, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ffbd 	bl	8001304 <i2c_send_bit>
	for(int i=7;i>=0;i--) //MSB부터 전송
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3b01      	subs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	daee      	bge.n	8001374 <i2c_send_byte+0x10>
	}

	// ACK를 위한 비트: SDA를 release(high)한 후, 슬레이브가 LOW로 끌어내리는지 확인 (끌어내리면 ACK)
	GPIOB->ODR |= 1 << I2C_SDA; // SDA HIGH
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <i2c_send_byte+0x88>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <i2c_send_byte+0x88>)
 800139c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a0:	6153      	str	r3, [r2, #20]
	delay_us(5);
 80013a2:	2005      	movs	r0, #5
 80013a4:	f001 f84c 	bl	8002440 <delay_us>

	// ACK 펄스 : SCL HIGH 시점에 SDA 상태를 읽음
	GPIOB->ODR |= 1 << I2C_SCL;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <i2c_send_byte+0x88>)
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <i2c_send_byte+0x88>)
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	6153      	str	r3, [r2, #20]
	delay_us(5);
 80013b4:	2005      	movs	r0, #5
 80013b6:	f001 f843 	bl	8002440 <delay_us>
	uint8_t ack = ((GPIOB->IDR >> I2C_SDA) & 1) ? 1 : 0;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <i2c_send_byte+0x88>)
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	0a5b      	lsrs	r3, r3, #9
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf14      	ite	ne
 80013c8:	2301      	movne	r3, #1
 80013ca:	2300      	moveq	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	72fb      	strb	r3, [r7, #11]
	GPIOB->ODR &= ~(1 << I2C_SCL);
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <i2c_send_byte+0x88>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <i2c_send_byte+0x88>)
 80013d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013da:	6153      	str	r3, [r2, #20]
	delay_us(5);
 80013dc:	2005      	movs	r0, #5
 80013de:	f001 f82f 	bl	8002440 <delay_us>

	return ack;
 80013e2:	7afb      	ldrb	r3, [r7, #11]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020400 	.word	0x40020400

080013f0 <init_i2c>:

void init_i2c(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

	// MODER: 핀을 일반 출력 모드("01")로 설정
	GPIOB->MODER &= ~((3 << (I2C_SDA * 2)) | (3 << (I2C_SCL * 2)));
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <init_i2c+0x4c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a10      	ldr	r2, [pc, #64]	; (800143c <init_i2c+0x4c>)
 80013fa:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80013fe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((1 << (I2C_SDA * 2)) | (1 << (I2C_SCL * 2)));
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <init_i2c+0x4c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <init_i2c+0x4c>)
 8001406:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800140a:	6013      	str	r3, [r2, #0]

	// OTYPER: 오픈드레인으로 설정
	GPIOB->OTYPER |= ((1 << I2C_SDA) | (1 << I2C_SCL));
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <init_i2c+0x4c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <init_i2c+0x4c>)
 8001412:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001416:	6053      	str	r3, [r2, #4]


	// PUPDR: 내부 풀업 활성화 (각 핀마다 01)
	GPIOB->PUPDR &= ~((3 << (I2C_SDA*2)) | (3 << (I2C_SCL*2)));
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <init_i2c+0x4c>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <init_i2c+0x4c>)
 800141e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001422:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= ((1 << (I2C_SDA*2)) | (1 << (I2C_SCL*2)));
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <init_i2c+0x4c>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <init_i2c+0x4c>)
 800142a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40020400 	.word	0x40020400

08001440 <keypadInit>:
uint16_t keypadRowPin[4] = {GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7}; //R1~R4 GPIO Input & Pull-up으로 설정을 해야 한다.
uint16_t keypadColPin[4] = {GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11}; //C1~C4  GPIO Output으로만 설정 한다.


void keypadInit()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	for(uint8_t col = 0; col < 4; col++)
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e00e      	b.n	800146a <keypadInit+0x2a>
	{
		HAL_GPIO_WritePin(keypadColPort[col], keypadColPin[col], SET); //초기 값 1로 셋팅
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <keypadInit+0x3c>)
 8001450:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <keypadInit+0x40>)
 8001458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145c:	2201      	movs	r2, #1
 800145e:	4619      	mov	r1, r3
 8001460:	f001 fbfc 	bl	8002c5c <HAL_GPIO_WritePin>
	for(uint8_t col = 0; col < 4; col++)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	3301      	adds	r3, #1
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d9ed      	bls.n	800144c <keypadInit+0xc>
	}
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000020 	.word	0x20000020
 8001480:	20000038 	.word	0x20000038

08001484 <getKeypadState>:

uint8_t getKeypadState(uint8_t col, uint8_t row)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	71bb      	strb	r3, [r7, #6]
#if 1
	uint8_t keypadChar[4][4] = {
 8001494:	4b33      	ldr	r3, [pc, #204]	; (8001564 <getKeypadState+0xe0>)
 8001496:	f107 040c 	add.w	r4, r7, #12
 800149a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800149c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1, 1, 1, 1},
			{1, 1, 1, 1},
			{1, 1, 1, 1},
			{1, 1, 1, 1},
	};
	uint8_t curState = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	77fb      	strb	r3, [r7, #31]

	HAL_GPIO_WritePin(keypadColPort[col], keypadColPin[col], RESET);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4a30      	ldr	r2, [pc, #192]	; (8001568 <getKeypadState+0xe4>)
 80014a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <getKeypadState+0xe8>)
 80014b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	f001 fbd0 	bl	8002c5c <HAL_GPIO_WritePin>
	curState = HAL_GPIO_ReadPin(keypadRowPort[row], keypadRowPin[row]);
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <getKeypadState+0xec>)
 80014c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	492b      	ldr	r1, [pc, #172]	; (8001574 <getKeypadState+0xf0>)
 80014c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4610      	mov	r0, r2
 80014d0:	f001 fbac 	bl	8002c2c <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	77fb      	strb	r3, [r7, #31]

	HAL_GPIO_WritePin(keypadColPort[col], keypadColPin[col], SET);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a23      	ldr	r2, [pc, #140]	; (8001568 <getKeypadState+0xe4>)
 80014dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <getKeypadState+0xe8>)
 80014e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4619      	mov	r1, r3
 80014ec:	f001 fbb6 	bl	8002c5c <HAL_GPIO_WritePin>

	if(curState == PUSHED && prevState[col][row] == RELEASED)
 80014f0:	7ffb      	ldrb	r3, [r7, #31]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d112      	bne.n	800151c <getKeypadState+0x98>
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	491f      	ldr	r1, [pc, #124]	; (8001578 <getKeypadState+0xf4>)
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	440a      	add	r2, r1
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d109      	bne.n	800151c <getKeypadState+0x98>
	{
		prevState[col][row] = curState;
 8001508:	79fa      	ldrb	r2, [r7, #7]
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	491a      	ldr	r1, [pc, #104]	; (8001578 <getKeypadState+0xf4>)
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	440a      	add	r2, r1
 8001512:	4413      	add	r3, r2
 8001514:	7ffa      	ldrb	r2, [r7, #31]
 8001516:	701a      	strb	r2, [r3, #0]
		return 0;
 8001518:	2300      	movs	r3, #0
 800151a:	e01e      	b.n	800155a <getKeypadState+0xd6>
	}
	else if (curState == RELEASED && prevState[col][row] == PUSHED)
 800151c:	7ffb      	ldrb	r3, [r7, #31]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d11a      	bne.n	8001558 <getKeypadState+0xd4>
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	79bb      	ldrb	r3, [r7, #6]
 8001526:	4914      	ldr	r1, [pc, #80]	; (8001578 <getKeypadState+0xf4>)
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	440a      	add	r2, r1
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d111      	bne.n	8001558 <getKeypadState+0xd4>
	{
		prevState[col][row] = curState;
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	490f      	ldr	r1, [pc, #60]	; (8001578 <getKeypadState+0xf4>)
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	440a      	add	r2, r1
 800153e:	4413      	add	r3, r2
 8001540:	7ffa      	ldrb	r2, [r7, #31]
 8001542:	701a      	strb	r2, [r3, #0]
		return keypadChar[col][row];
 8001544:	79fa      	ldrb	r2, [r7, #7]
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	0092      	lsls	r2, r2, #2
 800154a:	f107 0120 	add.w	r1, r7, #32
 800154e:	440a      	add	r2, r1
 8001550:	4413      	add	r3, r2
 8001552:	3b14      	subs	r3, #20
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	e000      	b.n	800155a <getKeypadState+0xd6>
	}
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	0800adb8 	.word	0x0800adb8
 8001568:	20000020 	.word	0x20000020
 800156c:	20000038 	.word	0x20000038
 8001570:	20000010 	.word	0x20000010
 8001574:	20000030 	.word	0x20000030
 8001578:	20000040 	.word	0x20000040

0800157c <keypadScan>:

uint8_t keypadScan()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
	uint8_t data;

	for(uint8_t col=0; col<4; col++)
 8001582:	2300      	movs	r3, #0
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	e018      	b.n	80015ba <keypadScan+0x3e>
	{
		for(uint8_t row=0; row<4; row++)
 8001588:	2300      	movs	r3, #0
 800158a:	71bb      	strb	r3, [r7, #6]
 800158c:	e00f      	b.n	80015ae <keypadScan+0x32>
		{
			data = getKeypadState(col, row);
 800158e:	79ba      	ldrb	r2, [r7, #6]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff75 	bl	8001484 <getKeypadState>
 800159a:	4603      	mov	r3, r0
 800159c:	717b      	strb	r3, [r7, #5]
			if(data != 0)
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <keypadScan+0x2c>
			{
				return data;
 80015a4:	797b      	ldrb	r3, [r7, #5]
 80015a6:	e00c      	b.n	80015c2 <keypadScan+0x46>
		for(uint8_t row=0; row<4; row++)
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	3301      	adds	r3, #1
 80015ac:	71bb      	strb	r3, [r7, #6]
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d9ec      	bls.n	800158e <keypadScan+0x12>
	for(uint8_t col=0; col<4; col++)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	3301      	adds	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d9e3      	bls.n	8001588 <keypadScan+0xc>
			}
		}
	}
	return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80015d4:	1d39      	adds	r1, r7, #4
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	2201      	movs	r2, #1
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <__io_putchar+0x20>)
 80015de:	f003 f896 	bl	800470e <HAL_UART_Transmit>

  return ch;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20004e74 	.word	0x20004e74

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 ffbc 	bl	8002570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f8:	f000 f858 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fc:	f000 faa4 	bl	8001b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001600:	f000 fa78 	bl	8001af4 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001604:	f000 fa52 	bl	8001aac <MX_TIM11_Init>
  MX_TIM2_Init();
 8001608:	f000 f916 	bl	8001838 <MX_TIM2_Init>
  MX_I2C1_Init();
 800160c:	f000 f8b8 	bl	8001780 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001610:	f000 f95e 	bl	80018d0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001614:	f000 f9d2 	bl	80019bc <MX_TIM5_Init>
  MX_I2C3_Init();
 8001618:	f000 f8e0 	bl	80017dc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	4916      	ldr	r1, [pc, #88]	; (8001678 <main+0x88>)
 8001620:	4816      	ldr	r0, [pc, #88]	; (800167c <main+0x8c>)
 8001622:	f003 f906 	bl	8004832 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001626:	4816      	ldr	r0, [pc, #88]	; (8001680 <main+0x90>)
 8001628:	f002 f986 	bl	8003938 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // for make delay_us
 800162c:	4815      	ldr	r0, [pc, #84]	; (8001684 <main+0x94>)
 800162e:	f002 f983 	bl	8003938 <HAL_TIM_Base_Start_IT>
  keypadInit();
 8001632:	f7ff ff05 	bl	8001440 <keypadInit>
  //dotmatrix_main();
  //dotmatrix_main_test();
  //dotmatrix_main_func();
  //led_main();
  //ds1302_main();
  i2c_lcd_main();
 8001636:	f7ff fd21 	bl	800107c <i2c_lcd_main>
  //buzzer_main();
  //servo_motor_main();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800163a:	f004 f827 	bl	800568c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <main+0x98>)
 8001640:	2100      	movs	r1, #0
 8001642:	4812      	ldr	r0, [pc, #72]	; (800168c <main+0x9c>)
 8001644:	f004 f86c 	bl	8005720 <osThreadNew>
 8001648:	4603      	mov	r3, r0
 800164a:	4a11      	ldr	r2, [pc, #68]	; (8001690 <main+0xa0>)
 800164c:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <main+0xa4>)
 8001650:	2100      	movs	r1, #0
 8001652:	4811      	ldr	r0, [pc, #68]	; (8001698 <main+0xa8>)
 8001654:	f004 f864 	bl	8005720 <osThreadNew>
 8001658:	4603      	mov	r3, r0
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <main+0xac>)
 800165c:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <main+0xb0>)
 8001660:	2100      	movs	r1, #0
 8001662:	4810      	ldr	r0, [pc, #64]	; (80016a4 <main+0xb4>)
 8001664:	f004 f85c 	bl	8005720 <osThreadNew>
 8001668:	4603      	mov	r3, r0
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <main+0xb8>)
 800166c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800166e:	f004 f831 	bl	80056d4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button_led_toggle_test();
 8001672:	f7ff fc29 	bl	8000ec8 <button_led_toggle_test>
 8001676:	e7fc      	b.n	8001672 <main+0x82>
 8001678:	20004e24 	.word	0x20004e24
 800167c:	20004e74 	.word	0x20004e74
 8001680:	20004dd8 	.word	0x20004dd8
 8001684:	20004e2c 	.word	0x20004e2c
 8001688:	0800ae04 	.word	0x0800ae04
 800168c:	08001cb1 	.word	0x08001cb1
 8001690:	20004c9c 	.word	0x20004c9c
 8001694:	0800ae28 	.word	0x0800ae28
 8001698:	08001ccd 	.word	0x08001ccd
 800169c:	20004e20 	.word	0x20004e20
 80016a0:	0800ae4c 	.word	0x0800ae4c
 80016a4:	08001ce1 	.word	0x08001ce1
 80016a8:	20004e28 	.word	0x20004e28

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2230      	movs	r2, #48	; 0x30
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f006 fe8f 	bl	80083de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <SystemClock_Config+0xcc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a27      	ldr	r2, [pc, #156]	; (8001778 <SystemClock_Config+0xcc>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <SystemClock_Config+0xcc>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <SystemClock_Config+0xd0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <SystemClock_Config+0xd0>)
 80016f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <SystemClock_Config+0xd0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001708:	2302      	movs	r3, #2
 800170a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800170c:	2301      	movs	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001710:	2310      	movs	r3, #16
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	2302      	movs	r3, #2
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001718:	2300      	movs	r3, #0
 800171a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800171c:	2310      	movs	r3, #16
 800171e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001720:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001726:	2304      	movs	r3, #4
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172a:	2304      	movs	r3, #4
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fc0a 	bl	8002f4c <HAL_RCC_OscConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800173e:	f000 fb0f 	bl	8001d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2302      	movs	r3, #2
 8001748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800174e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	2102      	movs	r1, #2
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fe6c 	bl	800343c <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800176a:	f000 faf9 	bl	8001d60 <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3750      	adds	r7, #80	; 0x50
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <MX_I2C1_Init+0x54>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_I2C1_Init+0x50>)
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_I2C1_Init+0x58>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_I2C1_Init+0x50>)
 800179e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017be:	f001 fa81 	bl	8002cc4 <HAL_I2C_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c8:	f000 faca 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20004cf4 	.word	0x20004cf4
 80017d4:	40005400 	.word	0x40005400
 80017d8:	000186a0 	.word	0x000186a0

080017dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_I2C3_Init+0x50>)
 80017e2:	4a13      	ldr	r2, [pc, #76]	; (8001830 <MX_I2C3_Init+0x54>)
 80017e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_I2C3_Init+0x50>)
 80017e8:	4a12      	ldr	r2, [pc, #72]	; (8001834 <MX_I2C3_Init+0x58>)
 80017ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_I2C3_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_I2C3_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_I2C3_Init+0x50>)
 80017fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_I2C3_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_I2C3_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_I2C3_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_I2C3_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_I2C3_Init+0x50>)
 800181a:	f001 fa53 	bl	8002cc4 <HAL_I2C_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001824:	f000 fa9c 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20004ca0 	.word	0x20004ca0
 8001830:	40005c00 	.word	0x40005c00
 8001834:	000186a0 	.word	0x000186a0

08001838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_TIM2_Init+0x94>)
 8001856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_TIM2_Init+0x94>)
 800185e:	2253      	movs	r2, #83	; 0x53
 8001860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_TIM2_Init+0x94>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_TIM2_Init+0x94>)
 800186a:	f04f 32ff 	mov.w	r2, #4294967295
 800186e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_TIM2_Init+0x94>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_TIM2_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187c:	4813      	ldr	r0, [pc, #76]	; (80018cc <MX_TIM2_Init+0x94>)
 800187e:	f002 f80b 	bl	8003898 <HAL_TIM_Base_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001888:	f000 fa6a 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4619      	mov	r1, r3
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_TIM2_Init+0x94>)
 800189a:	f002 fad3 	bl	8003e44 <HAL_TIM_ConfigClockSource>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018a4:	f000 fa5c 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_TIM2_Init+0x94>)
 80018b6:	f002 fe5b 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018c0:	f000 fa4e 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20004e2c 	.word	0x20004e2c

080018d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
 80018fc:	615a      	str	r2, [r3, #20]
 80018fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001902:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <MX_TIM3_Init+0xe8>)
 8001904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 8001906:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001908:	2233      	movs	r2, #51	; 0x33
 800190a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <MX_TIM3_Init+0xe4>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001914:	f240 128f 	movw	r2, #399	; 0x18f
 8001918:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <MX_TIM3_Init+0xe4>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001926:	4823      	ldr	r0, [pc, #140]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001928:	f001 ffb6 	bl	8003898 <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001932:	f000 fa15 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800193c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001940:	4619      	mov	r1, r3
 8001942:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001944:	f002 fa7e 	bl	8003e44 <HAL_TIM_ConfigClockSource>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800194e:	f000 fa07 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001952:	4818      	ldr	r0, [pc, #96]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001954:	f002 f852 	bl	80039fc <HAL_TIM_PWM_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800195e:	f000 f9ff 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	4619      	mov	r1, r3
 8001970:	4810      	ldr	r0, [pc, #64]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001972:	f002 fdfd 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800197c:	f000 f9f0 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001980:	2360      	movs	r3, #96	; 0x60
 8001982:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001984:	23c7      	movs	r3, #199	; 0xc7
 8001986:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_TIM3_Init+0xe4>)
 8001998:	f002 f992 	bl	8003cc0 <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019a2:	f000 f9dd 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019a6:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_TIM3_Init+0xe4>)
 80019a8:	f000 fb22 	bl	8001ff0 <HAL_TIM_MspPostInit>

}
 80019ac:	bf00      	nop
 80019ae:	3738      	adds	r7, #56	; 0x38
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20004d90 	.word	0x20004d90
 80019b8:	40000400 	.word	0x40000400

080019bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08e      	sub	sp, #56	; 0x38
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 80019ee:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <MX_TIM5_Init+0xec>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1680-1;
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 80019f4:	f240 628f 	movw	r2, #1679	; 0x68f
 80019f8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a06:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a14:	4823      	ldr	r0, [pc, #140]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a16:	f001 ff3f 	bl	8003898 <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001a20:	f000 f99e 	bl	8001d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	481c      	ldr	r0, [pc, #112]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a32:	f002 fa07 	bl	8003e44 <HAL_TIM_ConfigClockSource>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001a3c:	f000 f990 	bl	8001d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a40:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a42:	f001 ffdb 	bl	80039fc <HAL_TIM_PWM_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001a4c:	f000 f988 	bl	8001d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a58:	f107 0320 	add.w	r3, r7, #32
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a60:	f002 fd86 	bl	8004570 <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001a6a:	f000 f979 	bl	8001d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a6e:	2360      	movs	r3, #96	; 0x60
 8001a70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2204      	movs	r2, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a86:	f002 f91b 	bl	8003cc0 <HAL_TIM_PWM_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001a90:	f000 f966 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <MX_TIM5_Init+0xe8>)
 8001a96:	f000 faab 	bl	8001ff0 <HAL_TIM_MspPostInit>

}
 8001a9a:	bf00      	nop
 8001a9c:	3738      	adds	r7, #56	; 0x38
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20004d48 	.word	0x20004d48
 8001aa8:	40000c00 	.word	0x40000c00

08001aac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_TIM11_Init+0x40>)
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <MX_TIM11_Init+0x44>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <MX_TIM11_Init+0x40>)
 8001ab8:	2253      	movs	r2, #83	; 0x53
 8001aba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_TIM11_Init+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_TIM11_Init+0x40>)
 8001ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ac8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_TIM11_Init+0x40>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_TIM11_Init+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_TIM11_Init+0x40>)
 8001ad8:	f001 fede 	bl	8003898 <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001ae2:	f000 f93d 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20004dd8 	.word	0x20004dd8
 8001af0:	40014800 	.word	0x40014800

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART2_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	f002 fda2 	bl	8004674 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 f913 	bl	8001d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20004e74 	.word	0x20004e74
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
 8001b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a4e      	ldr	r2, [pc, #312]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b48      	ldr	r3, [pc, #288]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a47      	ldr	r2, [pc, #284]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a39      	ldr	r2, [pc, #228]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <MX_GPIO_Init+0x158>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_Pin|LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f641 4121 	movw	r1, #7201	; 0x1c21
 8001bd4:	4833      	ldr	r0, [pc, #204]	; (8001ca4 <MX_GPIO_Init+0x15c>)
 8001bd6:	f001 f841 	bl	8002c5c <HAL_GPIO_WritePin>
                          |CLK_DS1302_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD1602_RS_Pin|LCD1602_E_Pin|LCD1602_DB4_Pin|CLK_74HC595_Pin
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f24a 416f 	movw	r1, #42095	; 0xa46f
 8001be0:	4831      	ldr	r0, [pc, #196]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001be2:	f001 f83b 	bl	8002c5c <HAL_GPIO_WritePin>
                          |LATCH_74HC595_Pin|SER_74HC595_Pin|LCD1602_DB5_Pin|LCD1602_DB6_Pin
                          |LCD1602_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COL1_KEYPAD_Pin|COL2_KEYPAD_Pin|COL3_KEYPAD_Pin|COL4_KEYPAD_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001bec:	482f      	ldr	r0, [pc, #188]	; (8001cac <MX_GPIO_Init+0x164>)
 8001bee:	f001 f835 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4828      	ldr	r0, [pc, #160]	; (8001cac <MX_GPIO_Init+0x164>)
 8001c0a:	f000 fe8b 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001c0e:	230f      	movs	r3, #15
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4822      	ldr	r0, [pc, #136]	; (8001cac <MX_GPIO_Init+0x164>)
 8001c22:	f000 fe7f 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin LD2_Pin CE_DS1302_Pin IO_DS1302_Pin
                           CLK_DS1302_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|LD2_Pin|CE_DS1302_Pin|IO_DS1302_Pin
 8001c26:	f641 4321 	movw	r3, #7201	; 0x1c21
 8001c2a:	617b      	str	r3, [r7, #20]
                          |CLK_DS1302_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4819      	ldr	r0, [pc, #100]	; (8001ca4 <MX_GPIO_Init+0x15c>)
 8001c40:	f000 fe70 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_KEYPAD_Pin ROW2_KEYPAD_Pin ROW3_KEYPAD_Pin ROW4_KEYPAD_Pin */
  GPIO_InitStruct.Pin = ROW1_KEYPAD_Pin|ROW2_KEYPAD_Pin|ROW3_KEYPAD_Pin|ROW4_KEYPAD_Pin;
 8001c44:	23f0      	movs	r3, #240	; 0xf0
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4815      	ldr	r0, [pc, #84]	; (8001cac <MX_GPIO_Init+0x164>)
 8001c58:	f000 fe64 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1602_RS_Pin LCD1602_E_Pin LCD1602_DB4_Pin CLK_74HC595_Pin
                           LATCH_74HC595_Pin SER_74HC595_Pin LCD1602_DB5_Pin LCD1602_DB6_Pin
                           LCD1602_DB7_Pin */
  GPIO_InitStruct.Pin = LCD1602_RS_Pin|LCD1602_E_Pin|LCD1602_DB4_Pin|CLK_74HC595_Pin
 8001c5c:	f24a 436f 	movw	r3, #42095	; 0xa46f
 8001c60:	617b      	str	r3, [r7, #20]
                          |LATCH_74HC595_Pin|SER_74HC595_Pin|LCD1602_DB5_Pin|LCD1602_DB6_Pin
                          |LCD1602_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <MX_GPIO_Init+0x160>)
 8001c76:	f000 fe55 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_KEYPAD_Pin COL2_KEYPAD_Pin COL3_KEYPAD_Pin COL4_KEYPAD_Pin */
  GPIO_InitStruct.Pin = COL1_KEYPAD_Pin|COL2_KEYPAD_Pin|COL3_KEYPAD_Pin|COL4_KEYPAD_Pin;
 8001c7a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4619      	mov	r1, r3
 8001c92:	4806      	ldr	r0, [pc, #24]	; (8001cac <MX_GPIO_Init+0x164>)
 8001c94:	f000 fe46 	bl	8002924 <HAL_GPIO_Init>

}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40020800 	.word	0x40020800

08001cb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001cb8:	2120      	movs	r1, #32
 8001cba:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <StartDefaultTask+0x18>)
 8001cbc:	f000 ffe7 	bl	8002c8e <HAL_GPIO_TogglePin>
	osDelay(50);
 8001cc0:	2032      	movs	r0, #50	; 0x32
 8001cc2:	f003 fdbf 	bl	8005844 <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001cc6:	e7f7      	b.n	8001cb8 <StartDefaultTask+0x8>
 8001cc8:	40020000 	.word	0x40020000

08001ccc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	button_led_toggle_test();
 8001cd4:	f7ff f8f8 	bl	8000ec8 <button_led_toggle_test>
    osDelay(1); // ?��?��?�� 주던�????????????? PRINTF ?��?���?????????????
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f003 fdb3 	bl	8005844 <osDelay>
	button_led_toggle_test();
 8001cde:	e7f9      	b.n	8001cd4 <StartTask02+0x8>

08001ce0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f003 fdab 	bl	8005844 <osDelay>
 8001cee:	e7fb      	b.n	8001ce8 <StartTask03+0x8>

08001cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d02:	f000 fc57 	bl	80025b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM11) { // INT�?????????? ?��?��?�� ?��마다
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0x58>
	 TIM11_1ms_counter++;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d18:	6013      	str	r3, [r2, #0]
	 TIM11_keypad_scan_timer++;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001d22:	6013      	str	r3, [r2, #0]
	 if(TIM11_keypad_scan_timer >= 60)
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b3b      	cmp	r3, #59	; 0x3b
 8001d2a:	dd0d      	ble.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0x58>
	 {
		 uint8_t key_value;
		 TIM11_keypad_scan_timer = 0;
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
		 key_value = keypadScan();
 8001d32:	f7ff fc23 	bl	800157c <keypadScan>
 8001d36:	4603      	mov	r3, r0
 8001d38:	73fb      	strb	r3, [r7, #15]
		 if(key_value)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0x58>
		 {
			 insert_queue(key_value); // circular queue?�� insert
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f96c 	bl	8001020 <insert_queue>
		 }
	 }
  }
  /* USER CODE END Callback 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40014400 	.word	0x40014400
 8001d54:	40014800 	.word	0x40014800
 8001d58:	2000024c 	.word	0x2000024c
 8001d5c:	20000250 	.word	0x20000250

08001d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <Error_Handler+0x8>
	...

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_MspInit+0x54>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <HAL_MspInit+0x54>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <HAL_MspInit+0x54>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_MspInit+0x54>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_MspInit+0x54>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_MspInit+0x54>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	210f      	movs	r1, #15
 8001dae:	f06f 0001 	mvn.w	r0, #1
 8001db2:	f000 fcfb 	bl	80027ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a42      	ldr	r2, [pc, #264]	; (8001eec <HAL_I2C_MspInit+0x128>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12d      	bne.n	8001e42 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a40      	ldr	r2, [pc, #256]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b3e      	ldr	r3, [pc, #248]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4835      	ldr	r0, [pc, #212]	; (8001ef4 <HAL_I2C_MspInit+0x130>)
 8001e20:	f000 fd80 	bl	8002924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	4b31      	ldr	r3, [pc, #196]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a30      	ldr	r2, [pc, #192]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e40:	e04f      	b.n	8001ee2 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a2c      	ldr	r2, [pc, #176]	; (8001ef8 <HAL_I2C_MspInit+0x134>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d14a      	bne.n	8001ee2 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	6313      	str	r3, [r2, #48]	; 0x30
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8a:	2312      	movs	r3, #18
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e96:	2304      	movs	r3, #4
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4816      	ldr	r0, [pc, #88]	; (8001efc <HAL_I2C_MspInit+0x138>)
 8001ea2:	f000 fd3f 	bl	8002924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	2312      	movs	r3, #18
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001eb6:	2309      	movs	r3, #9
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <HAL_I2C_MspInit+0x130>)
 8001ec2:	f000 fd2f 	bl	8002924 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_I2C_MspInit+0x12c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
}
 8001ee2:	bf00      	nop
 8001ee4:	3730      	adds	r7, #48	; 0x30
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40005c00 	.word	0x40005c00
 8001efc:	40020000 	.word	0x40020000

08001f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a31      	ldr	r2, [pc, #196]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001f2e:	e052      	b.n	8001fd6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2b      	ldr	r2, [pc, #172]	; (8001fe4 <HAL_TIM_Base_MspInit+0xe4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d116      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b28      	ldr	r3, [pc, #160]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	201d      	movs	r0, #29
 8001f5c:	f000 fc26 	bl	80027ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f60:	201d      	movs	r0, #29
 8001f62:	f000 fc3f 	bl	80027e4 <HAL_NVIC_EnableIRQ>
}
 8001f66:	e036      	b.n	8001fd6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <HAL_TIM_Base_MspInit+0xe8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d116      	bne.n	8001fa0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2105      	movs	r1, #5
 8001f92:	2032      	movs	r0, #50	; 0x32
 8001f94:	f000 fc0a 	bl	80027ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f98:	2032      	movs	r0, #50	; 0x32
 8001f9a:	f000 fc23 	bl	80027e4 <HAL_NVIC_EnableIRQ>
}
 8001f9e:	e01a      	b.n	8001fd6 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_TIM_Base_MspInit+0xec>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d115      	bne.n	8001fd6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_TIM_Base_MspInit+0xe0>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2105      	movs	r1, #5
 8001fca:	201a      	movs	r0, #26
 8001fcc:	f000 fbee 	bl	80027ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fd0:	201a      	movs	r0, #26
 8001fd2:	f000 fc07 	bl	80027e4 <HAL_NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40014800 	.word	0x40014800

08001ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <HAL_TIM_MspPostInit+0xb0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d11e      	bne.n	8002050 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_TIM_MspPostInit+0xb4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <HAL_TIM_MspPostInit+0xb4>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_TIM_MspPostInit+0xb4>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800202e:	2340      	movs	r3, #64	; 0x40
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800203e:	2302      	movs	r3, #2
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4817      	ldr	r0, [pc, #92]	; (80020a8 <HAL_TIM_MspPostInit+0xb8>)
 800204a:	f000 fc6b 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800204e:	e022      	b.n	8002096 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <HAL_TIM_MspPostInit+0xbc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11d      	bne.n	8002096 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_TIM_MspPostInit+0xb4>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <HAL_TIM_MspPostInit+0xb4>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6313      	str	r3, [r2, #48]	; 0x30
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_TIM_MspPostInit+0xb4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8002076:	2302      	movs	r3, #2
 8002078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002086:	2302      	movs	r3, #2
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_TIM_MspPostInit+0xb8>)
 8002092:	f000 fc47 	bl	8002924 <HAL_GPIO_Init>
}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40000c00 	.word	0x40000c00

080020b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <HAL_UART_MspInit+0x94>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d133      	bne.n	800213a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_UART_MspInit+0x98>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_UART_MspInit+0x98>)
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_UART_MspInit+0x98>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_UART_MspInit+0x98>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_UART_MspInit+0x98>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_UART_MspInit+0x98>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800210a:	230c      	movs	r3, #12
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800211a:	2307      	movs	r3, #7
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4809      	ldr	r0, [pc, #36]	; (800214c <HAL_UART_MspInit+0x9c>)
 8002126:	f000 fbfd 	bl	8002924 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2105      	movs	r1, #5
 800212e:	2026      	movs	r0, #38	; 0x26
 8002130:	f000 fb3c 	bl	80027ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002134:	2026      	movs	r0, #38	; 0x26
 8002136:	f000 fb55 	bl	80027e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3728      	adds	r7, #40	; 0x28
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40004400 	.word	0x40004400
 8002148:	40023800 	.word	0x40023800
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08c      	sub	sp, #48	; 0x30
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002160:	2200      	movs	r2, #0
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	2019      	movs	r0, #25
 8002166:	f000 fb21 	bl	80027ac <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800216a:	2019      	movs	r0, #25
 800216c:	f000 fb3a 	bl	80027e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <HAL_InitTick+0xa0>)
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_InitTick+0xa0>)
 800217a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217e:	6453      	str	r3, [r2, #68]	; 0x44
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_InitTick+0xa0>)
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800218c:	f107 0210 	add.w	r2, r7, #16
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f001 fb4c 	bl	8003834 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800219c:	f001 fb36 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 80021a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <HAL_InitTick+0xa4>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0c9b      	lsrs	r3, r3, #18
 80021ac:	3b01      	subs	r3, #1
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_InitTick+0xa8>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_InitTick+0xac>)
 80021b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_InitTick+0xa8>)
 80021b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021bc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_InitTick+0xa8>)
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_InitTick+0xa8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_InitTick+0xa8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <HAL_InitTick+0xa8>)
 80021d2:	f001 fb61 	bl	8003898 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d104      	bne.n	80021e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80021dc:	4806      	ldr	r0, [pc, #24]	; (80021f8 <HAL_InitTick+0xa8>)
 80021de:	f001 fbab 	bl	8003938 <HAL_TIM_Base_Start_IT>
 80021e2:	4603      	mov	r3, r0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	431bde83 	.word	0x431bde83
 80021f8:	20004eb8 	.word	0x20004eb8
 80021fc:	40014400 	.word	0x40014400

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler+0x4>

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002232:	f001 fc3c 	bl	8003aae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20004eb8 	.word	0x20004eb8

08002240 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002246:	f001 fc32 	bl	8003aae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20004dd8 	.word	0x20004dd8

08002254 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <TIM3_IRQHandler+0x10>)
 800225a:	f001 fc28 	bl	8003aae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20004d90 	.word	0x20004d90

08002268 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <USART2_IRQHandler+0x10>)
 800226e:	f002 fb11 	bl	8004894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20004e74 	.word	0x20004e74

0800227c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <TIM5_IRQHandler+0x10>)
 8002282:	f001 fc14 	bl	8003aae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20004d48 	.word	0x20004d48

08002290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
	return 1;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_kill>:

int _kill(int pid, int sig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022aa:	f005 ff67 	bl	800817c <__errno>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2216      	movs	r2, #22
 80022b2:	601a      	str	r2, [r3, #0]
	return -1;
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_exit>:

void _exit (int status)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ffe7 	bl	80022a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022d2:	e7fe      	b.n	80022d2 <_exit+0x12>

080022d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022e6:	f3af 8000 	nop.w
 80022ea:	4601      	mov	r1, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf0      	blt.n	80022e6 <_read+0x12>
	}

return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e009      	b.n	8002334 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f94f 	bl	80015cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf1      	blt.n	8002320 <_write+0x12>
	}
	return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_close>:

int _close(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236e:	605a      	str	r2, [r3, #4]
	return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_isatty>:

int _isatty(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
	return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
	return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <_sbrk+0x5c>)
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <_sbrk+0x60>)
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_sbrk+0x64>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <_sbrk+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e0:	f005 fecc 	bl	800817c <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e009      	b.n	8002404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <_sbrk+0x64>)
 8002400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20020000 	.word	0x20020000
 8002410:	00000400 	.word	0x00000400
 8002414:	20000254 	.word	0x20000254
 8002418:	20005278 	.word	0x20005278

0800241c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <SystemInit+0x20>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <SystemInit+0x20>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <delay_us>:
// delay_us(10);
// 1Mz의 주파수가 TIM2에 공급
// T=1/f 1/1000000Hz ==> 0.000001sec(1us) 1개의 펄스 소요 시간
// 1us * 1000 ==> 1ms
void delay_us(int us)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	//1. TIM2의 counter reset
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <delay_us+0x2c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
	//2. 사용자가 지정한 시간만큼 wait
	while(__HAL_TIM_GET_COUNTER(&htim2) < us)
 8002450:	bf00      	nop
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <delay_us+0x2c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d3f9      	bcc.n	8002452 <delay_us+0x12>
	{
		// no operation
	};
}
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	20004e2c 	.word	0x20004e2c

08002470 <HAL_UART_RxCpltCallback>:
  * 예) comportmaster로 부터 1char를 수신하면 HAL_UART_RxCpltCallback으로 진입
  *    9600bps인 경우 RxCpltCallback를 수행 후 1ms이내에는 빠져 나가야 한다.
  *    115200bps                      86us
   */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
   volatile static int i = 0;   // buffer의 index


   if (huart == &huart2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_UART_RxCpltCallback+0x94>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d13d      	bne.n	80024fc <HAL_UART_RxCpltCallback+0x8c>
   {
      if(rx_data == '\n')
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_UART_RxCpltCallback+0x98>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b0a      	cmp	r3, #10
 8002486:	d122      	bne.n	80024ce <HAL_UART_RxCpltCallback+0x5e>
      {
         rx_buff[rear++][i] = 0; // 문장의 끝은 항상 0
 8002488:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_UART_RxCpltCallback+0x9c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	1c53      	adds	r3, r2, #1
 800248e:	491f      	ldr	r1, [pc, #124]	; (800250c <HAL_UART_RxCpltCallback+0x9c>)
 8002490:	600b      	str	r3, [r1, #0]
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_UART_RxCpltCallback+0xa0>)
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	481f      	ldr	r0, [pc, #124]	; (8002514 <HAL_UART_RxCpltCallback+0xa4>)
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4403      	add	r3, r0
 80024a2:	440b      	add	r3, r1
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
         rear %= COMMAND_NUMBER; // 원형큐
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_UART_RxCpltCallback+0x9c>)
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <HAL_UART_RxCpltCallback+0xa8>)
 80024ae:	fb83 2301 	smull	r2, r3, r3, r1
 80024b2:	10da      	asrs	r2, r3, #3
 80024b4:	17cb      	asrs	r3, r1, #31
 80024b6:	1ad2      	subs	r2, r2, r3
 80024b8:	4613      	mov	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	1aca      	subs	r2, r1, r3
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_UART_RxCpltCallback+0x9c>)
 80024c4:	601a      	str	r2, [r3, #0]
         i = 0; // 새로오는건 버퍼에 새로우 채워야함 (다른 메시지니치!)
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_UART_RxCpltCallback+0xa0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e011      	b.n	80024f2 <HAL_UART_RxCpltCallback+0x82>
         // 큐 full 여부 확인
      }
      else
      {
         // 그래야 버퍼에 넣기 (push)
         rx_buff[rear][i++] = rx_data;
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_UART_RxCpltCallback+0x9c>)
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_UART_RxCpltCallback+0xa0>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	1c53      	adds	r3, r2, #1
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <HAL_UART_RxCpltCallback+0xa0>)
 80024da:	6003      	str	r3, [r0, #0]
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_UART_RxCpltCallback+0x98>)
 80024de:	781c      	ldrb	r4, [r3, #0]
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <HAL_UART_RxCpltCallback+0xa4>)
 80024e2:	460b      	mov	r3, r1
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4403      	add	r3, r0
 80024ec:	4413      	add	r3, r2
 80024ee:	4622      	mov	r2, r4
 80024f0:	701a      	strb	r2, [r3, #0]
         // command length 확인
      }
      HAL_UART_Receive_IT(&huart2, &rx_data, 1);   // 주의 : 반드시 집어 넣어야 다음 INT가 발생
 80024f2:	2201      	movs	r2, #1
 80024f4:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_UART_RxCpltCallback+0x98>)
 80024f6:	4803      	ldr	r0, [pc, #12]	; (8002504 <HAL_UART_RxCpltCallback+0x94>)
 80024f8:	f002 f99b 	bl	8004832 <HAL_UART_Receive_IT>
   }
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}
 8002504:	20004e74 	.word	0x20004e74
 8002508:	20004e24 	.word	0x20004e24
 800250c:	20000258 	.word	0x20000258
 8002510:	2000025c 	.word	0x2000025c
 8002514:	20004f00 	.word	0x20004f00
 8002518:	66666667 	.word	0x66666667

0800251c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800251c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002554 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002538:	4c0b      	ldr	r4, [pc, #44]	; (8002568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002546:	f7ff ff69 	bl	800241c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254a:	f005 ff13 	bl	8008374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254e:	f7ff f84f 	bl	80015f0 <main>
  bx  lr    
 8002552:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8002560:	0800b27c 	.word	0x0800b27c
  ldr r2, =_sbss
 8002564:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8002568:	20005278 	.word	0x20005278

0800256c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC_IRQHandler>
	...

08002570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <HAL_Init+0x40>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_Init+0x40>)
 800257a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_Init+0x40>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_Init+0x40>)
 8002586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_Init+0x40>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_Init+0x40>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002598:	2003      	movs	r0, #3
 800259a:	f000 f8fc 	bl	8002796 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259e:	200f      	movs	r0, #15
 80025a0:	f7ff fdd6 	bl	8002150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a4:	f7ff fbe2 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000058 	.word	0x20000058
 80025d8:	20005224 	.word	0x20005224

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20005224 	.word	0x20005224

080025f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff ffee 	bl	80025dc <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d005      	beq.n	800261a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_Delay+0x44>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261a:	bf00      	nop
 800261c:	f7ff ffde 	bl	80025dc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f7      	bhi.n	800261c <HAL_Delay+0x28>
  {
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000058 	.word	0x20000058

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	; (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ff4c 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027be:	f7ff ff61 	bl	8002684 <__NVIC_GetPriorityGrouping>
 80027c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	6978      	ldr	r0, [r7, #20]
 80027ca:	f7ff ffb1 	bl	8002730 <NVIC_EncodePriority>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff80 	bl	80026dc <__NVIC_SetPriority>
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff ff54 	bl	80026a0 <__NVIC_EnableIRQ>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800280e:	f7ff fee5 	bl	80025dc <HAL_GetTick>
 8002812:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d008      	beq.n	8002832 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e052      	b.n	80028d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0216 	bic.w	r2, r2, #22
 8002840:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002850:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <HAL_DMA_Abort+0x62>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0208 	bic.w	r2, r2, #8
 8002870:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002882:	e013      	b.n	80028ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002884:	f7ff feaa 	bl	80025dc <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b05      	cmp	r3, #5
 8002890:	d90c      	bls.n	80028ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e015      	b.n	80028d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e4      	bne.n	8002884 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	223f      	movs	r2, #63	; 0x3f
 80028c0:	409a      	lsls	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d004      	beq.n	80028fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00c      	b.n	8002918 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2205      	movs	r2, #5
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	; 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e159      	b.n	8002bf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002940:	2201      	movs	r2, #1
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	429a      	cmp	r2, r3
 800295a:	f040 8148 	bne.w	8002bee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d005      	beq.n	8002976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002972:	2b02      	cmp	r3, #2
 8002974:	d130      	bne.n	80029d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	2203      	movs	r2, #3
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 0201 	and.w	r2, r3, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d017      	beq.n	8002a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	2203      	movs	r2, #3
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d123      	bne.n	8002a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	08da      	lsrs	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3208      	adds	r2, #8
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	220f      	movs	r2, #15
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	08da      	lsrs	r2, r3, #3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3208      	adds	r2, #8
 8002a62:	69b9      	ldr	r1, [r7, #24]
 8002a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a2 	beq.w	8002bee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	4b57      	ldr	r3, [pc, #348]	; (8002c0c <HAL_GPIO_Init+0x2e8>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a56      	ldr	r2, [pc, #344]	; (8002c0c <HAL_GPIO_Init+0x2e8>)
 8002ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <HAL_GPIO_Init+0x2e8>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ac6:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_GPIO_Init+0x2ec>)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	3302      	adds	r3, #2
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	220f      	movs	r2, #15
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a49      	ldr	r2, [pc, #292]	; (8002c14 <HAL_GPIO_Init+0x2f0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d019      	beq.n	8002b26 <HAL_GPIO_Init+0x202>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a48      	ldr	r2, [pc, #288]	; (8002c18 <HAL_GPIO_Init+0x2f4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0x1fe>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a47      	ldr	r2, [pc, #284]	; (8002c1c <HAL_GPIO_Init+0x2f8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00d      	beq.n	8002b1e <HAL_GPIO_Init+0x1fa>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a46      	ldr	r2, [pc, #280]	; (8002c20 <HAL_GPIO_Init+0x2fc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x1f6>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a45      	ldr	r2, [pc, #276]	; (8002c24 <HAL_GPIO_Init+0x300>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_GPIO_Init+0x1f2>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x204>
 8002b16:	2307      	movs	r3, #7
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x204>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x204>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x204>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x204>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <HAL_GPIO_Init+0x2ec>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b46:	4b38      	ldr	r3, [pc, #224]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6a:	4a2f      	ldr	r2, [pc, #188]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b70:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b94:	4a24      	ldr	r2, [pc, #144]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9a:	4b23      	ldr	r3, [pc, #140]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be8:	4a0f      	ldr	r2, [pc, #60]	; (8002c28 <HAL_GPIO_Init+0x304>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f aea2 	bls.w	8002940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40013c00 	.word	0x40013c00

08002c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e001      	b.n	8002c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c6c:	787b      	ldrb	r3, [r7, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c78:	e003      	b.n	8002c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c7a:	887b      	ldrh	r3, [r7, #2]
 8002c7c:	041a      	lsls	r2, r3, #16
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	619a      	str	r2, [r3, #24]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca0:	887a      	ldrh	r2, [r7, #2]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	041a      	lsls	r2, r3, #16
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	400b      	ands	r3, r1
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	619a      	str	r2, [r3, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e12b      	b.n	8002f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff f86a 	bl	8001dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d28:	f000 fd5c 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4a81      	ldr	r2, [pc, #516]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d807      	bhi.n	8002d48 <HAL_I2C_Init+0x84>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a80      	ldr	r2, [pc, #512]	; (8002f3c <HAL_I2C_Init+0x278>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	bf94      	ite	ls
 8002d40:	2301      	movls	r3, #1
 8002d42:	2300      	movhi	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	e006      	b.n	8002d56 <HAL_I2C_Init+0x92>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a7d      	ldr	r2, [pc, #500]	; (8002f40 <HAL_I2C_Init+0x27c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	bf94      	ite	ls
 8002d50:	2301      	movls	r3, #1
 8002d52:	2300      	movhi	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0e7      	b.n	8002f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a78      	ldr	r2, [pc, #480]	; (8002f44 <HAL_I2C_Init+0x280>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0c9b      	lsrs	r3, r3, #18
 8002d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a6a      	ldr	r2, [pc, #424]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d802      	bhi.n	8002d98 <HAL_I2C_Init+0xd4>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	e009      	b.n	8002dac <HAL_I2C_Init+0xe8>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <HAL_I2C_Init+0x284>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	3301      	adds	r3, #1
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	495c      	ldr	r1, [pc, #368]	; (8002f38 <HAL_I2C_Init+0x274>)
 8002dc8:	428b      	cmp	r3, r1
 8002dca:	d819      	bhi.n	8002e00 <HAL_I2C_Init+0x13c>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e59      	subs	r1, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dda:	1c59      	adds	r1, r3, #1
 8002ddc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de0:	400b      	ands	r3, r1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_I2C_Init+0x138>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1e59      	subs	r1, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfa:	e051      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	e04f      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_I2C_Init+0x168>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e012      	b.n	8002e52 <HAL_I2C_Init+0x18e>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e58      	subs	r0, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	0099      	lsls	r1, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_I2C_Init+0x196>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e022      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <HAL_I2C_Init+0x1bc>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e58      	subs	r0, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	440b      	add	r3, r1
 8002e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7e:	e00f      	b.n	8002ea0 <HAL_I2C_Init+0x1dc>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e58      	subs	r0, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	0099      	lsls	r1, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6809      	ldr	r1, [r1, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ece:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6911      	ldr	r1, [r2, #16]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	000186a0 	.word	0x000186a0
 8002f3c:	001e847f 	.word	0x001e847f
 8002f40:	003d08ff 	.word	0x003d08ff
 8002f44:	431bde83 	.word	0x431bde83
 8002f48:	10624dd3 	.word	0x10624dd3

08002f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e264      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d075      	beq.n	8003056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6a:	4ba3      	ldr	r3, [pc, #652]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d00c      	beq.n	8002f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f76:	4ba0      	ldr	r3, [pc, #640]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d112      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f82:	4b9d      	ldr	r3, [pc, #628]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	4b99      	ldr	r3, [pc, #612]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d05b      	beq.n	8003054 <HAL_RCC_OscConfig+0x108>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d157      	bne.n	8003054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e23f      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d106      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x74>
 8002fb2:	4b91      	ldr	r3, [pc, #580]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a90      	ldr	r2, [pc, #576]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e01d      	b.n	8002ffc <HAL_RCC_OscConfig+0xb0>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x98>
 8002fca:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a8a      	ldr	r2, [pc, #552]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4b88      	ldr	r3, [pc, #544]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a87      	ldr	r2, [pc, #540]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_OscConfig+0xb0>
 8002fe4:	4b84      	ldr	r3, [pc, #528]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a83      	ldr	r2, [pc, #524]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a80      	ldr	r2, [pc, #512]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8002ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff faea 	bl	80025dc <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300c:	f7ff fae6 	bl	80025dc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	; 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e204      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b76      	ldr	r3, [pc, #472]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0xc0>
 800302a:	e014      	b.n	8003056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7ff fad6 	bl	80025dc <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003034:	f7ff fad2 	bl	80025dc <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b64      	cmp	r3, #100	; 0x64
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e1f0      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003046:	4b6c      	ldr	r3, [pc, #432]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0xe8>
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d063      	beq.n	800312a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003062:	4b65      	ldr	r3, [pc, #404]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306e:	4b62      	ldr	r3, [pc, #392]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003076:	2b08      	cmp	r3, #8
 8003078:	d11c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307a:	4b5f      	ldr	r3, [pc, #380]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d116      	bne.n	80030b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	4b5c      	ldr	r3, [pc, #368]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_RCC_OscConfig+0x152>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e1c4      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309e:	4b56      	ldr	r3, [pc, #344]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4952      	ldr	r1, [pc, #328]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b2:	e03a      	b.n	800312a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030bc:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <HAL_RCC_OscConfig+0x2b0>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c2:	f7ff fa8b 	bl	80025dc <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7ff fa87 	bl	80025dc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1a5      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030dc:	4b46      	ldr	r3, [pc, #280]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e8:	4b43      	ldr	r3, [pc, #268]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4940      	ldr	r1, [pc, #256]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]
 80030fc:	e015      	b.n	800312a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030fe:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_OscConfig+0x2b0>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7ff fa6a 	bl	80025dc <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310c:	f7ff fa66 	bl	80025dc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e184      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311e:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d030      	beq.n	8003198 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800313e:	4b30      	ldr	r3, [pc, #192]	; (8003200 <HAL_RCC_OscConfig+0x2b4>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7ff fa4a 	bl	80025dc <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314c:	f7ff fa46 	bl	80025dc <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e164      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x200>
 800316a:	e015      	b.n	8003198 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCC_OscConfig+0x2b4>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003172:	f7ff fa33 	bl	80025dc <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317a:	f7ff fa2f 	bl	80025dc <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e14d      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 800318e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80a0 	beq.w	80032e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10f      	bne.n	80031d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_RCC_OscConfig+0x2b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d121      	bne.n	8003226 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <HAL_RCC_OscConfig+0x2b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a07      	ldr	r2, [pc, #28]	; (8003204 <HAL_RCC_OscConfig+0x2b8>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ee:	f7ff f9f5 	bl	80025dc <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	e011      	b.n	800321a <HAL_RCC_OscConfig+0x2ce>
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	42470000 	.word	0x42470000
 8003200:	42470e80 	.word	0x42470e80
 8003204:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003208:	f7ff f9e8 	bl	80025dc <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e106      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b85      	ldr	r3, [pc, #532]	; (8003430 <HAL_RCC_OscConfig+0x4e4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d106      	bne.n	800323c <HAL_RCC_OscConfig+0x2f0>
 800322e:	4b81      	ldr	r3, [pc, #516]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a80      	ldr	r2, [pc, #512]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	e01c      	b.n	8003276 <HAL_RCC_OscConfig+0x32a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b05      	cmp	r3, #5
 8003242:	d10c      	bne.n	800325e <HAL_RCC_OscConfig+0x312>
 8003244:	4b7b      	ldr	r3, [pc, #492]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a7a      	ldr	r2, [pc, #488]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 800324a:	f043 0304 	orr.w	r3, r3, #4
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	4b78      	ldr	r3, [pc, #480]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a77      	ldr	r2, [pc, #476]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	e00b      	b.n	8003276 <HAL_RCC_OscConfig+0x32a>
 800325e:	4b75      	ldr	r3, [pc, #468]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a74      	ldr	r2, [pc, #464]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	4b72      	ldr	r3, [pc, #456]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a71      	ldr	r2, [pc, #452]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d015      	beq.n	80032aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7ff f9ad 	bl	80025dc <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003286:	f7ff f9a9 	bl	80025dc <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0c5      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329c:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ee      	beq.n	8003286 <HAL_RCC_OscConfig+0x33a>
 80032a8:	e014      	b.n	80032d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032aa:	f7ff f997 	bl	80025dc <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7ff f993 	bl	80025dc <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0af      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c8:	4b5a      	ldr	r3, [pc, #360]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ee      	bne.n	80032b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d105      	bne.n	80032e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	4a55      	ldr	r2, [pc, #340]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 80032e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 809b 	beq.w	8003426 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032f0:	4b50      	ldr	r3, [pc, #320]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d05c      	beq.n	80033b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d141      	bne.n	8003388 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003304:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <HAL_RCC_OscConfig+0x4ec>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7ff f967 	bl	80025dc <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003312:	f7ff f963 	bl	80025dc <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e081      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003324:	4b43      	ldr	r3, [pc, #268]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f0      	bne.n	8003312 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	019b      	lsls	r3, r3, #6
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	085b      	lsrs	r3, r3, #1
 8003348:	3b01      	subs	r3, #1
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	4937      	ldr	r1, [pc, #220]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335a:	4b37      	ldr	r3, [pc, #220]	; (8003438 <HAL_RCC_OscConfig+0x4ec>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7ff f93c 	bl	80025dc <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003368:	f7ff f938 	bl	80025dc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e056      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337a:	4b2e      	ldr	r3, [pc, #184]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x41c>
 8003386:	e04e      	b.n	8003426 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCC_OscConfig+0x4ec>)
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338e:	f7ff f925 	bl	80025dc <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003396:	f7ff f921 	bl	80025dc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e03f      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f0      	bne.n	8003396 <HAL_RCC_OscConfig+0x44a>
 80033b4:	e037      	b.n	8003426 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e032      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_RCC_OscConfig+0x4e8>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d028      	beq.n	8003422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d121      	bne.n	8003422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d11a      	bne.n	8003422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033f2:	4013      	ands	r3, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d111      	bne.n	8003422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	3b01      	subs	r3, #1
 800340c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d107      	bne.n	8003422 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40007000 	.word	0x40007000
 8003434:	40023800 	.word	0x40023800
 8003438:	42470060 	.word	0x42470060

0800343c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0cc      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003450:	4b68      	ldr	r3, [pc, #416]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d90c      	bls.n	8003478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0b8      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003490:	4b59      	ldr	r3, [pc, #356]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800349a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034a8:	4b53      	ldr	r3, [pc, #332]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a52      	ldr	r2, [pc, #328]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b4:	4b50      	ldr	r3, [pc, #320]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	494d      	ldr	r1, [pc, #308]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d044      	beq.n	800355c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d119      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e07f      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e06f      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e067      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351a:	4b37      	ldr	r3, [pc, #220]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 0203 	bic.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4934      	ldr	r1, [pc, #208]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	4313      	orrs	r3, r2
 800352a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800352c:	f7ff f856 	bl	80025dc <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	e00a      	b.n	800354a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003534:	f7ff f852 	bl	80025dc <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e04f      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 020c 	and.w	r2, r3, #12
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	429a      	cmp	r2, r3
 800355a:	d1eb      	bne.n	8003534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d20c      	bcs.n	8003584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e032      	b.n	80035ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4916      	ldr	r1, [pc, #88]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	490e      	ldr	r1, [pc, #56]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c2:	f000 f821 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80035c6:	4602      	mov	r2, r0
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	490a      	ldr	r1, [pc, #40]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	5ccb      	ldrb	r3, [r1, r3]
 80035d6:	fa22 f303 	lsr.w	r3, r2, r3
 80035da:	4a09      	ldr	r2, [pc, #36]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80035dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fdb4 	bl	8002150 <HAL_InitTick>

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023c00 	.word	0x40023c00
 80035f8:	40023800 	.word	0x40023800
 80035fc:	0800ae70 	.word	0x0800ae70
 8003600:	20000050 	.word	0x20000050
 8003604:	20000054 	.word	0x20000054

08003608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003608:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	2300      	movs	r3, #0
 800361a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003620:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d00d      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x40>
 800362c:	2b08      	cmp	r3, #8
 800362e:	f200 80bd 	bhi.w	80037ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x34>
 8003636:	2b04      	cmp	r3, #4
 8003638:	d003      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0x3a>
 800363a:	e0b7      	b.n	80037ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800363c:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800363e:	60bb      	str	r3, [r7, #8]
       break;
 8003640:	e0b7      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003642:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003644:	60bb      	str	r3, [r7, #8]
      break;
 8003646:	e0b4      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003648:	4b5d      	ldr	r3, [pc, #372]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003650:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04d      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365e:	4b58      	ldr	r3, [pc, #352]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	461a      	mov	r2, r3
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	ea02 0800 	and.w	r8, r2, r0
 8003676:	ea03 0901 	and.w	r9, r3, r1
 800367a:	4640      	mov	r0, r8
 800367c:	4649      	mov	r1, r9
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	014b      	lsls	r3, r1, #5
 8003688:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800368c:	0142      	lsls	r2, r0, #5
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	ebb0 0008 	subs.w	r0, r0, r8
 8003696:	eb61 0109 	sbc.w	r1, r1, r9
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	018b      	lsls	r3, r1, #6
 80036a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036a8:	0182      	lsls	r2, r0, #6
 80036aa:	1a12      	subs	r2, r2, r0
 80036ac:	eb63 0301 	sbc.w	r3, r3, r1
 80036b0:	f04f 0000 	mov.w	r0, #0
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	00d9      	lsls	r1, r3, #3
 80036ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036be:	00d0      	lsls	r0, r2, #3
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	eb12 0208 	adds.w	r2, r2, r8
 80036c8:	eb43 0309 	adc.w	r3, r3, r9
 80036cc:	f04f 0000 	mov.w	r0, #0
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	0259      	lsls	r1, r3, #9
 80036d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036da:	0250      	lsls	r0, r2, #9
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	f7fd fa64 	bl	8000bb8 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4613      	mov	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e04a      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fa:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	461a      	mov	r2, r3
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	f240 10ff 	movw	r0, #511	; 0x1ff
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	ea02 0400 	and.w	r4, r2, r0
 8003712:	ea03 0501 	and.w	r5, r3, r1
 8003716:	4620      	mov	r0, r4
 8003718:	4629      	mov	r1, r5
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	014b      	lsls	r3, r1, #5
 8003724:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003728:	0142      	lsls	r2, r0, #5
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	1b00      	subs	r0, r0, r4
 8003730:	eb61 0105 	sbc.w	r1, r1, r5
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	018b      	lsls	r3, r1, #6
 800373e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003742:	0182      	lsls	r2, r0, #6
 8003744:	1a12      	subs	r2, r2, r0
 8003746:	eb63 0301 	sbc.w	r3, r3, r1
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	00d9      	lsls	r1, r3, #3
 8003754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003758:	00d0      	lsls	r0, r2, #3
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	1912      	adds	r2, r2, r4
 8003760:	eb45 0303 	adc.w	r3, r5, r3
 8003764:	f04f 0000 	mov.w	r0, #0
 8003768:	f04f 0100 	mov.w	r1, #0
 800376c:	0299      	lsls	r1, r3, #10
 800376e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003772:	0290      	lsls	r0, r2, #10
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4610      	mov	r0, r2
 800377a:	4619      	mov	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	f7fd fa18 	bl	8000bb8 <__aeabi_uldivmod>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4613      	mov	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	3301      	adds	r3, #1
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	60bb      	str	r3, [r7, #8]
      break;
 80037aa:	e002      	b.n	80037b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ae:	60bb      	str	r3, [r7, #8]
      break;
 80037b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b2:	68bb      	ldr	r3, [r7, #8]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	007a1200 	.word	0x007a1200

080037cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000050 	.word	0x20000050

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e8:	f7ff fff0 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	0800ae80 	.word	0x0800ae80

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003810:	f7ff ffdc 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0b5b      	lsrs	r3, r3, #13
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	0800ae80 	.word	0x0800ae80

08003834 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	220f      	movs	r2, #15
 8003842:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_RCC_GetClockConfig+0x5c>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0203 	and.w	r2, r3, #3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_GetClockConfig+0x5c>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_GetClockConfig+0x5c>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_GetClockConfig+0x5c>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	08db      	lsrs	r3, r3, #3
 800386e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <HAL_RCC_GetClockConfig+0x60>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0207 	and.w	r2, r3, #7
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	601a      	str	r2, [r3, #0]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	40023c00 	.word	0x40023c00

08003898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e041      	b.n	800392e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe fb1e 	bl	8001f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 fba4 	bl	8004024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b01      	cmp	r3, #1
 800394a:	d001      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e044      	b.n	80039da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1e      	ldr	r2, [pc, #120]	; (80039e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d018      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397a:	d013      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <HAL_TIM_Base_Start_IT+0xb4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00e      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d009      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_TIM_Base_Start_IT+0x6c>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d010      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c6:	e007      	b.n	80039d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40014000 	.word	0x40014000

080039fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e041      	b.n	8003a92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f839 	bl	8003a9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 faf2 	bl	8004024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d122      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d11b      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0202 	mvn.w	r2, #2
 8003ada:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa78 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003af6:	e005      	b.n	8003b04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fa6a 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa7b 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d122      	bne.n	8003b5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d11b      	bne.n	8003b5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0204 	mvn.w	r2, #4
 8003b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa4e 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003b4a:	e005      	b.n	8003b58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fa40 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa51 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d122      	bne.n	8003bb2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d11b      	bne.n	8003bb2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f06f 0208 	mvn.w	r2, #8
 8003b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2204      	movs	r2, #4
 8003b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fa24 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003b9e:	e005      	b.n	8003bac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fa16 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa27 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d122      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d11b      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f06f 0210 	mvn.w	r2, #16
 8003bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f9fa 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003bf2:	e005      	b.n	8003c00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f9ec 	bl	8003fd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f9fd 	bl	8003ffa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10e      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0201 	mvn.w	r2, #1
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fe f85f 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3c:	2b80      	cmp	r3, #128	; 0x80
 8003c3e:	d10e      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b80      	cmp	r3, #128	; 0x80
 8003c4c:	d107      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fd01 	bl	8004660 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b40      	cmp	r3, #64	; 0x40
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f9c2 	bl	800400e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d10e      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0220 	mvn.w	r2, #32
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fccb 	bl	800464c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e0ae      	b.n	8003e3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b0c      	cmp	r3, #12
 8003cea:	f200 809f 	bhi.w	8003e2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003e2d 	.word	0x08003e2d
 8003cfc:	08003e2d 	.word	0x08003e2d
 8003d00:	08003e2d 	.word	0x08003e2d
 8003d04:	08003d69 	.word	0x08003d69
 8003d08:	08003e2d 	.word	0x08003e2d
 8003d0c:	08003e2d 	.word	0x08003e2d
 8003d10:	08003e2d 	.word	0x08003e2d
 8003d14:	08003dab 	.word	0x08003dab
 8003d18:	08003e2d 	.word	0x08003e2d
 8003d1c:	08003e2d 	.word	0x08003e2d
 8003d20:	08003e2d 	.word	0x08003e2d
 8003d24:	08003deb 	.word	0x08003deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 f9f8 	bl	8004124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0208 	orr.w	r2, r2, #8
 8003d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6999      	ldr	r1, [r3, #24]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	619a      	str	r2, [r3, #24]
      break;
 8003d66:	e064      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fa3e 	bl	80041f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6999      	ldr	r1, [r3, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	619a      	str	r2, [r3, #24]
      break;
 8003da8:	e043      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fa89 	bl	80042c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0208 	orr.w	r2, r2, #8
 8003dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0204 	bic.w	r2, r2, #4
 8003dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	61da      	str	r2, [r3, #28]
      break;
 8003de8:	e023      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fad3 	bl	800439c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69d9      	ldr	r1, [r3, #28]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	021a      	lsls	r2, r3, #8
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	61da      	str	r2, [r3, #28]
      break;
 8003e2a:	e002      	b.n	8003e32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_ConfigClockSource+0x1c>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0b4      	b.n	8003fca <HAL_TIM_ConfigClockSource+0x186>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e98:	d03e      	beq.n	8003f18 <HAL_TIM_ConfigClockSource+0xd4>
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9e:	f200 8087 	bhi.w	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	f000 8086 	beq.w	8003fb6 <HAL_TIM_ConfigClockSource+0x172>
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d87f      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b70      	cmp	r3, #112	; 0x70
 8003eb2:	d01a      	beq.n	8003eea <HAL_TIM_ConfigClockSource+0xa6>
 8003eb4:	2b70      	cmp	r3, #112	; 0x70
 8003eb6:	d87b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b60      	cmp	r3, #96	; 0x60
 8003eba:	d050      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x11a>
 8003ebc:	2b60      	cmp	r3, #96	; 0x60
 8003ebe:	d877      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b50      	cmp	r3, #80	; 0x50
 8003ec2:	d03c      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xfa>
 8003ec4:	2b50      	cmp	r3, #80	; 0x50
 8003ec6:	d873      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d058      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x13a>
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d86f      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b30      	cmp	r3, #48	; 0x30
 8003ed2:	d064      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b30      	cmp	r3, #48	; 0x30
 8003ed6:	d86b      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d060      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d867      	bhi.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d05c      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d05a      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ee8:	e062      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6899      	ldr	r1, [r3, #8]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f000 fb19 	bl	8004530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	609a      	str	r2, [r3, #8]
      break;
 8003f16:	e04f      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6899      	ldr	r1, [r3, #8]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f000 fb02 	bl	8004530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689a      	ldr	r2, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f3a:	609a      	str	r2, [r3, #8]
      break;
 8003f3c:	e03c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 fa76 	bl	800443c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2150      	movs	r1, #80	; 0x50
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 facf 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e02c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 fa95 	bl	800449a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2160      	movs	r1, #96	; 0x60
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fabf 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e01c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f000 fa56 	bl	800443c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2140      	movs	r1, #64	; 0x40
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 faaf 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8003f9c:	e00c      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f000 faa6 	bl	80044fa <TIM_ITRx_SetConfig>
      break;
 8003fae:	e003      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb4:	e000      	b.n	8003fb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a34      	ldr	r2, [pc, #208]	; (8004108 <TIM_Base_SetConfig+0xe4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00f      	beq.n	800405c <TIM_Base_SetConfig+0x38>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004042:	d00b      	beq.n	800405c <TIM_Base_SetConfig+0x38>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a31      	ldr	r2, [pc, #196]	; (800410c <TIM_Base_SetConfig+0xe8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d007      	beq.n	800405c <TIM_Base_SetConfig+0x38>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a30      	ldr	r2, [pc, #192]	; (8004110 <TIM_Base_SetConfig+0xec>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0x38>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a2f      	ldr	r2, [pc, #188]	; (8004114 <TIM_Base_SetConfig+0xf0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d108      	bne.n	800406e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a25      	ldr	r2, [pc, #148]	; (8004108 <TIM_Base_SetConfig+0xe4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01b      	beq.n	80040ae <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407c:	d017      	beq.n	80040ae <TIM_Base_SetConfig+0x8a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a22      	ldr	r2, [pc, #136]	; (800410c <TIM_Base_SetConfig+0xe8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a21      	ldr	r2, [pc, #132]	; (8004110 <TIM_Base_SetConfig+0xec>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00f      	beq.n	80040ae <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <TIM_Base_SetConfig+0xf0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00b      	beq.n	80040ae <TIM_Base_SetConfig+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <TIM_Base_SetConfig+0xf4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <TIM_Base_SetConfig+0x8a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a1e      	ldr	r2, [pc, #120]	; (800411c <TIM_Base_SetConfig+0xf8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_Base_SetConfig+0x8a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <TIM_Base_SetConfig+0xfc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d108      	bne.n	80040c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a08      	ldr	r2, [pc, #32]	; (8004108 <TIM_Base_SetConfig+0xe4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	615a      	str	r2, [r3, #20]
}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40010000 	.word	0x40010000
 800410c:	40000400 	.word	0x40000400
 8004110:	40000800 	.word	0x40000800
 8004114:	40000c00 	.word	0x40000c00
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800

08004124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0201 	bic.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 0302 	bic.w	r3, r3, #2
 800416c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <TIM_OC1_SetConfig+0xc8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10c      	bne.n	800419a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0308 	bic.w	r3, r3, #8
 8004186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a13      	ldr	r2, [pc, #76]	; (80041ec <TIM_OC1_SetConfig+0xc8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d111      	bne.n	80041c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	621a      	str	r2, [r3, #32]
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	40010000 	.word	0x40010000

080041f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	f023 0210 	bic.w	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f023 0320 	bic.w	r3, r3, #32
 800423a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a1e      	ldr	r2, [pc, #120]	; (80042c4 <TIM_OC2_SetConfig+0xd4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d10d      	bne.n	800426c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <TIM_OC2_SetConfig+0xd4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d113      	bne.n	800429c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800427a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000

080042c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <TIM_OC3_SetConfig+0xd0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10d      	bne.n	8004342 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800432c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <TIM_OC3_SetConfig+0xd0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d113      	bne.n	8004372 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	621a      	str	r2, [r3, #32]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40010000 	.word	0x40010000

0800439c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	031b      	lsls	r3, r3, #12
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <TIM_OC4_SetConfig+0x9c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d109      	bne.n	8004410 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000

0800443c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0201 	bic.w	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 030a 	bic.w	r3, r3, #10
 8004478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0210 	bic.w	r2, r3, #16
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	f043 0307 	orr.w	r3, r3, #7
 800451c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800454a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	021a      	lsls	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	431a      	orrs	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	609a      	str	r2, [r3, #8]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004584:	2302      	movs	r3, #2
 8004586:	e050      	b.n	800462a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1c      	ldr	r2, [pc, #112]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d018      	beq.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d013      	beq.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a16      	ldr	r2, [pc, #88]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a15      	ldr	r2, [pc, #84]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a13      	ldr	r2, [pc, #76]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d10c      	bne.n	8004618 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	4313      	orrs	r3, r2
 800460e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40010000 	.word	0x40010000
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40014000 	.word	0x40014000

0800464c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e03f      	b.n	8004706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fd fd08 	bl	80020b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fddb 	bl	8005274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b08a      	sub	sp, #40	; 0x28
 8004712:	af02      	add	r7, sp, #8
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b20      	cmp	r3, #32
 800472c:	d17c      	bne.n	8004828 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_UART_Transmit+0x2c>
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e075      	b.n	800482a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_UART_Transmit+0x3e>
 8004748:	2302      	movs	r3, #2
 800474a:	e06e      	b.n	800482a <HAL_UART_Transmit+0x11c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2221      	movs	r2, #33	; 0x21
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004762:	f7fd ff3b 	bl	80025dc <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	88fa      	ldrh	r2, [r7, #6]
 800476c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477c:	d108      	bne.n	8004790 <HAL_UART_Transmit+0x82>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d104      	bne.n	8004790 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	e003      	b.n	8004798 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047a0:	e02a      	b.n	80047f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	2180      	movs	r1, #128	; 0x80
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fb1f 	bl	8004df0 <UART_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e036      	b.n	800482a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	3302      	adds	r3, #2
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	e007      	b.n	80047ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	3301      	adds	r3, #1
 80047e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1cf      	bne.n	80047a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	2140      	movs	r1, #64	; 0x40
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 faef 	bl	8004df0 <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b20      	cmp	r3, #32
 800484a:	d11d      	bne.n	8004888 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_UART_Receive_IT+0x26>
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e016      	b.n	800488a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_UART_Receive_IT+0x38>
 8004866:	2302      	movs	r3, #2
 8004868:	e00f      	b.n	800488a <HAL_UART_Receive_IT+0x58>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	461a      	mov	r2, r3
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fb24 	bl	8004ecc <UART_Start_Receive_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	e000      	b.n	800488a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b0ba      	sub	sp, #232	; 0xe8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10f      	bne.n	80048fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_UART_IRQHandler+0x66>
 80048e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fc03 	bl	80050fe <UART_Receive_IT>
      return;
 80048f8:	e256      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80de 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x22c>
 8004904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004914:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80d1 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_UART_IRQHandler+0xae>
 800492a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0201 	orr.w	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_UART_IRQHandler+0xd2>
 800494e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <HAL_UART_IRQHandler+0xf6>
 8004972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f043 0204 	orr.w	r2, r3, #4
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d011      	beq.n	80049ba <HAL_UART_IRQHandler+0x126>
 8004996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d105      	bne.n	80049ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f043 0208 	orr.w	r2, r3, #8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 81ed 	beq.w	8004d9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_UART_IRQHandler+0x14e>
 80049d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fb8e 	bl	80050fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_UART_IRQHandler+0x17a>
 8004a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d04f      	beq.n	8004aae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa96 	bl	8004f40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d141      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1d9      	bne.n	8004a22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d013      	beq.n	8004a9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	4a7d      	ldr	r2, [pc, #500]	; (8004c70 <HAL_UART_IRQHandler+0x3dc>)
 8004a7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd ff2c 	bl	80028e0 <HAL_DMA_Abort_IT>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a9c:	e00e      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f990 	bl	8004dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa4:	e00a      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f98c 	bl	8004dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	e006      	b.n	8004abc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f988 	bl	8004dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aba:	e170      	b.n	8004d9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	bf00      	nop
    return;
 8004abe:	e16e      	b.n	8004d9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 814a 	bne.w	8004d5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8143 	beq.w	8004d5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 813c 	beq.w	8004d5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	f040 80b4 	bne.w	8004c74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8140 	beq.w	8004da2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	f080 8139 	bcs.w	8004da2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	f000 8088 	beq.w	8004c56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1d9      	bne.n	8004b46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3314      	adds	r3, #20
 8004b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9c:	e853 3f00 	ldrex	r3, [r3]
 8004ba0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e1      	bne.n	8004b92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3314      	adds	r3, #20
 8004bd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e3      	bne.n	8004bce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c26:	f023 0310 	bic.w	r3, r3, #16
 8004c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c38:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e3      	bne.n	8004c14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fd fdd5 	bl	8002800 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8b6 	bl	8004dd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c6c:	e099      	b.n	8004da2 <HAL_UART_IRQHandler+0x50e>
 8004c6e:	bf00      	nop
 8004c70:	08005007 	.word	0x08005007
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 808b 	beq.w	8004da6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8086 	beq.w	8004da6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cbe:	647a      	str	r2, [r7, #68]	; 0x44
 8004cc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3314      	adds	r3, #20
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3314      	adds	r3, #20
 8004cf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e3      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0310 	bic.w	r3, r3, #16
 8004d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d3c:	61fa      	str	r2, [r7, #28]
 8004d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	69b9      	ldr	r1, [r7, #24]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	617b      	str	r3, [r7, #20]
   return(result);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e3      	bne.n	8004d18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f83e 	bl	8004dd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d5c:	e023      	b.n	8004da6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_UART_IRQHandler+0x4ea>
 8004d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f959 	bl	800502e <UART_Transmit_IT>
    return;
 8004d7c:	e014      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00e      	beq.n	8004da8 <HAL_UART_IRQHandler+0x514>
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f999 	bl	80050ce <UART_EndTransmit_IT>
    return;
 8004d9c:	e004      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
    return;
 8004d9e:	bf00      	nop
 8004da0:	e002      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
      return;
 8004da2:	bf00      	nop
 8004da4:	e000      	b.n	8004da8 <HAL_UART_IRQHandler+0x514>
      return;
 8004da6:	bf00      	nop
  }
}
 8004da8:	37e8      	adds	r7, #232	; 0xe8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop

08004db0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b090      	sub	sp, #64	; 0x40
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e00:	e050      	b.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d04c      	beq.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e10:	f7fd fbe4 	bl	80025dc <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d241      	bcs.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	330c      	adds	r3, #12
 8004e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e40:	637a      	str	r2, [r7, #52]	; 0x34
 8004e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e48:	e841 2300 	strex	r3, r2, [r1]
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1e5      	bne.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3314      	adds	r3, #20
 8004e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	613b      	str	r3, [r7, #16]
   return(result);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f023 0301 	bic.w	r3, r3, #1
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e74:	623a      	str	r2, [r7, #32]
 8004e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	69f9      	ldr	r1, [r7, #28]
 8004e7a:	6a3a      	ldr	r2, [r7, #32]
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e5      	bne.n	8004e54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e00f      	b.n	8004ec4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d09f      	beq.n	8004e02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3740      	adds	r7, #64	; 0x40
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2222      	movs	r2, #34	; 0x22
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f10:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0220 	orr.w	r2, r2, #32
 8004f30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b095      	sub	sp, #84	; 0x54
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f68:	643a      	str	r2, [r7, #64]	; 0x40
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e5      	bne.n	8004f48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3314      	adds	r3, #20
 8004f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d119      	bne.n	8004fec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	e853 3f00 	ldrex	r3, [r3]
 8004fc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f023 0310 	bic.w	r3, r3, #16
 8004fce:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd8:	61ba      	str	r2, [r7, #24]
 8004fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fdc:	6979      	ldr	r1, [r7, #20]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	e841 2300 	strex	r3, r2, [r1]
 8004fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1e5      	bne.n	8004fb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ffa:	bf00      	nop
 8004ffc:	3754      	adds	r7, #84	; 0x54
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f7ff fecf 	bl	8004dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800502e:	b480      	push	{r7}
 8005030:	b085      	sub	sp, #20
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b21      	cmp	r3, #33	; 0x21
 8005040:	d13e      	bne.n	80050c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504a:	d114      	bne.n	8005076 <UART_Transmit_IT+0x48>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005068:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	1c9a      	adds	r2, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	621a      	str	r2, [r3, #32]
 8005074:	e008      	b.n	8005088 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	1c59      	adds	r1, r3, #1
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6211      	str	r1, [r2, #32]
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29b      	uxth	r3, r3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4619      	mov	r1, r3
 8005096:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10f      	bne.n	80050bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff fe5e 	bl	8004db0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b08c      	sub	sp, #48	; 0x30
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b22      	cmp	r3, #34	; 0x22
 8005110:	f040 80ab 	bne.w	800526a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511c:	d117      	bne.n	800514e <UART_Receive_IT+0x50>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d113      	bne.n	800514e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b29b      	uxth	r3, r3
 8005138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513c:	b29a      	uxth	r2, r3
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
 800514c:	e026      	b.n	800519c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005160:	d007      	beq.n	8005172 <UART_Receive_IT+0x74>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <UART_Receive_IT+0x82>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	b2da      	uxtb	r2, r3
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	e008      	b.n	8005192 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518c:	b2da      	uxtb	r2, r3
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4619      	mov	r1, r3
 80051aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d15a      	bne.n	8005266 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0220 	bic.w	r2, r2, #32
 80051be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d135      	bne.n	800525c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	613b      	str	r3, [r7, #16]
   return(result);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f023 0310 	bic.w	r3, r3, #16
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	623a      	str	r2, [r7, #32]
 8005218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	69f9      	ldr	r1, [r7, #28]
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	61bb      	str	r3, [r7, #24]
   return(result);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b10      	cmp	r3, #16
 8005236:	d10a      	bne.n	800524e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fdbf 	bl	8004dd8 <HAL_UARTEx_RxEventCallback>
 800525a:	e002      	b.n	8005262 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fd f907 	bl	8002470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	e002      	b.n	800526c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e000      	b.n	800526c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800526a:	2302      	movs	r3, #2
  }
}
 800526c:	4618      	mov	r0, r3
 800526e:	3730      	adds	r7, #48	; 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	b09f      	sub	sp, #124	; 0x7c
 800527a:	af00      	add	r7, sp, #0
 800527c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	68d9      	ldr	r1, [r3, #12]
 800528c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	ea40 0301 	orr.w	r3, r0, r1
 8005294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	431a      	orrs	r2, r3
 80052a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80052ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052b8:	f021 010c 	bic.w	r1, r1, #12
 80052bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052c2:	430b      	orrs	r3, r1
 80052c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	6999      	ldr	r1, [r3, #24]
 80052d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	ea40 0301 	orr.w	r3, r0, r1
 80052dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4bc5      	ldr	r3, [pc, #788]	; (80055f8 <UART_SetConfig+0x384>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d004      	beq.n	80052f2 <UART_SetConfig+0x7e>
 80052e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4bc3      	ldr	r3, [pc, #780]	; (80055fc <UART_SetConfig+0x388>)
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d103      	bne.n	80052fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052f2:	f7fe fa8b 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 80052f6:	6778      	str	r0, [r7, #116]	; 0x74
 80052f8:	e002      	b.n	8005300 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052fa:	f7fe fa73 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 80052fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005308:	f040 80b6 	bne.w	8005478 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800530c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800530e:	461c      	mov	r4, r3
 8005310:	f04f 0500 	mov.w	r5, #0
 8005314:	4622      	mov	r2, r4
 8005316:	462b      	mov	r3, r5
 8005318:	1891      	adds	r1, r2, r2
 800531a:	6439      	str	r1, [r7, #64]	; 0x40
 800531c:	415b      	adcs	r3, r3
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005324:	1912      	adds	r2, r2, r4
 8005326:	eb45 0303 	adc.w	r3, r5, r3
 800532a:	f04f 0000 	mov.w	r0, #0
 800532e:	f04f 0100 	mov.w	r1, #0
 8005332:	00d9      	lsls	r1, r3, #3
 8005334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005338:	00d0      	lsls	r0, r2, #3
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	1911      	adds	r1, r2, r4
 8005340:	6639      	str	r1, [r7, #96]	; 0x60
 8005342:	416b      	adcs	r3, r5
 8005344:	667b      	str	r3, [r7, #100]	; 0x64
 8005346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	461a      	mov	r2, r3
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	1891      	adds	r1, r2, r2
 8005352:	63b9      	str	r1, [r7, #56]	; 0x38
 8005354:	415b      	adcs	r3, r3
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800535c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005360:	f7fb fc2a 	bl	8000bb8 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4ba5      	ldr	r3, [pc, #660]	; (8005600 <UART_SetConfig+0x38c>)
 800536a:	fba3 2302 	umull	r2, r3, r3, r2
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	011e      	lsls	r6, r3, #4
 8005372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005374:	461c      	mov	r4, r3
 8005376:	f04f 0500 	mov.w	r5, #0
 800537a:	4622      	mov	r2, r4
 800537c:	462b      	mov	r3, r5
 800537e:	1891      	adds	r1, r2, r2
 8005380:	6339      	str	r1, [r7, #48]	; 0x30
 8005382:	415b      	adcs	r3, r3
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800538a:	1912      	adds	r2, r2, r4
 800538c:	eb45 0303 	adc.w	r3, r5, r3
 8005390:	f04f 0000 	mov.w	r0, #0
 8005394:	f04f 0100 	mov.w	r1, #0
 8005398:	00d9      	lsls	r1, r3, #3
 800539a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800539e:	00d0      	lsls	r0, r2, #3
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	1911      	adds	r1, r2, r4
 80053a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80053a8:	416b      	adcs	r3, r5
 80053aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	461a      	mov	r2, r3
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	1891      	adds	r1, r2, r2
 80053b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80053ba:	415b      	adcs	r3, r3
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80053c6:	f7fb fbf7 	bl	8000bb8 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4b8c      	ldr	r3, [pc, #560]	; (8005600 <UART_SetConfig+0x38c>)
 80053d0:	fba3 1302 	umull	r1, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	2164      	movs	r1, #100	; 0x64
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3332      	adds	r3, #50	; 0x32
 80053e2:	4a87      	ldr	r2, [pc, #540]	; (8005600 <UART_SetConfig+0x38c>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053f0:	441e      	add	r6, r3
 80053f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f4:	4618      	mov	r0, r3
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	1894      	adds	r4, r2, r2
 8005400:	623c      	str	r4, [r7, #32]
 8005402:	415b      	adcs	r3, r3
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
 8005406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800540a:	1812      	adds	r2, r2, r0
 800540c:	eb41 0303 	adc.w	r3, r1, r3
 8005410:	f04f 0400 	mov.w	r4, #0
 8005414:	f04f 0500 	mov.w	r5, #0
 8005418:	00dd      	lsls	r5, r3, #3
 800541a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800541e:	00d4      	lsls	r4, r2, #3
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	1814      	adds	r4, r2, r0
 8005426:	653c      	str	r4, [r7, #80]	; 0x50
 8005428:	414b      	adcs	r3, r1
 800542a:	657b      	str	r3, [r7, #84]	; 0x54
 800542c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	461a      	mov	r2, r3
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	1891      	adds	r1, r2, r2
 8005438:	61b9      	str	r1, [r7, #24]
 800543a:	415b      	adcs	r3, r3
 800543c:	61fb      	str	r3, [r7, #28]
 800543e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005442:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005446:	f7fb fbb7 	bl	8000bb8 <__aeabi_uldivmod>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <UART_SetConfig+0x38c>)
 8005450:	fba3 1302 	umull	r1, r3, r3, r2
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	2164      	movs	r1, #100	; 0x64
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	3332      	adds	r3, #50	; 0x32
 8005462:	4a67      	ldr	r2, [pc, #412]	; (8005600 <UART_SetConfig+0x38c>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	f003 0207 	and.w	r2, r3, #7
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4432      	add	r2, r6
 8005474:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005476:	e0b9      	b.n	80055ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005478:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547a:	461c      	mov	r4, r3
 800547c:	f04f 0500 	mov.w	r5, #0
 8005480:	4622      	mov	r2, r4
 8005482:	462b      	mov	r3, r5
 8005484:	1891      	adds	r1, r2, r2
 8005486:	6139      	str	r1, [r7, #16]
 8005488:	415b      	adcs	r3, r3
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005490:	1912      	adds	r2, r2, r4
 8005492:	eb45 0303 	adc.w	r3, r5, r3
 8005496:	f04f 0000 	mov.w	r0, #0
 800549a:	f04f 0100 	mov.w	r1, #0
 800549e:	00d9      	lsls	r1, r3, #3
 80054a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054a4:	00d0      	lsls	r0, r2, #3
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	eb12 0804 	adds.w	r8, r2, r4
 80054ae:	eb43 0905 	adc.w	r9, r3, r5
 80054b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f04f 0100 	mov.w	r1, #0
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	008b      	lsls	r3, r1, #2
 80054c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054ca:	0082      	lsls	r2, r0, #2
 80054cc:	4640      	mov	r0, r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	f7fb fb72 	bl	8000bb8 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b49      	ldr	r3, [pc, #292]	; (8005600 <UART_SetConfig+0x38c>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011e      	lsls	r6, r3, #4
 80054e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e4:	4618      	mov	r0, r3
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	1894      	adds	r4, r2, r2
 80054f0:	60bc      	str	r4, [r7, #8]
 80054f2:	415b      	adcs	r3, r3
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054fa:	1812      	adds	r2, r2, r0
 80054fc:	eb41 0303 	adc.w	r3, r1, r3
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	f04f 0500 	mov.w	r5, #0
 8005508:	00dd      	lsls	r5, r3, #3
 800550a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800550e:	00d4      	lsls	r4, r2, #3
 8005510:	4622      	mov	r2, r4
 8005512:	462b      	mov	r3, r5
 8005514:	1814      	adds	r4, r2, r0
 8005516:	64bc      	str	r4, [r7, #72]	; 0x48
 8005518:	414b      	adcs	r3, r1
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4618      	mov	r0, r3
 8005522:	f04f 0100 	mov.w	r1, #0
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	008b      	lsls	r3, r1, #2
 8005530:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005534:	0082      	lsls	r2, r0, #2
 8005536:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800553a:	f7fb fb3d 	bl	8000bb8 <__aeabi_uldivmod>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <UART_SetConfig+0x38c>)
 8005544:	fba3 1302 	umull	r1, r3, r3, r2
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	2164      	movs	r1, #100	; 0x64
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	011b      	lsls	r3, r3, #4
 8005554:	3332      	adds	r3, #50	; 0x32
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <UART_SetConfig+0x38c>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005562:	441e      	add	r6, r3
 8005564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005566:	4618      	mov	r0, r3
 8005568:	f04f 0100 	mov.w	r1, #0
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	1894      	adds	r4, r2, r2
 8005572:	603c      	str	r4, [r7, #0]
 8005574:	415b      	adcs	r3, r3
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800557c:	1812      	adds	r2, r2, r0
 800557e:	eb41 0303 	adc.w	r3, r1, r3
 8005582:	f04f 0400 	mov.w	r4, #0
 8005586:	f04f 0500 	mov.w	r5, #0
 800558a:	00dd      	lsls	r5, r3, #3
 800558c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005590:	00d4      	lsls	r4, r2, #3
 8005592:	4622      	mov	r2, r4
 8005594:	462b      	mov	r3, r5
 8005596:	eb12 0a00 	adds.w	sl, r2, r0
 800559a:	eb43 0b01 	adc.w	fp, r3, r1
 800559e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	008b      	lsls	r3, r1, #2
 80055b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055b6:	0082      	lsls	r2, r0, #2
 80055b8:	4650      	mov	r0, sl
 80055ba:	4659      	mov	r1, fp
 80055bc:	f7fb fafc 	bl	8000bb8 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <UART_SetConfig+0x38c>)
 80055c6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2164      	movs	r1, #100	; 0x64
 80055ce:	fb01 f303 	mul.w	r3, r1, r3
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3332      	adds	r3, #50	; 0x32
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <UART_SetConfig+0x38c>)
 80055da:	fba2 2303 	umull	r2, r3, r2, r3
 80055de:	095b      	lsrs	r3, r3, #5
 80055e0:	f003 020f 	and.w	r2, r3, #15
 80055e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4432      	add	r2, r6
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	377c      	adds	r7, #124	; 0x7c
 80055f0:	46bd      	mov	sp, r7
 80055f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f6:	bf00      	nop
 80055f8:	40011000 	.word	0x40011000
 80055fc:	40011400 	.word	0x40011400
 8005600:	51eb851f 	.word	0x51eb851f

08005604 <__NVIC_SetPriority>:
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	6039      	str	r1, [r7, #0]
 800560e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005614:	2b00      	cmp	r3, #0
 8005616:	db0a      	blt.n	800562e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	490c      	ldr	r1, [pc, #48]	; (8005650 <__NVIC_SetPriority+0x4c>)
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	0112      	lsls	r2, r2, #4
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	440b      	add	r3, r1
 8005628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800562c:	e00a      	b.n	8005644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	b2da      	uxtb	r2, r3
 8005632:	4908      	ldr	r1, [pc, #32]	; (8005654 <__NVIC_SetPriority+0x50>)
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	3b04      	subs	r3, #4
 800563c:	0112      	lsls	r2, r2, #4
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	440b      	add	r3, r1
 8005642:	761a      	strb	r2, [r3, #24]
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	e000e100 	.word	0xe000e100
 8005654:	e000ed00 	.word	0xe000ed00

08005658 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800565c:	4b05      	ldr	r3, [pc, #20]	; (8005674 <SysTick_Handler+0x1c>)
 800565e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005660:	f001 fd28 	bl	80070b4 <xTaskGetSchedulerState>
 8005664:	4603      	mov	r3, r0
 8005666:	2b01      	cmp	r3, #1
 8005668:	d001      	beq.n	800566e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800566a:	f002 fb0d 	bl	8007c88 <xPortSysTickHandler>
  }
}
 800566e:	bf00      	nop
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	e000e010 	.word	0xe000e010

08005678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800567c:	2100      	movs	r1, #0
 800567e:	f06f 0004 	mvn.w	r0, #4
 8005682:	f7ff ffbf 	bl	8005604 <__NVIC_SetPriority>
#endif
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005692:	f3ef 8305 	mrs	r3, IPSR
 8005696:	603b      	str	r3, [r7, #0]
  return(result);
 8005698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800569e:	f06f 0305 	mvn.w	r3, #5
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	e00c      	b.n	80056c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <osKernelInitialize+0x44>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d105      	bne.n	80056ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056ae:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <osKernelInitialize+0x44>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	e002      	b.n	80056c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056c0:	687b      	ldr	r3, [r7, #4]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	20000260 	.word	0x20000260

080056d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056da:	f3ef 8305 	mrs	r3, IPSR
 80056de:	603b      	str	r3, [r7, #0]
  return(result);
 80056e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80056e6:	f06f 0305 	mvn.w	r3, #5
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	e010      	b.n	8005710 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <osKernelStart+0x48>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d109      	bne.n	800570a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056f6:	f7ff ffbf 	bl	8005678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056fa:	4b08      	ldr	r3, [pc, #32]	; (800571c <osKernelStart+0x48>)
 80056fc:	2202      	movs	r2, #2
 80056fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005700:	f001 f87c 	bl	80067fc <vTaskStartScheduler>
      stat = osOK;
 8005704:	2300      	movs	r3, #0
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	e002      	b.n	8005710 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005710:	687b      	ldr	r3, [r7, #4]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000260 	.word	0x20000260

08005720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b08e      	sub	sp, #56	; 0x38
 8005724:	af04      	add	r7, sp, #16
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005730:	f3ef 8305 	mrs	r3, IPSR
 8005734:	617b      	str	r3, [r7, #20]
  return(result);
 8005736:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005738:	2b00      	cmp	r3, #0
 800573a:	d17e      	bne.n	800583a <osThreadNew+0x11a>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d07b      	beq.n	800583a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005746:	2318      	movs	r3, #24
 8005748:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800574e:	f04f 33ff 	mov.w	r3, #4294967295
 8005752:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d045      	beq.n	80057e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <osThreadNew+0x48>
        name = attr->name;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <osThreadNew+0x6e>
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2b38      	cmp	r3, #56	; 0x38
 8005780:	d805      	bhi.n	800578e <osThreadNew+0x6e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <osThreadNew+0x72>
        return (NULL);
 800578e:	2300      	movs	r3, #0
 8005790:	e054      	b.n	800583c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00e      	beq.n	80057c8 <osThreadNew+0xa8>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2bbb      	cmp	r3, #187	; 0xbb
 80057b0:	d90a      	bls.n	80057c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d006      	beq.n	80057c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <osThreadNew+0xa8>
        mem = 1;
 80057c2:	2301      	movs	r3, #1
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e010      	b.n	80057ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10c      	bne.n	80057ea <osThreadNew+0xca>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d108      	bne.n	80057ea <osThreadNew+0xca>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <osThreadNew+0xca>
          mem = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e001      	b.n	80057ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d110      	bne.n	8005812 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057f8:	9202      	str	r2, [sp, #8]
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fe0c 	bl	8006424 <xTaskCreateStatic>
 800580c:	4603      	mov	r3, r0
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	e013      	b.n	800583a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d110      	bne.n	800583a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	b29a      	uxth	r2, r3
 800581c:	f107 0310 	add.w	r3, r7, #16
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fe57 	bl	80064de <xTaskCreate>
 8005830:	4603      	mov	r3, r0
 8005832:	2b01      	cmp	r3, #1
 8005834:	d001      	beq.n	800583a <osThreadNew+0x11a>
            hTask = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800583a:	693b      	ldr	r3, [r7, #16]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3728      	adds	r7, #40	; 0x28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800584c:	f3ef 8305 	mrs	r3, IPSR
 8005850:	60bb      	str	r3, [r7, #8]
  return(result);
 8005852:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <osDelay+0x1c>
    stat = osErrorISR;
 8005858:	f06f 0305 	mvn.w	r3, #5
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e007      	b.n	8005870 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <osDelay+0x2c>
      vTaskDelay(ticks);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 ff92 	bl	8006794 <vTaskDelay>
    }
  }

  return (stat);
 8005870:	68fb      	ldr	r3, [r7, #12]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a07      	ldr	r2, [pc, #28]	; (80058a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800588c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4a06      	ldr	r2, [pc, #24]	; (80058ac <vApplicationGetIdleTaskMemory+0x30>)
 8005892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2280      	movs	r2, #128	; 0x80
 8005898:	601a      	str	r2, [r3, #0]
}
 800589a:	bf00      	nop
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000264 	.word	0x20000264
 80058ac:	20000320 	.word	0x20000320

080058b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4a07      	ldr	r2, [pc, #28]	; (80058dc <vApplicationGetTimerTaskMemory+0x2c>)
 80058c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4a06      	ldr	r2, [pc, #24]	; (80058e0 <vApplicationGetTimerTaskMemory+0x30>)
 80058c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ce:	601a      	str	r2, [r3, #0]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20000520 	.word	0x20000520
 80058e0:	200005dc 	.word	0x200005dc

080058e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f103 0208 	add.w	r2, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f04f 32ff 	mov.w	r2, #4294967295
 80058fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f103 0208 	add.w	r2, r3, #8
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f103 0208 	add.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800593e:	b480      	push	{r7}
 8005940:	b085      	sub	sp, #20
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d103      	bne.n	80059a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	e00c      	b.n	80059c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3308      	adds	r3, #8
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	e002      	b.n	80059b4 <vListInsert+0x2e>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d2f6      	bcs.n	80059ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	601a      	str	r2, [r3, #0]
}
 80059ec:	bf00      	nop
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6892      	ldr	r2, [r2, #8]
 8005a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6852      	ldr	r2, [r2, #4]
 8005a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d103      	bne.n	8005a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	1e5a      	subs	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a76:	f002 f875 	bl	8007b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a86:	fb01 f303 	mul.w	r3, r1, r3
 8005a8a:	441a      	add	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	68f9      	ldr	r1, [r7, #12]
 8005aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	22ff      	movs	r2, #255	; 0xff
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	22ff      	movs	r2, #255	; 0xff
 8005ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d114      	bne.n	8005af6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01a      	beq.n	8005b0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3310      	adds	r3, #16
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 f929 	bl	8006d30 <xTaskRemoveFromEventList>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d012      	beq.n	8005b0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <xQueueGenericReset+0xcc>)
 8005ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	e009      	b.n	8005b0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3310      	adds	r3, #16
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff fef2 	bl	80058e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff feed 	bl	80058e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b0a:	f002 f85b 	bl	8007bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b0e:	2301      	movs	r3, #1
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08e      	sub	sp, #56	; 0x38
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <xQueueGenericCreateStatic+0x52>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <xQueueGenericCreateStatic+0x56>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <xQueueGenericCreateStatic+0x58>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	623b      	str	r3, [r7, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d102      	bne.n	8005b9a <xQueueGenericCreateStatic+0x7e>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <xQueueGenericCreateStatic+0x82>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <xQueueGenericCreateStatic+0x84>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	61fb      	str	r3, [r7, #28]
}
 8005bb6:	bf00      	nop
 8005bb8:	e7fe      	b.n	8005bb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005bba:	2350      	movs	r3, #80	; 0x50
 8005bbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b50      	cmp	r3, #80	; 0x50
 8005bc2:	d00a      	beq.n	8005bda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	61bb      	str	r3, [r7, #24]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f805 	bl	8005c0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3730      	adds	r7, #48	; 0x30
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d103      	bne.n	8005c28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e002      	b.n	8005c2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	69b8      	ldr	r0, [r7, #24]
 8005c3e:	f7ff ff05 	bl	8005a4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	78fa      	ldrb	r2, [r7, #3]
 8005c46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08e      	sub	sp, #56	; 0x38
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c62:	2300      	movs	r3, #0
 8005c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xQueueGenericSend+0x32>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d103      	bne.n	8005c94 <xQueueGenericSend+0x40>
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <xQueueGenericSend+0x44>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <xQueueGenericSend+0x46>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <xQueueGenericSend+0x60>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d103      	bne.n	8005cc2 <xQueueGenericSend+0x6e>
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <xQueueGenericSend+0x72>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <xQueueGenericSend+0x74>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	623b      	str	r3, [r7, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ce2:	f001 f9e7 	bl	80070b4 <xTaskGetSchedulerState>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d102      	bne.n	8005cf2 <xQueueGenericSend+0x9e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <xQueueGenericSend+0xa2>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <xQueueGenericSend+0xa4>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <xQueueGenericSend+0xbe>
	__asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	61fb      	str	r3, [r7, #28]
}
 8005d0e:	bf00      	nop
 8005d10:	e7fe      	b.n	8005d10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d12:	f001 ff27 	bl	8007b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <xQueueGenericSend+0xd4>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d129      	bne.n	8005d7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d2e:	f000 fa0b 	bl	8006148 <prvCopyDataToQueue>
 8005d32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	3324      	adds	r3, #36	; 0x24
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fff5 	bl	8006d30 <xTaskRemoveFromEventList>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d013      	beq.n	8005d74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d4c:	4b3f      	ldr	r3, [pc, #252]	; (8005e4c <xQueueGenericSend+0x1f8>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	e00a      	b.n	8005d74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d64:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <xQueueGenericSend+0x1f8>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d74:	f001 ff26 	bl	8007bc4 <vPortExitCritical>
				return pdPASS;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e063      	b.n	8005e44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d103      	bne.n	8005d8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d82:	f001 ff1f 	bl	8007bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e05c      	b.n	8005e44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 f82f 	bl	8006df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d9e:	f001 ff11 	bl	8007bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005da2:	f000 fd9b 	bl	80068dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da6:	f001 fedd 	bl	8007b64 <vPortEnterCritical>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db0:	b25b      	sxtb	r3, r3
 8005db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db6:	d103      	bne.n	8005dc0 <xQueueGenericSend+0x16c>
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc6:	b25b      	sxtb	r3, r3
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d103      	bne.n	8005dd6 <xQueueGenericSend+0x182>
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd6:	f001 fef5 	bl	8007bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dda:	1d3a      	adds	r2, r7, #4
 8005ddc:	f107 0314 	add.w	r3, r7, #20
 8005de0:	4611      	mov	r1, r2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f81e 	bl	8006e24 <xTaskCheckForTimeOut>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d124      	bne.n	8005e38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005df0:	f000 faa2 	bl	8006338 <prvIsQueueFull>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d018      	beq.n	8005e2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	3310      	adds	r3, #16
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 ff44 	bl	8006c90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0a:	f000 fa2d 	bl	8006268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e0e:	f000 fd73 	bl	80068f8 <xTaskResumeAll>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f47f af7c 	bne.w	8005d12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <xQueueGenericSend+0x1f8>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	e772      	b.n	8005d12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e2e:	f000 fa1b 	bl	8006268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e32:	f000 fd61 	bl	80068f8 <xTaskResumeAll>
 8005e36:	e76c      	b.n	8005d12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e3a:	f000 fa15 	bl	8006268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e3e:	f000 fd5b 	bl	80068f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3738      	adds	r7, #56	; 0x38
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b090      	sub	sp, #64	; 0x40
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <xQueueGenericSendFromISR+0x3c>
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <xQueueGenericSendFromISR+0x40>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <xQueueGenericSendFromISR+0x42>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d103      	bne.n	8005eba <xQueueGenericSendFromISR+0x6a>
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <xQueueGenericSendFromISR+0x6e>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueGenericSendFromISR+0x70>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	623b      	str	r3, [r7, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eda:	f001 ff25 	bl	8007d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ede:	f3ef 8211 	mrs	r2, BASEPRI
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	61fa      	str	r2, [r7, #28]
 8005ef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d302      	bcc.n	8005f0c <xQueueGenericSendFromISR+0xbc>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d12f      	bne.n	8005f6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f22:	f000 f911 	bl	8006148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d112      	bne.n	8005f56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d016      	beq.n	8005f66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	3324      	adds	r3, #36	; 0x24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fef7 	bl	8006d30 <xTaskRemoveFromEventList>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00e      	beq.n	8005f66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e007      	b.n	8005f66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	b25a      	sxtb	r2, r3
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f66:	2301      	movs	r3, #1
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f6a:	e001      	b.n	8005f70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3740      	adds	r7, #64	; 0x40
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08c      	sub	sp, #48	; 0x30
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f94:	2300      	movs	r3, #0
 8005f96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <xQueueReceive+0x30>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	623b      	str	r3, [r7, #32]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <xQueueReceive+0x3e>
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <xQueueReceive+0x42>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <xQueueReceive+0x44>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueReceive+0x5e>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	61fb      	str	r3, [r7, #28]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fe6:	f001 f865 	bl	80070b4 <xTaskGetSchedulerState>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <xQueueReceive+0x6e>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <xQueueReceive+0x72>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <xQueueReceive+0x74>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xQueueReceive+0x8e>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	61bb      	str	r3, [r7, #24]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006016:	f001 fda5 	bl	8007b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01f      	beq.n	8006066 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800602a:	f000 f8f7 	bl	800621c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	1e5a      	subs	r2, r3, #1
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00f      	beq.n	800605e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	3310      	adds	r3, #16
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fe74 	bl	8006d30 <xTaskRemoveFromEventList>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800604e:	4b3d      	ldr	r3, [pc, #244]	; (8006144 <xQueueReceive+0x1bc>)
 8006050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800605e:	f001 fdb1 	bl	8007bc4 <vPortExitCritical>
				return pdPASS;
 8006062:	2301      	movs	r3, #1
 8006064:	e069      	b.n	800613a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d103      	bne.n	8006074 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800606c:	f001 fdaa 	bl	8007bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006070:	2300      	movs	r3, #0
 8006072:	e062      	b.n	800613a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800607a:	f107 0310 	add.w	r3, r7, #16
 800607e:	4618      	mov	r0, r3
 8006080:	f000 feba 	bl	8006df8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006084:	2301      	movs	r3, #1
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006088:	f001 fd9c 	bl	8007bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800608c:	f000 fc26 	bl	80068dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006090:	f001 fd68 	bl	8007b64 <vPortEnterCritical>
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800609a:	b25b      	sxtb	r3, r3
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d103      	bne.n	80060aa <xQueueReceive+0x122>
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060b0:	b25b      	sxtb	r3, r3
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b6:	d103      	bne.n	80060c0 <xQueueReceive+0x138>
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c0:	f001 fd80 	bl	8007bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80060c4:	1d3a      	adds	r2, r7, #4
 80060c6:	f107 0310 	add.w	r3, r7, #16
 80060ca:	4611      	mov	r1, r2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fea9 	bl	8006e24 <xTaskCheckForTimeOut>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d123      	bne.n	8006120 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060da:	f000 f917 	bl	800630c <prvIsQueueEmpty>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d017      	beq.n	8006114 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	3324      	adds	r3, #36	; 0x24
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4611      	mov	r1, r2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fdcf 	bl	8006c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f4:	f000 f8b8 	bl	8006268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060f8:	f000 fbfe 	bl	80068f8 <xTaskResumeAll>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d189      	bne.n	8006016 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006102:	4b10      	ldr	r3, [pc, #64]	; (8006144 <xQueueReceive+0x1bc>)
 8006104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	e780      	b.n	8006016 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006116:	f000 f8a7 	bl	8006268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800611a:	f000 fbed 	bl	80068f8 <xTaskResumeAll>
 800611e:	e77a      	b.n	8006016 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006122:	f000 f8a1 	bl	8006268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006126:	f000 fbe7 	bl	80068f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800612a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800612c:	f000 f8ee 	bl	800630c <prvIsQueueEmpty>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	f43f af6f 	beq.w	8006016 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800613a:	4618      	mov	r0, r3
 800613c:	3730      	adds	r7, #48	; 0x30
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d14d      	bne.n	800620a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 ffbc 	bl	80070f0 <xTaskPriorityDisinherit>
 8006178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	e043      	b.n	800620a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d119      	bne.n	80061bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6858      	ldr	r0, [r3, #4]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	461a      	mov	r2, r3
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	f002 f915 	bl	80083c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	441a      	add	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d32b      	bcc.n	800620a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]
 80061ba:	e026      	b.n	800620a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68d8      	ldr	r0, [r3, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	461a      	mov	r2, r3
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	f002 f8fb 	bl	80083c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d4:	425b      	negs	r3, r3
 80061d6:	441a      	add	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d207      	bcs.n	80061f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	425b      	negs	r3, r3
 80061f2:	441a      	add	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d105      	bne.n	800620a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	3b01      	subs	r3, #1
 8006208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006212:	697b      	ldr	r3, [r7, #20]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d018      	beq.n	8006260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	441a      	add	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68da      	ldr	r2, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	429a      	cmp	r2, r3
 8006246:	d303      	bcc.n	8006250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68d9      	ldr	r1, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	461a      	mov	r2, r3
 800625a:	6838      	ldr	r0, [r7, #0]
 800625c:	f002 f8b1 	bl	80083c2 <memcpy>
	}
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006270:	f001 fc78 	bl	8007b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800627a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800627c:	e011      	b.n	80062a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d012      	beq.n	80062ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3324      	adds	r3, #36	; 0x24
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fd50 	bl	8006d30 <xTaskRemoveFromEventList>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006296:	f000 fe27 	bl	8006ee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	3b01      	subs	r3, #1
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dce9      	bgt.n	800627e <prvUnlockQueue+0x16>
 80062aa:	e000      	b.n	80062ae <prvUnlockQueue+0x46>
					break;
 80062ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	22ff      	movs	r2, #255	; 0xff
 80062b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80062b6:	f001 fc85 	bl	8007bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062ba:	f001 fc53 	bl	8007b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c6:	e011      	b.n	80062ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d012      	beq.n	80062f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3310      	adds	r3, #16
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fd2b 	bl	8006d30 <xTaskRemoveFromEventList>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062e0:	f000 fe02 	bl	8006ee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	dce9      	bgt.n	80062c8 <prvUnlockQueue+0x60>
 80062f4:	e000      	b.n	80062f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	22ff      	movs	r2, #255	; 0xff
 80062fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006300:	f001 fc60 	bl	8007bc4 <vPortExitCritical>
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006314:	f001 fc26 	bl	8007b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	2b00      	cmp	r3, #0
 800631e:	d102      	bne.n	8006326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e001      	b.n	800632a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800632a:	f001 fc4b 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 800632e:	68fb      	ldr	r3, [r7, #12]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006340:	f001 fc10 	bl	8007b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634c:	429a      	cmp	r2, r3
 800634e:	d102      	bne.n	8006356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006350:	2301      	movs	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e001      	b.n	800635a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800635a:	f001 fc33 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e014      	b.n	80063a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006378:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <vQueueAddToRegistry+0x50>)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006384:	490c      	ldr	r1, [pc, #48]	; (80063b8 <vQueueAddToRegistry+0x50>)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800638e:	4a0a      	ldr	r2, [pc, #40]	; (80063b8 <vQueueAddToRegistry+0x50>)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	4413      	add	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800639a:	e006      	b.n	80063aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b07      	cmp	r3, #7
 80063a6:	d9e7      	bls.n	8006378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20005228 	.word	0x20005228

080063bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063cc:	f001 fbca 	bl	8007b64 <vPortEnterCritical>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063d6:	b25b      	sxtb	r3, r3
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d103      	bne.n	80063e6 <vQueueWaitForMessageRestricted+0x2a>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ec:	b25b      	sxtb	r3, r3
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f2:	d103      	bne.n	80063fc <vQueueWaitForMessageRestricted+0x40>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063fc:	f001 fbe2 	bl	8007bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	d106      	bne.n	8006416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	3324      	adds	r3, #36	; 0x24
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	4618      	mov	r0, r3
 8006412:	f000 fc61 	bl	8006cd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006416:	6978      	ldr	r0, [r7, #20]
 8006418:	f7ff ff26 	bl	8006268 <prvUnlockQueue>
	}
 800641c:	bf00      	nop
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08e      	sub	sp, #56	; 0x38
 8006428:	af04      	add	r7, sp, #16
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	623b      	str	r3, [r7, #32]
}
 800644a:	bf00      	nop
 800644c:	e7fe      	b.n	800644c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10a      	bne.n	800646a <xTaskCreateStatic+0x46>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	61fb      	str	r3, [r7, #28]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800646a:	23bc      	movs	r3, #188	; 0xbc
 800646c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2bbc      	cmp	r3, #188	; 0xbc
 8006472:	d00a      	beq.n	800648a <xTaskCreateStatic+0x66>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	61bb      	str	r3, [r7, #24]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800648a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01e      	beq.n	80064d0 <xTaskCreateStatic+0xac>
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01b      	beq.n	80064d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	2202      	movs	r2, #2
 80064a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064aa:	2300      	movs	r3, #0
 80064ac:	9303      	str	r3, [sp, #12]
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	9302      	str	r3, [sp, #8]
 80064b2:	f107 0314 	add.w	r3, r7, #20
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f850 	bl	8006568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064ca:	f000 f8f3 	bl	80066b4 <prvAddNewTaskToReadyList>
 80064ce:	e001      	b.n	80064d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064d4:	697b      	ldr	r3, [r7, #20]
	}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3728      	adds	r7, #40	; 0x28
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b08c      	sub	sp, #48	; 0x30
 80064e2:	af04      	add	r7, sp, #16
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	603b      	str	r3, [r7, #0]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 fc58 	bl	8007da8 <pvPortMalloc>
 80064f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00e      	beq.n	800651e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006500:	20bc      	movs	r0, #188	; 0xbc
 8006502:	f001 fc51 	bl	8007da8 <pvPortMalloc>
 8006506:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
 8006514:	e005      	b.n	8006522 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006516:	6978      	ldr	r0, [r7, #20]
 8006518:	f001 fd12 	bl	8007f40 <vPortFree>
 800651c:	e001      	b.n	8006522 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d017      	beq.n	8006558 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006530:	88fa      	ldrh	r2, [r7, #6]
 8006532:	2300      	movs	r3, #0
 8006534:	9303      	str	r3, [sp, #12]
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	9302      	str	r3, [sp, #8]
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68b9      	ldr	r1, [r7, #8]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f80e 	bl	8006568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800654c:	69f8      	ldr	r0, [r7, #28]
 800654e:	f000 f8b1 	bl	80066b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006552:	2301      	movs	r3, #1
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	e002      	b.n	800655e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800655e:	69bb      	ldr	r3, [r7, #24]
	}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	461a      	mov	r2, r3
 8006580:	21a5      	movs	r1, #165	; 0xa5
 8006582:	f001 ff2c 	bl	80083de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006590:	3b01      	subs	r3, #1
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	617b      	str	r3, [r7, #20]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01f      	beq.n	8006606 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	e012      	b.n	80065f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	7819      	ldrb	r1, [r3, #0]
 80065d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	3334      	adds	r3, #52	; 0x34
 80065dc:	460a      	mov	r2, r1
 80065de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3301      	adds	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b0f      	cmp	r3, #15
 80065f6:	d9e9      	bls.n	80065cc <prvInitialiseNewTask+0x64>
 80065f8:	e000      	b.n	80065fc <prvInitialiseNewTask+0x94>
			{
				break;
 80065fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006604:	e003      	b.n	800660e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	2b37      	cmp	r3, #55	; 0x37
 8006612:	d901      	bls.n	8006618 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006614:	2337      	movs	r3, #55	; 0x37
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006622:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2200      	movs	r2, #0
 8006628:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff f978 	bl	8005924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	3318      	adds	r3, #24
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff f973 	bl	8005924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	2200      	movs	r2, #0
 8006660:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	3354      	adds	r3, #84	; 0x54
 8006668:	2260      	movs	r2, #96	; 0x60
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f001 feb6 	bl	80083de <memset>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <prvInitialiseNewTask+0x140>)
 8006676:	659a      	str	r2, [r3, #88]	; 0x58
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	4a0c      	ldr	r2, [pc, #48]	; (80066ac <prvInitialiseNewTask+0x144>)
 800667c:	65da      	str	r2, [r3, #92]	; 0x5c
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	4a0b      	ldr	r2, [pc, #44]	; (80066b0 <prvInitialiseNewTask+0x148>)
 8006682:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f001 f941 	bl	8007910 <pxPortInitialiseStack>
 800668e:	4602      	mov	r2, r0
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	0800aea8 	.word	0x0800aea8
 80066ac:	0800aec8 	.word	0x0800aec8
 80066b0:	0800ae88 	.word	0x0800ae88

080066b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066bc:	f001 fa52 	bl	8007b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066c0:	4b2d      	ldr	r3, [pc, #180]	; (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066ca:	4b2c      	ldr	r3, [pc, #176]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066d2:	4a2a      	ldr	r2, [pc, #168]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066d8:	4b27      	ldr	r3, [pc, #156]	; (8006778 <prvAddNewTaskToReadyList+0xc4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d110      	bne.n	8006702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066e0:	f000 fc26 	bl	8006f30 <prvInitialiseTaskLists>
 80066e4:	e00d      	b.n	8006702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066e6:	4b26      	ldr	r3, [pc, #152]	; (8006780 <prvAddNewTaskToReadyList+0xcc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066ee:	4b23      	ldr	r3, [pc, #140]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d802      	bhi.n	8006702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066fc:	4a1f      	ldr	r2, [pc, #124]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006702:	4b20      	ldr	r3, [pc, #128]	; (8006784 <prvAddNewTaskToReadyList+0xd0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	4a1e      	ldr	r2, [pc, #120]	; (8006784 <prvAddNewTaskToReadyList+0xd0>)
 800670a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <prvAddNewTaskToReadyList+0xd0>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006718:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <prvAddNewTaskToReadyList+0xd4>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d903      	bls.n	8006728 <prvAddNewTaskToReadyList+0x74>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	4a18      	ldr	r2, [pc, #96]	; (8006788 <prvAddNewTaskToReadyList+0xd4>)
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4a15      	ldr	r2, [pc, #84]	; (800678c <prvAddNewTaskToReadyList+0xd8>)
 8006736:	441a      	add	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3304      	adds	r3, #4
 800673c:	4619      	mov	r1, r3
 800673e:	4610      	mov	r0, r2
 8006740:	f7ff f8fd 	bl	800593e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006744:	f001 fa3e 	bl	8007bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006748:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <prvAddNewTaskToReadyList+0xcc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006750:	4b0a      	ldr	r3, [pc, #40]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	429a      	cmp	r2, r3
 800675c:	d207      	bcs.n	800676e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800675e:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <prvAddNewTaskToReadyList+0xdc>)
 8006760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000eb0 	.word	0x20000eb0
 800677c:	200009dc 	.word	0x200009dc
 8006780:	20000ebc 	.word	0x20000ebc
 8006784:	20000ecc 	.word	0x20000ecc
 8006788:	20000eb8 	.word	0x20000eb8
 800678c:	200009e0 	.word	0x200009e0
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d017      	beq.n	80067d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <vTaskDelay+0x60>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00a      	beq.n	80067c4 <vTaskDelay+0x30>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	60bb      	str	r3, [r7, #8]
}
 80067c0:	bf00      	nop
 80067c2:	e7fe      	b.n	80067c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067c4:	f000 f88a 	bl	80068dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067c8:	2100      	movs	r1, #0
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fcfe 	bl	80071cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067d0:	f000 f892 	bl	80068f8 <xTaskResumeAll>
 80067d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d107      	bne.n	80067ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067dc:	4b06      	ldr	r3, [pc, #24]	; (80067f8 <vTaskDelay+0x64>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000ed8 	.word	0x20000ed8
 80067f8:	e000ed04 	.word	0xe000ed04

080067fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	; 0x28
 8006800:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800680a:	463a      	mov	r2, r7
 800680c:	1d39      	adds	r1, r7, #4
 800680e:	f107 0308 	add.w	r3, r7, #8
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff f832 	bl	800587c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	9202      	str	r2, [sp, #8]
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	2300      	movs	r3, #0
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	460a      	mov	r2, r1
 800682a:	4924      	ldr	r1, [pc, #144]	; (80068bc <vTaskStartScheduler+0xc0>)
 800682c:	4824      	ldr	r0, [pc, #144]	; (80068c0 <vTaskStartScheduler+0xc4>)
 800682e:	f7ff fdf9 	bl	8006424 <xTaskCreateStatic>
 8006832:	4603      	mov	r3, r0
 8006834:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <vTaskStartScheduler+0xc8>)
 8006836:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006838:	4b22      	ldr	r3, [pc, #136]	; (80068c4 <vTaskStartScheduler+0xc8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006840:	2301      	movs	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e001      	b.n	800684a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d102      	bne.n	8006856 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006850:	f000 fd10 	bl	8007274 <xTimerCreateTimerTask>
 8006854:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d11b      	bne.n	8006894 <vTaskStartScheduler+0x98>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
}
 800686e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006870:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <vTaskStartScheduler+0xcc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3354      	adds	r3, #84	; 0x54
 8006876:	4a15      	ldr	r2, [pc, #84]	; (80068cc <vTaskStartScheduler+0xd0>)
 8006878:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800687a:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <vTaskStartScheduler+0xd4>)
 800687c:	f04f 32ff 	mov.w	r2, #4294967295
 8006880:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006882:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <vTaskStartScheduler+0xd8>)
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006888:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <vTaskStartScheduler+0xdc>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800688e:	f001 f8c7 	bl	8007a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006892:	e00e      	b.n	80068b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d10a      	bne.n	80068b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60fb      	str	r3, [r7, #12]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <vTaskStartScheduler+0xb4>
}
 80068b2:	bf00      	nop
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	0800adec 	.word	0x0800adec
 80068c0:	08006f01 	.word	0x08006f01
 80068c4:	20000ed4 	.word	0x20000ed4
 80068c8:	200009dc 	.word	0x200009dc
 80068cc:	20000060 	.word	0x20000060
 80068d0:	20000ed0 	.word	0x20000ed0
 80068d4:	20000ebc 	.word	0x20000ebc
 80068d8:	20000eb4 	.word	0x20000eb4

080068dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <vTaskSuspendAll+0x18>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a03      	ldr	r2, [pc, #12]	; (80068f4 <vTaskSuspendAll+0x18>)
 80068e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068ea:	bf00      	nop
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	20000ed8 	.word	0x20000ed8

080068f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006906:	4b42      	ldr	r3, [pc, #264]	; (8006a10 <xTaskResumeAll+0x118>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <xTaskResumeAll+0x2c>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	603b      	str	r3, [r7, #0]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006924:	f001 f91e 	bl	8007b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006928:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <xTaskResumeAll+0x118>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	4a38      	ldr	r2, [pc, #224]	; (8006a10 <xTaskResumeAll+0x118>)
 8006930:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006932:	4b37      	ldr	r3, [pc, #220]	; (8006a10 <xTaskResumeAll+0x118>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d162      	bne.n	8006a00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800693a:	4b36      	ldr	r3, [pc, #216]	; (8006a14 <xTaskResumeAll+0x11c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d05e      	beq.n	8006a00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006942:	e02f      	b.n	80069a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006944:	4b34      	ldr	r3, [pc, #208]	; (8006a18 <xTaskResumeAll+0x120>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3318      	adds	r3, #24
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff f851 	bl	80059f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3304      	adds	r3, #4
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff f84c 	bl	80059f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	4b2d      	ldr	r3, [pc, #180]	; (8006a1c <xTaskResumeAll+0x124>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d903      	bls.n	8006974 <xTaskResumeAll+0x7c>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <xTaskResumeAll+0x124>)
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4a27      	ldr	r2, [pc, #156]	; (8006a20 <xTaskResumeAll+0x128>)
 8006982:	441a      	add	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f7fe ffd7 	bl	800593e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4b23      	ldr	r3, [pc, #140]	; (8006a24 <xTaskResumeAll+0x12c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	429a      	cmp	r2, r3
 800699c:	d302      	bcc.n	80069a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800699e:	4b22      	ldr	r3, [pc, #136]	; (8006a28 <xTaskResumeAll+0x130>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069a4:	4b1c      	ldr	r3, [pc, #112]	; (8006a18 <xTaskResumeAll+0x120>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1cb      	bne.n	8006944 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069b2:	f000 fb5f 	bl	8007074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069b6:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <xTaskResumeAll+0x134>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d010      	beq.n	80069e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069c2:	f000 f847 	bl	8006a54 <xTaskIncrementTick>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80069cc:	4b16      	ldr	r3, [pc, #88]	; (8006a28 <xTaskResumeAll+0x130>)
 80069ce:	2201      	movs	r2, #1
 80069d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f1      	bne.n	80069c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80069de:	4b13      	ldr	r3, [pc, #76]	; (8006a2c <xTaskResumeAll+0x134>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069e4:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <xTaskResumeAll+0x130>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d009      	beq.n	8006a00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069f0:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <xTaskResumeAll+0x138>)
 80069f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a00:	f001 f8e0 	bl	8007bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8006a04:	68bb      	ldr	r3, [r7, #8]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000ed8 	.word	0x20000ed8
 8006a14:	20000eb0 	.word	0x20000eb0
 8006a18:	20000e70 	.word	0x20000e70
 8006a1c:	20000eb8 	.word	0x20000eb8
 8006a20:	200009e0 	.word	0x200009e0
 8006a24:	200009dc 	.word	0x200009dc
 8006a28:	20000ec4 	.word	0x20000ec4
 8006a2c:	20000ec0 	.word	0x20000ec0
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <xTaskGetTickCount+0x1c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a40:	687b      	ldr	r3, [r7, #4]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	20000eb4 	.word	0x20000eb4

08006a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5e:	4b4f      	ldr	r3, [pc, #316]	; (8006b9c <xTaskIncrementTick+0x148>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f040 808f 	bne.w	8006b86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a68:	4b4d      	ldr	r3, [pc, #308]	; (8006ba0 <xTaskIncrementTick+0x14c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a70:	4a4b      	ldr	r2, [pc, #300]	; (8006ba0 <xTaskIncrementTick+0x14c>)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d120      	bne.n	8006abe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a7c:	4b49      	ldr	r3, [pc, #292]	; (8006ba4 <xTaskIncrementTick+0x150>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <xTaskIncrementTick+0x48>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	603b      	str	r3, [r7, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	e7fe      	b.n	8006a9a <xTaskIncrementTick+0x46>
 8006a9c:	4b41      	ldr	r3, [pc, #260]	; (8006ba4 <xTaskIncrementTick+0x150>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	4b41      	ldr	r3, [pc, #260]	; (8006ba8 <xTaskIncrementTick+0x154>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3f      	ldr	r2, [pc, #252]	; (8006ba4 <xTaskIncrementTick+0x150>)
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	4a3f      	ldr	r2, [pc, #252]	; (8006ba8 <xTaskIncrementTick+0x154>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	4b3e      	ldr	r3, [pc, #248]	; (8006bac <xTaskIncrementTick+0x158>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	4a3d      	ldr	r2, [pc, #244]	; (8006bac <xTaskIncrementTick+0x158>)
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	f000 fadb 	bl	8007074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006abe:	4b3c      	ldr	r3, [pc, #240]	; (8006bb0 <xTaskIncrementTick+0x15c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d349      	bcc.n	8006b5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ac8:	4b36      	ldr	r3, [pc, #216]	; (8006ba4 <xTaskIncrementTick+0x150>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d104      	bne.n	8006adc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad2:	4b37      	ldr	r3, [pc, #220]	; (8006bb0 <xTaskIncrementTick+0x15c>)
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad8:	601a      	str	r2, [r3, #0]
					break;
 8006ada:	e03f      	b.n	8006b5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006adc:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <xTaskIncrementTick+0x150>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d203      	bcs.n	8006afc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006af4:	4a2e      	ldr	r2, [pc, #184]	; (8006bb0 <xTaskIncrementTick+0x15c>)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006afa:	e02f      	b.n	8006b5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe ff79 	bl	80059f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	3318      	adds	r3, #24
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe ff70 	bl	80059f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <xTaskIncrementTick+0x160>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d903      	bls.n	8006b2c <xTaskIncrementTick+0xd8>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	4a22      	ldr	r2, [pc, #136]	; (8006bb4 <xTaskIncrementTick+0x160>)
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <xTaskIncrementTick+0x164>)
 8006b3a:	441a      	add	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4619      	mov	r1, r3
 8006b42:	4610      	mov	r0, r2
 8006b44:	f7fe fefb 	bl	800593e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4c:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <xTaskIncrementTick+0x168>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d3b8      	bcc.n	8006ac8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b5a:	e7b5      	b.n	8006ac8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b5c:	4b17      	ldr	r3, [pc, #92]	; (8006bbc <xTaskIncrementTick+0x168>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	4915      	ldr	r1, [pc, #84]	; (8006bb8 <xTaskIncrementTick+0x164>)
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d901      	bls.n	8006b78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b78:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <xTaskIncrementTick+0x16c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b80:	2301      	movs	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e004      	b.n	8006b90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <xTaskIncrementTick+0x170>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	4a0d      	ldr	r2, [pc, #52]	; (8006bc4 <xTaskIncrementTick+0x170>)
 8006b8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b90:	697b      	ldr	r3, [r7, #20]
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000ed8 	.word	0x20000ed8
 8006ba0:	20000eb4 	.word	0x20000eb4
 8006ba4:	20000e68 	.word	0x20000e68
 8006ba8:	20000e6c 	.word	0x20000e6c
 8006bac:	20000ec8 	.word	0x20000ec8
 8006bb0:	20000ed0 	.word	0x20000ed0
 8006bb4:	20000eb8 	.word	0x20000eb8
 8006bb8:	200009e0 	.word	0x200009e0
 8006bbc:	200009dc 	.word	0x200009dc
 8006bc0:	20000ec4 	.word	0x20000ec4
 8006bc4:	20000ec0 	.word	0x20000ec0

08006bc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bce:	4b2a      	ldr	r3, [pc, #168]	; (8006c78 <vTaskSwitchContext+0xb0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bd6:	4b29      	ldr	r3, [pc, #164]	; (8006c7c <vTaskSwitchContext+0xb4>)
 8006bd8:	2201      	movs	r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bdc:	e046      	b.n	8006c6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006bde:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <vTaskSwitchContext+0xb4>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be4:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <vTaskSwitchContext+0xb8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
 8006bea:	e010      	b.n	8006c0e <vTaskSwitchContext+0x46>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	607b      	str	r3, [r7, #4]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <vTaskSwitchContext+0x3e>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	491d      	ldr	r1, [pc, #116]	; (8006c84 <vTaskSwitchContext+0xbc>)
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0e4      	beq.n	8006bec <vTaskSwitchContext+0x24>
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <vTaskSwitchContext+0xbc>)
 8006c2e:	4413      	add	r3, r2
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	605a      	str	r2, [r3, #4]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	3308      	adds	r3, #8
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d104      	bne.n	8006c52 <vTaskSwitchContext+0x8a>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	4a0b      	ldr	r2, [pc, #44]	; (8006c88 <vTaskSwitchContext+0xc0>)
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	4a08      	ldr	r2, [pc, #32]	; (8006c80 <vTaskSwitchContext+0xb8>)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <vTaskSwitchContext+0xc0>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3354      	adds	r3, #84	; 0x54
 8006c68:	4a08      	ldr	r2, [pc, #32]	; (8006c8c <vTaskSwitchContext+0xc4>)
 8006c6a:	6013      	str	r3, [r2, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	20000ed8 	.word	0x20000ed8
 8006c7c:	20000ec4 	.word	0x20000ec4
 8006c80:	20000eb8 	.word	0x20000eb8
 8006c84:	200009e0 	.word	0x200009e0
 8006c88:	200009dc 	.word	0x200009dc
 8006c8c:	20000060 	.word	0x20000060

08006c90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cb6:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <vTaskPlaceOnEventList+0x44>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3318      	adds	r3, #24
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fe fe61 	bl	8005986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6838      	ldr	r0, [r7, #0]
 8006cc8:	f000 fa80 	bl	80071cc <prvAddCurrentTaskToDelayedList>
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	200009dc 	.word	0x200009dc

08006cd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10a      	bne.n	8006d00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	617b      	str	r3, [r7, #20]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d00:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <vTaskPlaceOnEventListRestricted+0x54>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3318      	adds	r3, #24
 8006d06:	4619      	mov	r1, r3
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7fe fe18 	bl	800593e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295
 8006d18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	68b8      	ldr	r0, [r7, #8]
 8006d1e:	f000 fa55 	bl	80071cc <prvAddCurrentTaskToDelayedList>
	}
 8006d22:	bf00      	nop
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200009dc 	.word	0x200009dc

08006d30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3318      	adds	r3, #24
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fe49 	bl	80059f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d66:	4b1e      	ldr	r3, [pc, #120]	; (8006de0 <xTaskRemoveFromEventList+0xb0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d11d      	bne.n	8006daa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fe40 	bl	80059f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	4b19      	ldr	r3, [pc, #100]	; (8006de4 <xTaskRemoveFromEventList+0xb4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d903      	bls.n	8006d8c <xTaskRemoveFromEventList+0x5c>
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	4a16      	ldr	r2, [pc, #88]	; (8006de4 <xTaskRemoveFromEventList+0xb4>)
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <xTaskRemoveFromEventList+0xb8>)
 8006d9a:	441a      	add	r2, r3
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7fe fdcb 	bl	800593e <vListInsertEnd>
 8006da8:	e005      	b.n	8006db6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	3318      	adds	r3, #24
 8006dae:	4619      	mov	r1, r3
 8006db0:	480e      	ldr	r0, [pc, #56]	; (8006dec <xTaskRemoveFromEventList+0xbc>)
 8006db2:	f7fe fdc4 	bl	800593e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <xTaskRemoveFromEventList+0xc0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d905      	bls.n	8006dd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <xTaskRemoveFromEventList+0xc4>)
 8006dca:	2201      	movs	r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	e001      	b.n	8006dd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dd4:	697b      	ldr	r3, [r7, #20]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000ed8 	.word	0x20000ed8
 8006de4:	20000eb8 	.word	0x20000eb8
 8006de8:	200009e0 	.word	0x200009e0
 8006dec:	20000e70 	.word	0x20000e70
 8006df0:	200009dc 	.word	0x200009dc
 8006df4:	20000ec4 	.word	0x20000ec4

08006df8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <vTaskInternalSetTimeOutState+0x24>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <vTaskInternalSetTimeOutState+0x28>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	605a      	str	r2, [r3, #4]
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20000ec8 	.word	0x20000ec8
 8006e20:	20000eb4 	.word	0x20000eb4

08006e24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	613b      	str	r3, [r7, #16]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e66:	f000 fe7d 	bl	8007b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e6a:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <xTaskCheckForTimeOut+0xbc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d102      	bne.n	8006e8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e84:	2300      	movs	r3, #0
 8006e86:	61fb      	str	r3, [r7, #28]
 8006e88:	e023      	b.n	8006ed2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <xTaskCheckForTimeOut+0xc0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d007      	beq.n	8006ea6 <xTaskCheckForTimeOut+0x82>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d302      	bcc.n	8006ea6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	e015      	b.n	8006ed2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d20b      	bcs.n	8006ec8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff ff9b 	bl	8006df8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
 8006ec6:	e004      	b.n	8006ed2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ed2:	f000 fe77 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000eb4 	.word	0x20000eb4
 8006ee4:	20000ec8 	.word	0x20000ec8

08006ee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006eec:	4b03      	ldr	r3, [pc, #12]	; (8006efc <vTaskMissedYield+0x14>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]
}
 8006ef2:	bf00      	nop
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	20000ec4 	.word	0x20000ec4

08006f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f08:	f000 f852 	bl	8006fb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f0c:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <prvIdleTask+0x28>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d9f9      	bls.n	8006f08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <prvIdleTask+0x2c>)
 8006f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f24:	e7f0      	b.n	8006f08 <prvIdleTask+0x8>
 8006f26:	bf00      	nop
 8006f28:	200009e0 	.word	0x200009e0
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f36:	2300      	movs	r3, #0
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	e00c      	b.n	8006f56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4a12      	ldr	r2, [pc, #72]	; (8006f90 <prvInitialiseTaskLists+0x60>)
 8006f48:	4413      	add	r3, r2
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fcca 	bl	80058e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3301      	adds	r3, #1
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b37      	cmp	r3, #55	; 0x37
 8006f5a:	d9ef      	bls.n	8006f3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f5c:	480d      	ldr	r0, [pc, #52]	; (8006f94 <prvInitialiseTaskLists+0x64>)
 8006f5e:	f7fe fcc1 	bl	80058e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f62:	480d      	ldr	r0, [pc, #52]	; (8006f98 <prvInitialiseTaskLists+0x68>)
 8006f64:	f7fe fcbe 	bl	80058e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f68:	480c      	ldr	r0, [pc, #48]	; (8006f9c <prvInitialiseTaskLists+0x6c>)
 8006f6a:	f7fe fcbb 	bl	80058e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f6e:	480c      	ldr	r0, [pc, #48]	; (8006fa0 <prvInitialiseTaskLists+0x70>)
 8006f70:	f7fe fcb8 	bl	80058e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f74:	480b      	ldr	r0, [pc, #44]	; (8006fa4 <prvInitialiseTaskLists+0x74>)
 8006f76:	f7fe fcb5 	bl	80058e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f7a:	4b0b      	ldr	r3, [pc, #44]	; (8006fa8 <prvInitialiseTaskLists+0x78>)
 8006f7c:	4a05      	ldr	r2, [pc, #20]	; (8006f94 <prvInitialiseTaskLists+0x64>)
 8006f7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <prvInitialiseTaskLists+0x7c>)
 8006f82:	4a05      	ldr	r2, [pc, #20]	; (8006f98 <prvInitialiseTaskLists+0x68>)
 8006f84:	601a      	str	r2, [r3, #0]
}
 8006f86:	bf00      	nop
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	200009e0 	.word	0x200009e0
 8006f94:	20000e40 	.word	0x20000e40
 8006f98:	20000e54 	.word	0x20000e54
 8006f9c:	20000e70 	.word	0x20000e70
 8006fa0:	20000e84 	.word	0x20000e84
 8006fa4:	20000e9c 	.word	0x20000e9c
 8006fa8:	20000e68 	.word	0x20000e68
 8006fac:	20000e6c 	.word	0x20000e6c

08006fb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fb6:	e019      	b.n	8006fec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fb8:	f000 fdd4 	bl	8007b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <prvCheckTasksWaitingTermination+0x50>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe fd15 	bl	80059f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <prvCheckTasksWaitingTermination+0x54>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	4a0b      	ldr	r2, [pc, #44]	; (8007004 <prvCheckTasksWaitingTermination+0x54>)
 8006fd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fd8:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <prvCheckTasksWaitingTermination+0x58>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	4a0a      	ldr	r2, [pc, #40]	; (8007008 <prvCheckTasksWaitingTermination+0x58>)
 8006fe0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fe2:	f000 fdef 	bl	8007bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f810 	bl	800700c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fec:	4b06      	ldr	r3, [pc, #24]	; (8007008 <prvCheckTasksWaitingTermination+0x58>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e1      	bne.n	8006fb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20000e84 	.word	0x20000e84
 8007004:	20000eb0 	.word	0x20000eb0
 8007008:	20000e98 	.word	0x20000e98

0800700c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3354      	adds	r3, #84	; 0x54
 8007018:	4618      	mov	r0, r3
 800701a:	f001 ff31 	bl	8008e80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007024:	2b00      	cmp	r3, #0
 8007026:	d108      	bne.n	800703a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	4618      	mov	r0, r3
 800702e:	f000 ff87 	bl	8007f40 <vPortFree>
				vPortFree( pxTCB );
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 ff84 	bl	8007f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007038:	e018      	b.n	800706c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007040:	2b01      	cmp	r3, #1
 8007042:	d103      	bne.n	800704c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 ff7b 	bl	8007f40 <vPortFree>
	}
 800704a:	e00f      	b.n	800706c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007052:	2b02      	cmp	r3, #2
 8007054:	d00a      	beq.n	800706c <prvDeleteTCB+0x60>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60fb      	str	r3, [r7, #12]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <prvDeleteTCB+0x5e>
	}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <prvResetNextTaskUnblockTime+0x38>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007084:	4b0a      	ldr	r3, [pc, #40]	; (80070b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007086:	f04f 32ff 	mov.w	r2, #4294967295
 800708a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800708c:	e008      	b.n	80070a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708e:	4b07      	ldr	r3, [pc, #28]	; (80070ac <prvResetNextTaskUnblockTime+0x38>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	4a04      	ldr	r2, [pc, #16]	; (80070b0 <prvResetNextTaskUnblockTime+0x3c>)
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	20000e68 	.word	0x20000e68
 80070b0:	20000ed0 	.word	0x20000ed0

080070b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070ba:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <xTaskGetSchedulerState+0x34>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070c2:	2301      	movs	r3, #1
 80070c4:	607b      	str	r3, [r7, #4]
 80070c6:	e008      	b.n	80070da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070c8:	4b08      	ldr	r3, [pc, #32]	; (80070ec <xTaskGetSchedulerState+0x38>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070d0:	2302      	movs	r3, #2
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	e001      	b.n	80070da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070d6:	2300      	movs	r3, #0
 80070d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070da:	687b      	ldr	r3, [r7, #4]
	}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	20000ebc 	.word	0x20000ebc
 80070ec:	20000ed8 	.word	0x20000ed8

080070f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d056      	beq.n	80071b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007106:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <xTaskPriorityDisinherit+0xd0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	429a      	cmp	r2, r3
 800710e:	d00a      	beq.n	8007126 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	60fb      	str	r3, [r7, #12]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60bb      	str	r3, [r7, #8]
}
 8007140:	bf00      	nop
 8007142:	e7fe      	b.n	8007142 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007148:	1e5a      	subs	r2, r3, #1
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007156:	429a      	cmp	r2, r3
 8007158:	d02c      	beq.n	80071b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715e:	2b00      	cmp	r3, #0
 8007160:	d128      	bne.n	80071b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3304      	adds	r3, #4
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fc46 	bl	80059f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007178:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <xTaskPriorityDisinherit+0xd4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d903      	bls.n	8007194 <xTaskPriorityDisinherit+0xa4>
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	4a0c      	ldr	r2, [pc, #48]	; (80071c4 <xTaskPriorityDisinherit+0xd4>)
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <xTaskPriorityDisinherit+0xd8>)
 80071a2:	441a      	add	r2, r3
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f7fe fbc7 	bl	800593e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071b0:	2301      	movs	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071b4:	697b      	ldr	r3, [r7, #20]
	}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3718      	adds	r7, #24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	200009dc 	.word	0x200009dc
 80071c4:	20000eb8 	.word	0x20000eb8
 80071c8:	200009e0 	.word	0x200009e0

080071cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071d6:	4b21      	ldr	r3, [pc, #132]	; (800725c <prvAddCurrentTaskToDelayedList+0x90>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071dc:	4b20      	ldr	r3, [pc, #128]	; (8007260 <prvAddCurrentTaskToDelayedList+0x94>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3304      	adds	r3, #4
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fc08 	bl	80059f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d10a      	bne.n	8007206 <prvAddCurrentTaskToDelayedList+0x3a>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f6:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <prvAddCurrentTaskToDelayedList+0x94>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4819      	ldr	r0, [pc, #100]	; (8007264 <prvAddCurrentTaskToDelayedList+0x98>)
 8007200:	f7fe fb9d 	bl	800593e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007204:	e026      	b.n	8007254 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4413      	add	r3, r2
 800720c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <prvAddCurrentTaskToDelayedList+0x94>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	429a      	cmp	r2, r3
 800721c:	d209      	bcs.n	8007232 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <prvAddCurrentTaskToDelayedList+0x94>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3304      	adds	r3, #4
 8007228:	4619      	mov	r1, r3
 800722a:	4610      	mov	r0, r2
 800722c:	f7fe fbab 	bl	8005986 <vListInsert>
}
 8007230:	e010      	b.n	8007254 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007232:	4b0e      	ldr	r3, [pc, #56]	; (800726c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <prvAddCurrentTaskToDelayedList+0x94>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3304      	adds	r3, #4
 800723c:	4619      	mov	r1, r3
 800723e:	4610      	mov	r0, r2
 8007240:	f7fe fba1 	bl	8005986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	d202      	bcs.n	8007254 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800724e:	4a08      	ldr	r2, [pc, #32]	; (8007270 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	6013      	str	r3, [r2, #0]
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20000eb4 	.word	0x20000eb4
 8007260:	200009dc 	.word	0x200009dc
 8007264:	20000e9c 	.word	0x20000e9c
 8007268:	20000e6c 	.word	0x20000e6c
 800726c:	20000e68 	.word	0x20000e68
 8007270:	20000ed0 	.word	0x20000ed0

08007274 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	; 0x28
 8007278:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800727e:	f000 fb07 	bl	8007890 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007282:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <xTimerCreateTimerTask+0x80>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d021      	beq.n	80072ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007292:	1d3a      	adds	r2, r7, #4
 8007294:	f107 0108 	add.w	r1, r7, #8
 8007298:	f107 030c 	add.w	r3, r7, #12
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe fb07 	bl	80058b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	9202      	str	r2, [sp, #8]
 80072aa:	9301      	str	r3, [sp, #4]
 80072ac:	2302      	movs	r3, #2
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	2300      	movs	r3, #0
 80072b2:	460a      	mov	r2, r1
 80072b4:	4910      	ldr	r1, [pc, #64]	; (80072f8 <xTimerCreateTimerTask+0x84>)
 80072b6:	4811      	ldr	r0, [pc, #68]	; (80072fc <xTimerCreateTimerTask+0x88>)
 80072b8:	f7ff f8b4 	bl	8006424 <xTaskCreateStatic>
 80072bc:	4603      	mov	r3, r0
 80072be:	4a10      	ldr	r2, [pc, #64]	; (8007300 <xTimerCreateTimerTask+0x8c>)
 80072c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <xTimerCreateTimerTask+0x8c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072ca:	2301      	movs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	613b      	str	r3, [r7, #16]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072ea:	697b      	ldr	r3, [r7, #20]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000f0c 	.word	0x20000f0c
 80072f8:	0800adf4 	.word	0x0800adf4
 80072fc:	08007439 	.word	0x08007439
 8007300:	20000f10 	.word	0x20000f10

08007304 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007312:	2300      	movs	r3, #0
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <xTimerGenericCommand+0x2e>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	623b      	str	r3, [r7, #32]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007332:	4b1a      	ldr	r3, [pc, #104]	; (800739c <xTimerGenericCommand+0x98>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d02a      	beq.n	8007390 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b05      	cmp	r3, #5
 800734a:	dc18      	bgt.n	800737e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800734c:	f7ff feb2 	bl	80070b4 <xTaskGetSchedulerState>
 8007350:	4603      	mov	r3, r0
 8007352:	2b02      	cmp	r3, #2
 8007354:	d109      	bne.n	800736a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <xTimerGenericCommand+0x98>)
 8007358:	6818      	ldr	r0, [r3, #0]
 800735a:	f107 0110 	add.w	r1, r7, #16
 800735e:	2300      	movs	r3, #0
 8007360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007362:	f7fe fc77 	bl	8005c54 <xQueueGenericSend>
 8007366:	6278      	str	r0, [r7, #36]	; 0x24
 8007368:	e012      	b.n	8007390 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800736a:	4b0c      	ldr	r3, [pc, #48]	; (800739c <xTimerGenericCommand+0x98>)
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	f107 0110 	add.w	r1, r7, #16
 8007372:	2300      	movs	r3, #0
 8007374:	2200      	movs	r2, #0
 8007376:	f7fe fc6d 	bl	8005c54 <xQueueGenericSend>
 800737a:	6278      	str	r0, [r7, #36]	; 0x24
 800737c:	e008      	b.n	8007390 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <xTimerGenericCommand+0x98>)
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	f107 0110 	add.w	r1, r7, #16
 8007386:	2300      	movs	r3, #0
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	f7fe fd61 	bl	8005e50 <xQueueGenericSendFromISR>
 800738e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007392:	4618      	mov	r0, r3
 8007394:	3728      	adds	r7, #40	; 0x28
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000f0c 	.word	0x20000f0c

080073a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073aa:	4b22      	ldr	r3, [pc, #136]	; (8007434 <prvProcessExpiredTimer+0x94>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fb1d 	bl	80059f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073c4:	f003 0304 	and.w	r3, r3, #4
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d022      	beq.n	8007412 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	18d1      	adds	r1, r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	6978      	ldr	r0, [r7, #20]
 80073da:	f000 f8d1 	bl	8007580 <prvInsertTimerInActiveList>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01f      	beq.n	8007424 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073e4:	2300      	movs	r3, #0
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	2300      	movs	r3, #0
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	2100      	movs	r1, #0
 80073ee:	6978      	ldr	r0, [r7, #20]
 80073f0:	f7ff ff88 	bl	8007304 <xTimerGenericCommand>
 80073f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d113      	bne.n	8007424 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60fb      	str	r3, [r7, #12]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007418:	f023 0301 	bic.w	r3, r3, #1
 800741c:	b2da      	uxtb	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	6978      	ldr	r0, [r7, #20]
 800742a:	4798      	blx	r3
}
 800742c:	bf00      	nop
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000f04 	.word	0x20000f04

08007438 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007440:	f107 0308 	add.w	r3, r7, #8
 8007444:	4618      	mov	r0, r3
 8007446:	f000 f857 	bl	80074f8 <prvGetNextExpireTime>
 800744a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4619      	mov	r1, r3
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f803 	bl	800745c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007456:	f000 f8d5 	bl	8007604 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800745a:	e7f1      	b.n	8007440 <prvTimerTask+0x8>

0800745c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007466:	f7ff fa39 	bl	80068dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	4618      	mov	r0, r3
 8007470:	f000 f866 	bl	8007540 <prvSampleTimeNow>
 8007474:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d130      	bne.n	80074de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <prvProcessTimerOrBlockTask+0x3c>
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	429a      	cmp	r2, r3
 8007488:	d806      	bhi.n	8007498 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800748a:	f7ff fa35 	bl	80068f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff ff85 	bl	80073a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007496:	e024      	b.n	80074e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <prvProcessTimerOrBlockTask+0x90>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <prvProcessTimerOrBlockTask+0x50>
 80074a8:	2301      	movs	r3, #1
 80074aa:	e000      	b.n	80074ae <prvProcessTimerOrBlockTask+0x52>
 80074ac:	2300      	movs	r3, #0
 80074ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074b0:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <prvProcessTimerOrBlockTask+0x94>)
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	4619      	mov	r1, r3
 80074be:	f7fe ff7d 	bl	80063bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074c2:	f7ff fa19 	bl	80068f8 <xTaskResumeAll>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <prvProcessTimerOrBlockTask+0x98>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	f3bf 8f6f 	isb	sy
}
 80074dc:	e001      	b.n	80074e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074de:	f7ff fa0b 	bl	80068f8 <xTaskResumeAll>
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000f08 	.word	0x20000f08
 80074f0:	20000f0c 	.word	0x20000f0c
 80074f4:	e000ed04 	.word	0xe000ed04

080074f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007500:	4b0e      	ldr	r3, [pc, #56]	; (800753c <prvGetNextExpireTime+0x44>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <prvGetNextExpireTime+0x16>
 800750a:	2201      	movs	r2, #1
 800750c:	e000      	b.n	8007510 <prvGetNextExpireTime+0x18>
 800750e:	2200      	movs	r2, #0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d105      	bne.n	8007528 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800751c:	4b07      	ldr	r3, [pc, #28]	; (800753c <prvGetNextExpireTime+0x44>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	e001      	b.n	800752c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800752c:	68fb      	ldr	r3, [r7, #12]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000f04 	.word	0x20000f04

08007540 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007548:	f7ff fa74 	bl	8006a34 <xTaskGetTickCount>
 800754c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800754e:	4b0b      	ldr	r3, [pc, #44]	; (800757c <prvSampleTimeNow+0x3c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	429a      	cmp	r2, r3
 8007556:	d205      	bcs.n	8007564 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007558:	f000 f936 	bl	80077c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	e002      	b.n	800756a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800756a:	4a04      	ldr	r2, [pc, #16]	; (800757c <prvSampleTimeNow+0x3c>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007570:	68fb      	ldr	r3, [r7, #12]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000f14 	.word	0x20000f14

08007580 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800758e:	2300      	movs	r3, #0
 8007590:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d812      	bhi.n	80075cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d302      	bcc.n	80075ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075b4:	2301      	movs	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	e01b      	b.n	80075f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075ba:	4b10      	ldr	r3, [pc, #64]	; (80075fc <prvInsertTimerInActiveList+0x7c>)
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3304      	adds	r3, #4
 80075c2:	4619      	mov	r1, r3
 80075c4:	4610      	mov	r0, r2
 80075c6:	f7fe f9de 	bl	8005986 <vListInsert>
 80075ca:	e012      	b.n	80075f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d206      	bcs.n	80075e2 <prvInsertTimerInActiveList+0x62>
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d302      	bcc.n	80075e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e007      	b.n	80075f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075e2:	4b07      	ldr	r3, [pc, #28]	; (8007600 <prvInsertTimerInActiveList+0x80>)
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7fe f9ca 	bl	8005986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075f2:	697b      	ldr	r3, [r7, #20]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000f08 	.word	0x20000f08
 8007600:	20000f04 	.word	0x20000f04

08007604 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08e      	sub	sp, #56	; 0x38
 8007608:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800760a:	e0ca      	b.n	80077a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	da18      	bge.n	8007644 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	3304      	adds	r3, #4
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10a      	bne.n	8007634 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	61fb      	str	r3, [r7, #28]
}
 8007630:	bf00      	nop
 8007632:	e7fe      	b.n	8007632 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800763a:	6850      	ldr	r0, [r2, #4]
 800763c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800763e:	6892      	ldr	r2, [r2, #8]
 8007640:	4611      	mov	r1, r2
 8007642:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f2c0 80aa 	blt.w	80077a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	3304      	adds	r3, #4
 800765c:	4618      	mov	r0, r3
 800765e:	f7fe f9cb 	bl	80059f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007662:	463b      	mov	r3, r7
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff ff6b 	bl	8007540 <prvSampleTimeNow>
 800766a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b09      	cmp	r3, #9
 8007670:	f200 8097 	bhi.w	80077a2 <prvProcessReceivedCommands+0x19e>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <prvProcessReceivedCommands+0x78>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	080076a5 	.word	0x080076a5
 8007680:	080076a5 	.word	0x080076a5
 8007684:	080076a5 	.word	0x080076a5
 8007688:	08007719 	.word	0x08007719
 800768c:	0800772d 	.word	0x0800772d
 8007690:	08007777 	.word	0x08007777
 8007694:	080076a5 	.word	0x080076a5
 8007698:	080076a5 	.word	0x080076a5
 800769c:	08007719 	.word	0x08007719
 80076a0:	0800772d 	.word	0x0800772d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	18d1      	adds	r1, r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c4:	f7ff ff5c 	bl	8007580 <prvInsertTimerInActiveList>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d069      	beq.n	80077a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076dc:	f003 0304 	and.w	r3, r3, #4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d05e      	beq.n	80077a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	441a      	add	r2, r3
 80076ec:	2300      	movs	r3, #0
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	2300      	movs	r3, #0
 80076f2:	2100      	movs	r1, #0
 80076f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f6:	f7ff fe05 	bl	8007304 <xTimerGenericCommand>
 80076fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d14f      	bne.n	80077a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	61bb      	str	r3, [r7, #24]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800771e:	f023 0301 	bic.w	r3, r3, #1
 8007722:	b2da      	uxtb	r2, r3
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800772a:	e03a      	b.n	80077a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	b2da      	uxtb	r2, r3
 8007738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	617b      	str	r3, [r7, #20]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007764:	699a      	ldr	r2, [r3, #24]
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	18d1      	adds	r1, r2, r3
 800776a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007770:	f7ff ff06 	bl	8007580 <prvInsertTimerInActiveList>
					break;
 8007774:	e015      	b.n	80077a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007786:	f000 fbdb 	bl	8007f40 <vPortFree>
 800778a:	e00a      	b.n	80077a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007792:	f023 0301 	bic.w	r3, r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800779e:	e000      	b.n	80077a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80077a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077a2:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <prvProcessReceivedCommands+0x1c0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	1d39      	adds	r1, r7, #4
 80077a8:	2200      	movs	r2, #0
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fbec 	bl	8005f88 <xQueueReceive>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f47f af2a 	bne.w	800760c <prvProcessReceivedCommands+0x8>
	}
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	3730      	adds	r7, #48	; 0x30
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000f0c 	.word	0x20000f0c

080077c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077ce:	e048      	b.n	8007862 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077d0:	4b2d      	ldr	r3, [pc, #180]	; (8007888 <prvSwitchTimerLists+0xc0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077da:	4b2b      	ldr	r3, [pc, #172]	; (8007888 <prvSwitchTimerLists+0xc0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe f905 	bl	80059f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d02e      	beq.n	8007862 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	d90e      	bls.n	8007834 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007822:	4b19      	ldr	r3, [pc, #100]	; (8007888 <prvSwitchTimerLists+0xc0>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3304      	adds	r3, #4
 800782a:	4619      	mov	r1, r3
 800782c:	4610      	mov	r0, r2
 800782e:	f7fe f8aa 	bl	8005986 <vListInsert>
 8007832:	e016      	b.n	8007862 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007834:	2300      	movs	r3, #0
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	2300      	movs	r3, #0
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	2100      	movs	r1, #0
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7ff fd60 	bl	8007304 <xTimerGenericCommand>
 8007844:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	603b      	str	r3, [r7, #0]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <prvSwitchTimerLists+0xc0>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1b1      	bne.n	80077d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800786c:	4b06      	ldr	r3, [pc, #24]	; (8007888 <prvSwitchTimerLists+0xc0>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007872:	4b06      	ldr	r3, [pc, #24]	; (800788c <prvSwitchTimerLists+0xc4>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a04      	ldr	r2, [pc, #16]	; (8007888 <prvSwitchTimerLists+0xc0>)
 8007878:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800787a:	4a04      	ldr	r2, [pc, #16]	; (800788c <prvSwitchTimerLists+0xc4>)
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	6013      	str	r3, [r2, #0]
}
 8007880:	bf00      	nop
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000f04 	.word	0x20000f04
 800788c:	20000f08 	.word	0x20000f08

08007890 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007896:	f000 f965 	bl	8007b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800789a:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <prvCheckForValidListAndQueue+0x60>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d120      	bne.n	80078e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078a2:	4814      	ldr	r0, [pc, #80]	; (80078f4 <prvCheckForValidListAndQueue+0x64>)
 80078a4:	f7fe f81e 	bl	80058e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078a8:	4813      	ldr	r0, [pc, #76]	; (80078f8 <prvCheckForValidListAndQueue+0x68>)
 80078aa:	f7fe f81b 	bl	80058e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <prvCheckForValidListAndQueue+0x6c>)
 80078b0:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <prvCheckForValidListAndQueue+0x64>)
 80078b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078b4:	4b12      	ldr	r3, [pc, #72]	; (8007900 <prvCheckForValidListAndQueue+0x70>)
 80078b6:	4a10      	ldr	r2, [pc, #64]	; (80078f8 <prvCheckForValidListAndQueue+0x68>)
 80078b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078ba:	2300      	movs	r3, #0
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <prvCheckForValidListAndQueue+0x74>)
 80078c0:	4a11      	ldr	r2, [pc, #68]	; (8007908 <prvCheckForValidListAndQueue+0x78>)
 80078c2:	2110      	movs	r1, #16
 80078c4:	200a      	movs	r0, #10
 80078c6:	f7fe f929 	bl	8005b1c <xQueueGenericCreateStatic>
 80078ca:	4603      	mov	r3, r0
 80078cc:	4a08      	ldr	r2, [pc, #32]	; (80078f0 <prvCheckForValidListAndQueue+0x60>)
 80078ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078d0:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <prvCheckForValidListAndQueue+0x60>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078d8:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <prvCheckForValidListAndQueue+0x60>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	490b      	ldr	r1, [pc, #44]	; (800790c <prvCheckForValidListAndQueue+0x7c>)
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fd42 	bl	8006368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078e4:	f000 f96e 	bl	8007bc4 <vPortExitCritical>
}
 80078e8:	bf00      	nop
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20000f0c 	.word	0x20000f0c
 80078f4:	20000edc 	.word	0x20000edc
 80078f8:	20000ef0 	.word	0x20000ef0
 80078fc:	20000f04 	.word	0x20000f04
 8007900:	20000f08 	.word	0x20000f08
 8007904:	20000fb8 	.word	0x20000fb8
 8007908:	20000f18 	.word	0x20000f18
 800790c:	0800adfc 	.word	0x0800adfc

08007910 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3b04      	subs	r3, #4
 8007920:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3b04      	subs	r3, #4
 800792e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f023 0201 	bic.w	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3b04      	subs	r3, #4
 800793e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007940:	4a0c      	ldr	r2, [pc, #48]	; (8007974 <pxPortInitialiseStack+0x64>)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3b14      	subs	r3, #20
 800794a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3b04      	subs	r3, #4
 8007956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f06f 0202 	mvn.w	r2, #2
 800795e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3b20      	subs	r3, #32
 8007964:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007966:	68fb      	ldr	r3, [r7, #12]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	08007979 	.word	0x08007979

08007978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007982:	4b12      	ldr	r3, [pc, #72]	; (80079cc <prvTaskExitError+0x54>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d00a      	beq.n	80079a2 <prvTaskExitError+0x2a>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	60fb      	str	r3, [r7, #12]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <prvTaskExitError+0x28>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	60bb      	str	r3, [r7, #8]
}
 80079b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079b6:	bf00      	nop
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0fc      	beq.n	80079b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	2000005c 	.word	0x2000005c

080079d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079d0:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <pxCurrentTCBConst2>)
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	6808      	ldr	r0, [r1, #0]
 80079d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079da:	f380 8809 	msr	PSP, r0
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8811 	msr	BASEPRI, r0
 80079ea:	4770      	bx	lr
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst2>:
 80079f0:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079f8:	4808      	ldr	r0, [pc, #32]	; (8007a1c <prvPortStartFirstTask+0x24>)
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	6800      	ldr	r0, [r0, #0]
 80079fe:	f380 8808 	msr	MSP, r0
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8814 	msr	CONTROL, r0
 8007a0a:	b662      	cpsie	i
 8007a0c:	b661      	cpsie	f
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	df00      	svc	0
 8007a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a1a:	bf00      	nop
 8007a1c:	e000ed08 	.word	0xe000ed08

08007a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a26:	4b46      	ldr	r3, [pc, #280]	; (8007b40 <xPortStartScheduler+0x120>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a46      	ldr	r2, [pc, #280]	; (8007b44 <xPortStartScheduler+0x124>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10a      	bne.n	8007a46 <xPortStartScheduler+0x26>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	613b      	str	r3, [r7, #16]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a46:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <xPortStartScheduler+0x120>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a3f      	ldr	r2, [pc, #252]	; (8007b48 <xPortStartScheduler+0x128>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d10a      	bne.n	8007a66 <xPortStartScheduler+0x46>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	60fb      	str	r3, [r7, #12]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a66:	4b39      	ldr	r3, [pc, #228]	; (8007b4c <xPortStartScheduler+0x12c>)
 8007a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	22ff      	movs	r2, #255	; 0xff
 8007a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	4b31      	ldr	r3, [pc, #196]	; (8007b50 <xPortStartScheduler+0x130>)
 8007a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a8e:	4b31      	ldr	r3, [pc, #196]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a94:	e009      	b.n	8007aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a96:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	4a2d      	ldr	r2, [pc, #180]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b80      	cmp	r3, #128	; 0x80
 8007ab4:	d0ef      	beq.n	8007a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ab6:	4b27      	ldr	r3, [pc, #156]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f1c3 0307 	rsb	r3, r3, #7
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d00a      	beq.n	8007ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60bb      	str	r3, [r7, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ad8:	4b1e      	ldr	r3, [pc, #120]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ae2:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aea:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <xPortStartScheduler+0x134>)
 8007aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007af6:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <xPortStartScheduler+0x138>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a17      	ldr	r2, [pc, #92]	; (8007b58 <xPortStartScheduler+0x138>)
 8007afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b02:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <xPortStartScheduler+0x138>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a14      	ldr	r2, [pc, #80]	; (8007b58 <xPortStartScheduler+0x138>)
 8007b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b0e:	f000 f8dd 	bl	8007ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <xPortStartScheduler+0x13c>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b18:	f000 f8fc 	bl	8007d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b1c:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <xPortStartScheduler+0x140>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <xPortStartScheduler+0x140>)
 8007b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b28:	f7ff ff66 	bl	80079f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b2c:	f7ff f84c 	bl	8006bc8 <vTaskSwitchContext>
	prvTaskExitError();
 8007b30:	f7ff ff22 	bl	8007978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	e000ed00 	.word	0xe000ed00
 8007b44:	410fc271 	.word	0x410fc271
 8007b48:	410fc270 	.word	0x410fc270
 8007b4c:	e000e400 	.word	0xe000e400
 8007b50:	20001008 	.word	0x20001008
 8007b54:	2000100c 	.word	0x2000100c
 8007b58:	e000ed20 	.word	0xe000ed20
 8007b5c:	2000005c 	.word	0x2000005c
 8007b60:	e000ef34 	.word	0xe000ef34

08007b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	607b      	str	r3, [r7, #4]
}
 8007b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b88:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d10f      	bne.n	8007bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <vPortEnterCritical+0x5c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	603b      	str	r3, [r7, #0]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <vPortEnterCritical+0x4a>
	}
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	2000005c 	.word	0x2000005c
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <vPortExitCritical+0x50>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <vPortExitCritical+0x24>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	607b      	str	r3, [r7, #4]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <vPortExitCritical+0x50>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <vPortExitCritical+0x50>)
 8007bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bf2:	4b08      	ldr	r3, [pc, #32]	; (8007c14 <vPortExitCritical+0x50>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <vPortExitCritical+0x42>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	f383 8811 	msr	BASEPRI, r3
}
 8007c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	2000005c 	.word	0x2000005c
	...

08007c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c20:	f3ef 8009 	mrs	r0, PSP
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <pxCurrentTCBConst>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	f01e 0f10 	tst.w	lr, #16
 8007c30:	bf08      	it	eq
 8007c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	6010      	str	r0, [r2, #0]
 8007c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c44:	f380 8811 	msr	BASEPRI, r0
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f7fe ffba 	bl	8006bc8 <vTaskSwitchContext>
 8007c54:	f04f 0000 	mov.w	r0, #0
 8007c58:	f380 8811 	msr	BASEPRI, r0
 8007c5c:	bc09      	pop	{r0, r3}
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	6808      	ldr	r0, [r1, #0]
 8007c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c66:	f01e 0f10 	tst.w	lr, #16
 8007c6a:	bf08      	it	eq
 8007c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c70:	f380 8809 	msr	PSP, r0
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	f3af 8000 	nop.w

08007c80 <pxCurrentTCBConst>:
 8007c80:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop

08007c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
}
 8007ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ca2:	f7fe fed7 	bl	8006a54 <xTaskIncrementTick>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <xPortSysTickHandler+0x40>)
 8007cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f383 8811 	msr	BASEPRI, r3
}
 8007cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <vPortSetupTimerInterrupt+0x34>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <vPortSetupTimerInterrupt+0x38>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <vPortSetupTimerInterrupt+0x3c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <vPortSetupTimerInterrupt+0x40>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	099b      	lsrs	r3, r3, #6
 8007ce8:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <vPortSetupTimerInterrupt+0x44>)
 8007cea:	3b01      	subs	r3, #1
 8007cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cee:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <vPortSetupTimerInterrupt+0x34>)
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	601a      	str	r2, [r3, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	e000e010 	.word	0xe000e010
 8007d04:	e000e018 	.word	0xe000e018
 8007d08:	20000050 	.word	0x20000050
 8007d0c:	10624dd3 	.word	0x10624dd3
 8007d10:	e000e014 	.word	0xe000e014

08007d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d24 <vPortEnableVFP+0x10>
 8007d18:	6801      	ldr	r1, [r0, #0]
 8007d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d1e:	6001      	str	r1, [r0, #0]
 8007d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d22:	bf00      	nop
 8007d24:	e000ed88 	.word	0xe000ed88

08007d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d2e:	f3ef 8305 	mrs	r3, IPSR
 8007d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b0f      	cmp	r3, #15
 8007d38:	d914      	bls.n	8007d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <vPortValidateInterruptPriority+0x70>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d44:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <vPortValidateInterruptPriority+0x74>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	7afa      	ldrb	r2, [r7, #11]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d20a      	bcs.n	8007d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d64:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <vPortValidateInterruptPriority+0x78>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d6c:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <vPortValidateInterruptPriority+0x7c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d90a      	bls.n	8007d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	603b      	str	r3, [r7, #0]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <vPortValidateInterruptPriority+0x60>
	}
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	e000e3f0 	.word	0xe000e3f0
 8007d9c:	20001008 	.word	0x20001008
 8007da0:	e000ed0c 	.word	0xe000ed0c
 8007da4:	2000100c 	.word	0x2000100c

08007da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007db4:	f7fe fd92 	bl	80068dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007db8:	4b5b      	ldr	r3, [pc, #364]	; (8007f28 <pvPortMalloc+0x180>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dc0:	f000 f920 	bl	8008004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dc4:	4b59      	ldr	r3, [pc, #356]	; (8007f2c <pvPortMalloc+0x184>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 8093 	bne.w	8007ef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01d      	beq.n	8007e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007dd8:	2208      	movs	r2, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d014      	beq.n	8007e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f023 0307 	bic.w	r3, r3, #7
 8007df0:	3308      	adds	r3, #8
 8007df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <pvPortMalloc+0x6c>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	617b      	str	r3, [r7, #20]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d06e      	beq.n	8007ef8 <pvPortMalloc+0x150>
 8007e1a:	4b45      	ldr	r3, [pc, #276]	; (8007f30 <pvPortMalloc+0x188>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d869      	bhi.n	8007ef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e24:	4b43      	ldr	r3, [pc, #268]	; (8007f34 <pvPortMalloc+0x18c>)
 8007e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e28:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <pvPortMalloc+0x18c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e2e:	e004      	b.n	8007e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <pvPortMalloc+0xa4>
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f1      	bne.n	8007e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e4c:	4b36      	ldr	r3, [pc, #216]	; (8007f28 <pvPortMalloc+0x180>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d050      	beq.n	8007ef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	2308      	movs	r3, #8
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d91f      	bls.n	8007eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	613b      	str	r3, [r7, #16]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eb2:	69b8      	ldr	r0, [r7, #24]
 8007eb4:	f000 f908 	bl	80080c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007eb8:	4b1d      	ldr	r3, [pc, #116]	; (8007f30 <pvPortMalloc+0x188>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <pvPortMalloc+0x188>)
 8007ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ec6:	4b1a      	ldr	r3, [pc, #104]	; (8007f30 <pvPortMalloc+0x188>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <pvPortMalloc+0x190>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d203      	bcs.n	8007eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ed2:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <pvPortMalloc+0x188>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <pvPortMalloc+0x190>)
 8007ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <pvPortMalloc+0x184>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007eee:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <pvPortMalloc+0x194>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4a11      	ldr	r2, [pc, #68]	; (8007f3c <pvPortMalloc+0x194>)
 8007ef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ef8:	f7fe fcfe 	bl	80068f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <pvPortMalloc+0x174>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	60fb      	str	r3, [r7, #12]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <pvPortMalloc+0x172>
	return pvReturn;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3728      	adds	r7, #40	; 0x28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20004c18 	.word	0x20004c18
 8007f2c:	20004c2c 	.word	0x20004c2c
 8007f30:	20004c1c 	.word	0x20004c1c
 8007f34:	20004c10 	.word	0x20004c10
 8007f38:	20004c20 	.word	0x20004c20
 8007f3c:	20004c24 	.word	0x20004c24

08007f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d04d      	beq.n	8007fee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f52:	2308      	movs	r3, #8
 8007f54:	425b      	negs	r3, r3
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4413      	add	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	4b24      	ldr	r3, [pc, #144]	; (8007ff8 <vPortFree+0xb8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <vPortFree+0x44>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	60fb      	str	r3, [r7, #12]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <vPortFree+0x62>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60bb      	str	r3, [r7, #8]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <vPortFree+0xb8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01e      	beq.n	8007fee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d11a      	bne.n	8007fee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <vPortFree+0xb8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fc8:	f7fe fc88 	bl	80068dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <vPortFree+0xbc>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <vPortFree+0xbc>)
 8007fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fda:	6938      	ldr	r0, [r7, #16]
 8007fdc:	f000 f874 	bl	80080c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fe0:	4b07      	ldr	r3, [pc, #28]	; (8008000 <vPortFree+0xc0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	4a06      	ldr	r2, [pc, #24]	; (8008000 <vPortFree+0xc0>)
 8007fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fea:	f7fe fc85 	bl	80068f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fee:	bf00      	nop
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20004c2c 	.word	0x20004c2c
 8007ffc:	20004c1c 	.word	0x20004c1c
 8008000:	20004c28 	.word	0x20004c28

08008004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800800a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800800e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008010:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <prvHeapInit+0xac>)
 8008012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00c      	beq.n	8008038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3307      	adds	r3, #7
 8008022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	4a1f      	ldr	r2, [pc, #124]	; (80080b0 <prvHeapInit+0xac>)
 8008034:	4413      	add	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800803c:	4a1d      	ldr	r2, [pc, #116]	; (80080b4 <prvHeapInit+0xb0>)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008042:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <prvHeapInit+0xb0>)
 8008044:	2200      	movs	r2, #0
 8008046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	4413      	add	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008050:	2208      	movs	r2, #8
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0307 	bic.w	r3, r3, #7
 800805e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a15      	ldr	r2, [pc, #84]	; (80080b8 <prvHeapInit+0xb4>)
 8008064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008066:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <prvHeapInit+0xb4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <prvHeapInit+0xb4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	1ad2      	subs	r2, r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <prvHeapInit+0xb4>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	4a0a      	ldr	r2, [pc, #40]	; (80080bc <prvHeapInit+0xb8>)
 8008092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <prvHeapInit+0xbc>)
 800809a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800809c:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <prvHeapInit+0xc0>)
 800809e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080a2:	601a      	str	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	20001010 	.word	0x20001010
 80080b4:	20004c10 	.word	0x20004c10
 80080b8:	20004c18 	.word	0x20004c18
 80080bc:	20004c20 	.word	0x20004c20
 80080c0:	20004c1c 	.word	0x20004c1c
 80080c4:	20004c2c 	.word	0x20004c2c

080080c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080d0:	4b28      	ldr	r3, [pc, #160]	; (8008174 <prvInsertBlockIntoFreeList+0xac>)
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	e002      	b.n	80080dc <prvInsertBlockIntoFreeList+0x14>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d8f7      	bhi.n	80080d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4413      	add	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d108      	bne.n	800810a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	441a      	add	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d118      	bne.n	8008150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <prvInsertBlockIntoFreeList+0xb0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d00d      	beq.n	8008146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	e008      	b.n	8008158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <prvInsertBlockIntoFreeList+0xb0>)
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	e003      	b.n	8008158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	429a      	cmp	r2, r3
 800815e:	d002      	beq.n	8008166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008166:	bf00      	nop
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20004c10 	.word	0x20004c10
 8008178:	20004c18 	.word	0x20004c18

0800817c <__errno>:
 800817c:	4b01      	ldr	r3, [pc, #4]	; (8008184 <__errno+0x8>)
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20000060 	.word	0x20000060

08008188 <std>:
 8008188:	2300      	movs	r3, #0
 800818a:	b510      	push	{r4, lr}
 800818c:	4604      	mov	r4, r0
 800818e:	e9c0 3300 	strd	r3, r3, [r0]
 8008192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008196:	6083      	str	r3, [r0, #8]
 8008198:	8181      	strh	r1, [r0, #12]
 800819a:	6643      	str	r3, [r0, #100]	; 0x64
 800819c:	81c2      	strh	r2, [r0, #14]
 800819e:	6183      	str	r3, [r0, #24]
 80081a0:	4619      	mov	r1, r3
 80081a2:	2208      	movs	r2, #8
 80081a4:	305c      	adds	r0, #92	; 0x5c
 80081a6:	f000 f91a 	bl	80083de <memset>
 80081aa:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <std+0x38>)
 80081ac:	6263      	str	r3, [r4, #36]	; 0x24
 80081ae:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <std+0x3c>)
 80081b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <std+0x40>)
 80081b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <std+0x44>)
 80081b8:	6224      	str	r4, [r4, #32]
 80081ba:	6323      	str	r3, [r4, #48]	; 0x30
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	08008f59 	.word	0x08008f59
 80081c4:	08008f7b 	.word	0x08008f7b
 80081c8:	08008fb3 	.word	0x08008fb3
 80081cc:	08008fd7 	.word	0x08008fd7

080081d0 <_cleanup_r>:
 80081d0:	4901      	ldr	r1, [pc, #4]	; (80081d8 <_cleanup_r+0x8>)
 80081d2:	f000 b8af 	b.w	8008334 <_fwalk_reent>
 80081d6:	bf00      	nop
 80081d8:	08009fa5 	.word	0x08009fa5

080081dc <__sfmoreglue>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	1e4a      	subs	r2, r1, #1
 80081e0:	2568      	movs	r5, #104	; 0x68
 80081e2:	4355      	muls	r5, r2
 80081e4:	460e      	mov	r6, r1
 80081e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081ea:	f000 f901 	bl	80083f0 <_malloc_r>
 80081ee:	4604      	mov	r4, r0
 80081f0:	b140      	cbz	r0, 8008204 <__sfmoreglue+0x28>
 80081f2:	2100      	movs	r1, #0
 80081f4:	e9c0 1600 	strd	r1, r6, [r0]
 80081f8:	300c      	adds	r0, #12
 80081fa:	60a0      	str	r0, [r4, #8]
 80081fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008200:	f000 f8ed 	bl	80083de <memset>
 8008204:	4620      	mov	r0, r4
 8008206:	bd70      	pop	{r4, r5, r6, pc}

08008208 <__sfp_lock_acquire>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__sfp_lock_acquire+0x8>)
 800820a:	f000 b8d8 	b.w	80083be <__retarget_lock_acquire_recursive>
 800820e:	bf00      	nop
 8008210:	20005270 	.word	0x20005270

08008214 <__sfp_lock_release>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__sfp_lock_release+0x8>)
 8008216:	f000 b8d3 	b.w	80083c0 <__retarget_lock_release_recursive>
 800821a:	bf00      	nop
 800821c:	20005270 	.word	0x20005270

08008220 <__sinit_lock_acquire>:
 8008220:	4801      	ldr	r0, [pc, #4]	; (8008228 <__sinit_lock_acquire+0x8>)
 8008222:	f000 b8cc 	b.w	80083be <__retarget_lock_acquire_recursive>
 8008226:	bf00      	nop
 8008228:	2000526b 	.word	0x2000526b

0800822c <__sinit_lock_release>:
 800822c:	4801      	ldr	r0, [pc, #4]	; (8008234 <__sinit_lock_release+0x8>)
 800822e:	f000 b8c7 	b.w	80083c0 <__retarget_lock_release_recursive>
 8008232:	bf00      	nop
 8008234:	2000526b 	.word	0x2000526b

08008238 <__sinit>:
 8008238:	b510      	push	{r4, lr}
 800823a:	4604      	mov	r4, r0
 800823c:	f7ff fff0 	bl	8008220 <__sinit_lock_acquire>
 8008240:	69a3      	ldr	r3, [r4, #24]
 8008242:	b11b      	cbz	r3, 800824c <__sinit+0x14>
 8008244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008248:	f7ff bff0 	b.w	800822c <__sinit_lock_release>
 800824c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008250:	6523      	str	r3, [r4, #80]	; 0x50
 8008252:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <__sinit+0x68>)
 8008254:	4a13      	ldr	r2, [pc, #76]	; (80082a4 <__sinit+0x6c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	62a2      	str	r2, [r4, #40]	; 0x28
 800825a:	42a3      	cmp	r3, r4
 800825c:	bf04      	itt	eq
 800825e:	2301      	moveq	r3, #1
 8008260:	61a3      	streq	r3, [r4, #24]
 8008262:	4620      	mov	r0, r4
 8008264:	f000 f820 	bl	80082a8 <__sfp>
 8008268:	6060      	str	r0, [r4, #4]
 800826a:	4620      	mov	r0, r4
 800826c:	f000 f81c 	bl	80082a8 <__sfp>
 8008270:	60a0      	str	r0, [r4, #8]
 8008272:	4620      	mov	r0, r4
 8008274:	f000 f818 	bl	80082a8 <__sfp>
 8008278:	2200      	movs	r2, #0
 800827a:	60e0      	str	r0, [r4, #12]
 800827c:	2104      	movs	r1, #4
 800827e:	6860      	ldr	r0, [r4, #4]
 8008280:	f7ff ff82 	bl	8008188 <std>
 8008284:	68a0      	ldr	r0, [r4, #8]
 8008286:	2201      	movs	r2, #1
 8008288:	2109      	movs	r1, #9
 800828a:	f7ff ff7d 	bl	8008188 <std>
 800828e:	68e0      	ldr	r0, [r4, #12]
 8008290:	2202      	movs	r2, #2
 8008292:	2112      	movs	r1, #18
 8008294:	f7ff ff78 	bl	8008188 <std>
 8008298:	2301      	movs	r3, #1
 800829a:	61a3      	str	r3, [r4, #24]
 800829c:	e7d2      	b.n	8008244 <__sinit+0xc>
 800829e:	bf00      	nop
 80082a0:	0800aee8 	.word	0x0800aee8
 80082a4:	080081d1 	.word	0x080081d1

080082a8 <__sfp>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	4607      	mov	r7, r0
 80082ac:	f7ff ffac 	bl	8008208 <__sfp_lock_acquire>
 80082b0:	4b1e      	ldr	r3, [pc, #120]	; (800832c <__sfp+0x84>)
 80082b2:	681e      	ldr	r6, [r3, #0]
 80082b4:	69b3      	ldr	r3, [r6, #24]
 80082b6:	b913      	cbnz	r3, 80082be <__sfp+0x16>
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff ffbd 	bl	8008238 <__sinit>
 80082be:	3648      	adds	r6, #72	; 0x48
 80082c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	d503      	bpl.n	80082d0 <__sfp+0x28>
 80082c8:	6833      	ldr	r3, [r6, #0]
 80082ca:	b30b      	cbz	r3, 8008310 <__sfp+0x68>
 80082cc:	6836      	ldr	r6, [r6, #0]
 80082ce:	e7f7      	b.n	80082c0 <__sfp+0x18>
 80082d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082d4:	b9d5      	cbnz	r5, 800830c <__sfp+0x64>
 80082d6:	4b16      	ldr	r3, [pc, #88]	; (8008330 <__sfp+0x88>)
 80082d8:	60e3      	str	r3, [r4, #12]
 80082da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082de:	6665      	str	r5, [r4, #100]	; 0x64
 80082e0:	f000 f86c 	bl	80083bc <__retarget_lock_init_recursive>
 80082e4:	f7ff ff96 	bl	8008214 <__sfp_lock_release>
 80082e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082f0:	6025      	str	r5, [r4, #0]
 80082f2:	61a5      	str	r5, [r4, #24]
 80082f4:	2208      	movs	r2, #8
 80082f6:	4629      	mov	r1, r5
 80082f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082fc:	f000 f86f 	bl	80083de <memset>
 8008300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008308:	4620      	mov	r0, r4
 800830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800830c:	3468      	adds	r4, #104	; 0x68
 800830e:	e7d9      	b.n	80082c4 <__sfp+0x1c>
 8008310:	2104      	movs	r1, #4
 8008312:	4638      	mov	r0, r7
 8008314:	f7ff ff62 	bl	80081dc <__sfmoreglue>
 8008318:	4604      	mov	r4, r0
 800831a:	6030      	str	r0, [r6, #0]
 800831c:	2800      	cmp	r0, #0
 800831e:	d1d5      	bne.n	80082cc <__sfp+0x24>
 8008320:	f7ff ff78 	bl	8008214 <__sfp_lock_release>
 8008324:	230c      	movs	r3, #12
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	e7ee      	b.n	8008308 <__sfp+0x60>
 800832a:	bf00      	nop
 800832c:	0800aee8 	.word	0x0800aee8
 8008330:	ffff0001 	.word	0xffff0001

08008334 <_fwalk_reent>:
 8008334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008338:	4606      	mov	r6, r0
 800833a:	4688      	mov	r8, r1
 800833c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008340:	2700      	movs	r7, #0
 8008342:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008346:	f1b9 0901 	subs.w	r9, r9, #1
 800834a:	d505      	bpl.n	8008358 <_fwalk_reent+0x24>
 800834c:	6824      	ldr	r4, [r4, #0]
 800834e:	2c00      	cmp	r4, #0
 8008350:	d1f7      	bne.n	8008342 <_fwalk_reent+0xe>
 8008352:	4638      	mov	r0, r7
 8008354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008358:	89ab      	ldrh	r3, [r5, #12]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d907      	bls.n	800836e <_fwalk_reent+0x3a>
 800835e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008362:	3301      	adds	r3, #1
 8008364:	d003      	beq.n	800836e <_fwalk_reent+0x3a>
 8008366:	4629      	mov	r1, r5
 8008368:	4630      	mov	r0, r6
 800836a:	47c0      	blx	r8
 800836c:	4307      	orrs	r7, r0
 800836e:	3568      	adds	r5, #104	; 0x68
 8008370:	e7e9      	b.n	8008346 <_fwalk_reent+0x12>
	...

08008374 <__libc_init_array>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4d0d      	ldr	r5, [pc, #52]	; (80083ac <__libc_init_array+0x38>)
 8008378:	4c0d      	ldr	r4, [pc, #52]	; (80083b0 <__libc_init_array+0x3c>)
 800837a:	1b64      	subs	r4, r4, r5
 800837c:	10a4      	asrs	r4, r4, #2
 800837e:	2600      	movs	r6, #0
 8008380:	42a6      	cmp	r6, r4
 8008382:	d109      	bne.n	8008398 <__libc_init_array+0x24>
 8008384:	4d0b      	ldr	r5, [pc, #44]	; (80083b4 <__libc_init_array+0x40>)
 8008386:	4c0c      	ldr	r4, [pc, #48]	; (80083b8 <__libc_init_array+0x44>)
 8008388:	f002 fcdc 	bl	800ad44 <_init>
 800838c:	1b64      	subs	r4, r4, r5
 800838e:	10a4      	asrs	r4, r4, #2
 8008390:	2600      	movs	r6, #0
 8008392:	42a6      	cmp	r6, r4
 8008394:	d105      	bne.n	80083a2 <__libc_init_array+0x2e>
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	f855 3b04 	ldr.w	r3, [r5], #4
 800839c:	4798      	blx	r3
 800839e:	3601      	adds	r6, #1
 80083a0:	e7ee      	b.n	8008380 <__libc_init_array+0xc>
 80083a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a6:	4798      	blx	r3
 80083a8:	3601      	adds	r6, #1
 80083aa:	e7f2      	b.n	8008392 <__libc_init_array+0x1e>
 80083ac:	0800b274 	.word	0x0800b274
 80083b0:	0800b274 	.word	0x0800b274
 80083b4:	0800b274 	.word	0x0800b274
 80083b8:	0800b278 	.word	0x0800b278

080083bc <__retarget_lock_init_recursive>:
 80083bc:	4770      	bx	lr

080083be <__retarget_lock_acquire_recursive>:
 80083be:	4770      	bx	lr

080083c0 <__retarget_lock_release_recursive>:
 80083c0:	4770      	bx	lr

080083c2 <memcpy>:
 80083c2:	440a      	add	r2, r1
 80083c4:	4291      	cmp	r1, r2
 80083c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ca:	d100      	bne.n	80083ce <memcpy+0xc>
 80083cc:	4770      	bx	lr
 80083ce:	b510      	push	{r4, lr}
 80083d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d8:	4291      	cmp	r1, r2
 80083da:	d1f9      	bne.n	80083d0 <memcpy+0xe>
 80083dc:	bd10      	pop	{r4, pc}

080083de <memset>:
 80083de:	4402      	add	r2, r0
 80083e0:	4603      	mov	r3, r0
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d100      	bne.n	80083e8 <memset+0xa>
 80083e6:	4770      	bx	lr
 80083e8:	f803 1b01 	strb.w	r1, [r3], #1
 80083ec:	e7f9      	b.n	80083e2 <memset+0x4>
	...

080083f0 <_malloc_r>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	1ccd      	adds	r5, r1, #3
 80083f4:	f025 0503 	bic.w	r5, r5, #3
 80083f8:	3508      	adds	r5, #8
 80083fa:	2d0c      	cmp	r5, #12
 80083fc:	bf38      	it	cc
 80083fe:	250c      	movcc	r5, #12
 8008400:	2d00      	cmp	r5, #0
 8008402:	4606      	mov	r6, r0
 8008404:	db01      	blt.n	800840a <_malloc_r+0x1a>
 8008406:	42a9      	cmp	r1, r5
 8008408:	d903      	bls.n	8008412 <_malloc_r+0x22>
 800840a:	230c      	movs	r3, #12
 800840c:	6033      	str	r3, [r6, #0]
 800840e:	2000      	movs	r0, #0
 8008410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008412:	f001 fe85 	bl	800a120 <__malloc_lock>
 8008416:	4921      	ldr	r1, [pc, #132]	; (800849c <_malloc_r+0xac>)
 8008418:	680a      	ldr	r2, [r1, #0]
 800841a:	4614      	mov	r4, r2
 800841c:	b99c      	cbnz	r4, 8008446 <_malloc_r+0x56>
 800841e:	4f20      	ldr	r7, [pc, #128]	; (80084a0 <_malloc_r+0xb0>)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	b923      	cbnz	r3, 800842e <_malloc_r+0x3e>
 8008424:	4621      	mov	r1, r4
 8008426:	4630      	mov	r0, r6
 8008428:	f000 fd86 	bl	8008f38 <_sbrk_r>
 800842c:	6038      	str	r0, [r7, #0]
 800842e:	4629      	mov	r1, r5
 8008430:	4630      	mov	r0, r6
 8008432:	f000 fd81 	bl	8008f38 <_sbrk_r>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d123      	bne.n	8008482 <_malloc_r+0x92>
 800843a:	230c      	movs	r3, #12
 800843c:	6033      	str	r3, [r6, #0]
 800843e:	4630      	mov	r0, r6
 8008440:	f001 fe74 	bl	800a12c <__malloc_unlock>
 8008444:	e7e3      	b.n	800840e <_malloc_r+0x1e>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	1b5b      	subs	r3, r3, r5
 800844a:	d417      	bmi.n	800847c <_malloc_r+0x8c>
 800844c:	2b0b      	cmp	r3, #11
 800844e:	d903      	bls.n	8008458 <_malloc_r+0x68>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	441c      	add	r4, r3
 8008454:	6025      	str	r5, [r4, #0]
 8008456:	e004      	b.n	8008462 <_malloc_r+0x72>
 8008458:	6863      	ldr	r3, [r4, #4]
 800845a:	42a2      	cmp	r2, r4
 800845c:	bf0c      	ite	eq
 800845e:	600b      	streq	r3, [r1, #0]
 8008460:	6053      	strne	r3, [r2, #4]
 8008462:	4630      	mov	r0, r6
 8008464:	f001 fe62 	bl	800a12c <__malloc_unlock>
 8008468:	f104 000b 	add.w	r0, r4, #11
 800846c:	1d23      	adds	r3, r4, #4
 800846e:	f020 0007 	bic.w	r0, r0, #7
 8008472:	1ac2      	subs	r2, r0, r3
 8008474:	d0cc      	beq.n	8008410 <_malloc_r+0x20>
 8008476:	1a1b      	subs	r3, r3, r0
 8008478:	50a3      	str	r3, [r4, r2]
 800847a:	e7c9      	b.n	8008410 <_malloc_r+0x20>
 800847c:	4622      	mov	r2, r4
 800847e:	6864      	ldr	r4, [r4, #4]
 8008480:	e7cc      	b.n	800841c <_malloc_r+0x2c>
 8008482:	1cc4      	adds	r4, r0, #3
 8008484:	f024 0403 	bic.w	r4, r4, #3
 8008488:	42a0      	cmp	r0, r4
 800848a:	d0e3      	beq.n	8008454 <_malloc_r+0x64>
 800848c:	1a21      	subs	r1, r4, r0
 800848e:	4630      	mov	r0, r6
 8008490:	f000 fd52 	bl	8008f38 <_sbrk_r>
 8008494:	3001      	adds	r0, #1
 8008496:	d1dd      	bne.n	8008454 <_malloc_r+0x64>
 8008498:	e7cf      	b.n	800843a <_malloc_r+0x4a>
 800849a:	bf00      	nop
 800849c:	20004c30 	.word	0x20004c30
 80084a0:	20004c34 	.word	0x20004c34

080084a4 <__cvt>:
 80084a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	ec55 4b10 	vmov	r4, r5, d0
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	460e      	mov	r6, r1
 80084b0:	4619      	mov	r1, r3
 80084b2:	462b      	mov	r3, r5
 80084b4:	bfbb      	ittet	lt
 80084b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084ba:	461d      	movlt	r5, r3
 80084bc:	2300      	movge	r3, #0
 80084be:	232d      	movlt	r3, #45	; 0x2d
 80084c0:	700b      	strb	r3, [r1, #0]
 80084c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084c8:	4691      	mov	r9, r2
 80084ca:	f023 0820 	bic.w	r8, r3, #32
 80084ce:	bfbc      	itt	lt
 80084d0:	4622      	movlt	r2, r4
 80084d2:	4614      	movlt	r4, r2
 80084d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084d8:	d005      	beq.n	80084e6 <__cvt+0x42>
 80084da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084de:	d100      	bne.n	80084e2 <__cvt+0x3e>
 80084e0:	3601      	adds	r6, #1
 80084e2:	2102      	movs	r1, #2
 80084e4:	e000      	b.n	80084e8 <__cvt+0x44>
 80084e6:	2103      	movs	r1, #3
 80084e8:	ab03      	add	r3, sp, #12
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	ab02      	add	r3, sp, #8
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	ec45 4b10 	vmov	d0, r4, r5
 80084f4:	4653      	mov	r3, sl
 80084f6:	4632      	mov	r2, r6
 80084f8:	f000 fee2 	bl	80092c0 <_dtoa_r>
 80084fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008500:	4607      	mov	r7, r0
 8008502:	d102      	bne.n	800850a <__cvt+0x66>
 8008504:	f019 0f01 	tst.w	r9, #1
 8008508:	d022      	beq.n	8008550 <__cvt+0xac>
 800850a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800850e:	eb07 0906 	add.w	r9, r7, r6
 8008512:	d110      	bne.n	8008536 <__cvt+0x92>
 8008514:	783b      	ldrb	r3, [r7, #0]
 8008516:	2b30      	cmp	r3, #48	; 0x30
 8008518:	d10a      	bne.n	8008530 <__cvt+0x8c>
 800851a:	2200      	movs	r2, #0
 800851c:	2300      	movs	r3, #0
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f8 fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008526:	b918      	cbnz	r0, 8008530 <__cvt+0x8c>
 8008528:	f1c6 0601 	rsb	r6, r6, #1
 800852c:	f8ca 6000 	str.w	r6, [sl]
 8008530:	f8da 3000 	ldr.w	r3, [sl]
 8008534:	4499      	add	r9, r3
 8008536:	2200      	movs	r2, #0
 8008538:	2300      	movs	r3, #0
 800853a:	4620      	mov	r0, r4
 800853c:	4629      	mov	r1, r5
 800853e:	f7f8 facb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008542:	b108      	cbz	r0, 8008548 <__cvt+0xa4>
 8008544:	f8cd 900c 	str.w	r9, [sp, #12]
 8008548:	2230      	movs	r2, #48	; 0x30
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	454b      	cmp	r3, r9
 800854e:	d307      	bcc.n	8008560 <__cvt+0xbc>
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008554:	1bdb      	subs	r3, r3, r7
 8008556:	4638      	mov	r0, r7
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	b004      	add	sp, #16
 800855c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008560:	1c59      	adds	r1, r3, #1
 8008562:	9103      	str	r1, [sp, #12]
 8008564:	701a      	strb	r2, [r3, #0]
 8008566:	e7f0      	b.n	800854a <__cvt+0xa6>

08008568 <__exponent>:
 8008568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800856a:	4603      	mov	r3, r0
 800856c:	2900      	cmp	r1, #0
 800856e:	bfb8      	it	lt
 8008570:	4249      	neglt	r1, r1
 8008572:	f803 2b02 	strb.w	r2, [r3], #2
 8008576:	bfb4      	ite	lt
 8008578:	222d      	movlt	r2, #45	; 0x2d
 800857a:	222b      	movge	r2, #43	; 0x2b
 800857c:	2909      	cmp	r1, #9
 800857e:	7042      	strb	r2, [r0, #1]
 8008580:	dd2a      	ble.n	80085d8 <__exponent+0x70>
 8008582:	f10d 0407 	add.w	r4, sp, #7
 8008586:	46a4      	mov	ip, r4
 8008588:	270a      	movs	r7, #10
 800858a:	46a6      	mov	lr, r4
 800858c:	460a      	mov	r2, r1
 800858e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008592:	fb07 1516 	mls	r5, r7, r6, r1
 8008596:	3530      	adds	r5, #48	; 0x30
 8008598:	2a63      	cmp	r2, #99	; 0x63
 800859a:	f104 34ff 	add.w	r4, r4, #4294967295
 800859e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085a2:	4631      	mov	r1, r6
 80085a4:	dcf1      	bgt.n	800858a <__exponent+0x22>
 80085a6:	3130      	adds	r1, #48	; 0x30
 80085a8:	f1ae 0502 	sub.w	r5, lr, #2
 80085ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085b0:	1c44      	adds	r4, r0, #1
 80085b2:	4629      	mov	r1, r5
 80085b4:	4561      	cmp	r1, ip
 80085b6:	d30a      	bcc.n	80085ce <__exponent+0x66>
 80085b8:	f10d 0209 	add.w	r2, sp, #9
 80085bc:	eba2 020e 	sub.w	r2, r2, lr
 80085c0:	4565      	cmp	r5, ip
 80085c2:	bf88      	it	hi
 80085c4:	2200      	movhi	r2, #0
 80085c6:	4413      	add	r3, r2
 80085c8:	1a18      	subs	r0, r3, r0
 80085ca:	b003      	add	sp, #12
 80085cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80085d6:	e7ed      	b.n	80085b4 <__exponent+0x4c>
 80085d8:	2330      	movs	r3, #48	; 0x30
 80085da:	3130      	adds	r1, #48	; 0x30
 80085dc:	7083      	strb	r3, [r0, #2]
 80085de:	70c1      	strb	r1, [r0, #3]
 80085e0:	1d03      	adds	r3, r0, #4
 80085e2:	e7f1      	b.n	80085c8 <__exponent+0x60>

080085e4 <_printf_float>:
 80085e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e8:	ed2d 8b02 	vpush	{d8}
 80085ec:	b08d      	sub	sp, #52	; 0x34
 80085ee:	460c      	mov	r4, r1
 80085f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085f4:	4616      	mov	r6, r2
 80085f6:	461f      	mov	r7, r3
 80085f8:	4605      	mov	r5, r0
 80085fa:	f001 fd0f 	bl	800a01c <_localeconv_r>
 80085fe:	f8d0 a000 	ldr.w	sl, [r0]
 8008602:	4650      	mov	r0, sl
 8008604:	f7f7 fdec 	bl	80001e0 <strlen>
 8008608:	2300      	movs	r3, #0
 800860a:	930a      	str	r3, [sp, #40]	; 0x28
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	9305      	str	r3, [sp, #20]
 8008610:	f8d8 3000 	ldr.w	r3, [r8]
 8008614:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008618:	3307      	adds	r3, #7
 800861a:	f023 0307 	bic.w	r3, r3, #7
 800861e:	f103 0208 	add.w	r2, r3, #8
 8008622:	f8c8 2000 	str.w	r2, [r8]
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800862e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008632:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008636:	9307      	str	r3, [sp, #28]
 8008638:	f8cd 8018 	str.w	r8, [sp, #24]
 800863c:	ee08 0a10 	vmov	s16, r0
 8008640:	4b9f      	ldr	r3, [pc, #636]	; (80088c0 <_printf_float+0x2dc>)
 8008642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008646:	f04f 32ff 	mov.w	r2, #4294967295
 800864a:	f7f8 fa77 	bl	8000b3c <__aeabi_dcmpun>
 800864e:	bb88      	cbnz	r0, 80086b4 <_printf_float+0xd0>
 8008650:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008654:	4b9a      	ldr	r3, [pc, #616]	; (80088c0 <_printf_float+0x2dc>)
 8008656:	f04f 32ff 	mov.w	r2, #4294967295
 800865a:	f7f8 fa51 	bl	8000b00 <__aeabi_dcmple>
 800865e:	bb48      	cbnz	r0, 80086b4 <_printf_float+0xd0>
 8008660:	2200      	movs	r2, #0
 8008662:	2300      	movs	r3, #0
 8008664:	4640      	mov	r0, r8
 8008666:	4649      	mov	r1, r9
 8008668:	f7f8 fa40 	bl	8000aec <__aeabi_dcmplt>
 800866c:	b110      	cbz	r0, 8008674 <_printf_float+0x90>
 800866e:	232d      	movs	r3, #45	; 0x2d
 8008670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008674:	4b93      	ldr	r3, [pc, #588]	; (80088c4 <_printf_float+0x2e0>)
 8008676:	4894      	ldr	r0, [pc, #592]	; (80088c8 <_printf_float+0x2e4>)
 8008678:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800867c:	bf94      	ite	ls
 800867e:	4698      	movls	r8, r3
 8008680:	4680      	movhi	r8, r0
 8008682:	2303      	movs	r3, #3
 8008684:	6123      	str	r3, [r4, #16]
 8008686:	9b05      	ldr	r3, [sp, #20]
 8008688:	f023 0204 	bic.w	r2, r3, #4
 800868c:	6022      	str	r2, [r4, #0]
 800868e:	f04f 0900 	mov.w	r9, #0
 8008692:	9700      	str	r7, [sp, #0]
 8008694:	4633      	mov	r3, r6
 8008696:	aa0b      	add	r2, sp, #44	; 0x2c
 8008698:	4621      	mov	r1, r4
 800869a:	4628      	mov	r0, r5
 800869c:	f000 f9d8 	bl	8008a50 <_printf_common>
 80086a0:	3001      	adds	r0, #1
 80086a2:	f040 8090 	bne.w	80087c6 <_printf_float+0x1e2>
 80086a6:	f04f 30ff 	mov.w	r0, #4294967295
 80086aa:	b00d      	add	sp, #52	; 0x34
 80086ac:	ecbd 8b02 	vpop	{d8}
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	4642      	mov	r2, r8
 80086b6:	464b      	mov	r3, r9
 80086b8:	4640      	mov	r0, r8
 80086ba:	4649      	mov	r1, r9
 80086bc:	f7f8 fa3e 	bl	8000b3c <__aeabi_dcmpun>
 80086c0:	b140      	cbz	r0, 80086d4 <_printf_float+0xf0>
 80086c2:	464b      	mov	r3, r9
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bfbc      	itt	lt
 80086c8:	232d      	movlt	r3, #45	; 0x2d
 80086ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086ce:	487f      	ldr	r0, [pc, #508]	; (80088cc <_printf_float+0x2e8>)
 80086d0:	4b7f      	ldr	r3, [pc, #508]	; (80088d0 <_printf_float+0x2ec>)
 80086d2:	e7d1      	b.n	8008678 <_printf_float+0x94>
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80086da:	9206      	str	r2, [sp, #24]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	d13f      	bne.n	8008760 <_printf_float+0x17c>
 80086e0:	2306      	movs	r3, #6
 80086e2:	6063      	str	r3, [r4, #4]
 80086e4:	9b05      	ldr	r3, [sp, #20]
 80086e6:	6861      	ldr	r1, [r4, #4]
 80086e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80086ec:	2300      	movs	r3, #0
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	ab0a      	add	r3, sp, #40	; 0x28
 80086f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80086f6:	ab09      	add	r3, sp, #36	; 0x24
 80086f8:	ec49 8b10 	vmov	d0, r8, r9
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	6022      	str	r2, [r4, #0]
 8008700:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008704:	4628      	mov	r0, r5
 8008706:	f7ff fecd 	bl	80084a4 <__cvt>
 800870a:	9b06      	ldr	r3, [sp, #24]
 800870c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800870e:	2b47      	cmp	r3, #71	; 0x47
 8008710:	4680      	mov	r8, r0
 8008712:	d108      	bne.n	8008726 <_printf_float+0x142>
 8008714:	1cc8      	adds	r0, r1, #3
 8008716:	db02      	blt.n	800871e <_printf_float+0x13a>
 8008718:	6863      	ldr	r3, [r4, #4]
 800871a:	4299      	cmp	r1, r3
 800871c:	dd41      	ble.n	80087a2 <_printf_float+0x1be>
 800871e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008722:	fa5f fb8b 	uxtb.w	fp, fp
 8008726:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800872a:	d820      	bhi.n	800876e <_printf_float+0x18a>
 800872c:	3901      	subs	r1, #1
 800872e:	465a      	mov	r2, fp
 8008730:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008734:	9109      	str	r1, [sp, #36]	; 0x24
 8008736:	f7ff ff17 	bl	8008568 <__exponent>
 800873a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800873c:	1813      	adds	r3, r2, r0
 800873e:	2a01      	cmp	r2, #1
 8008740:	4681      	mov	r9, r0
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	dc02      	bgt.n	800874c <_printf_float+0x168>
 8008746:	6822      	ldr	r2, [r4, #0]
 8008748:	07d2      	lsls	r2, r2, #31
 800874a:	d501      	bpl.n	8008750 <_printf_float+0x16c>
 800874c:	3301      	adds	r3, #1
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008754:	2b00      	cmp	r3, #0
 8008756:	d09c      	beq.n	8008692 <_printf_float+0xae>
 8008758:	232d      	movs	r3, #45	; 0x2d
 800875a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800875e:	e798      	b.n	8008692 <_printf_float+0xae>
 8008760:	9a06      	ldr	r2, [sp, #24]
 8008762:	2a47      	cmp	r2, #71	; 0x47
 8008764:	d1be      	bne.n	80086e4 <_printf_float+0x100>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1bc      	bne.n	80086e4 <_printf_float+0x100>
 800876a:	2301      	movs	r3, #1
 800876c:	e7b9      	b.n	80086e2 <_printf_float+0xfe>
 800876e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008772:	d118      	bne.n	80087a6 <_printf_float+0x1c2>
 8008774:	2900      	cmp	r1, #0
 8008776:	6863      	ldr	r3, [r4, #4]
 8008778:	dd0b      	ble.n	8008792 <_printf_float+0x1ae>
 800877a:	6121      	str	r1, [r4, #16]
 800877c:	b913      	cbnz	r3, 8008784 <_printf_float+0x1a0>
 800877e:	6822      	ldr	r2, [r4, #0]
 8008780:	07d0      	lsls	r0, r2, #31
 8008782:	d502      	bpl.n	800878a <_printf_float+0x1a6>
 8008784:	3301      	adds	r3, #1
 8008786:	440b      	add	r3, r1
 8008788:	6123      	str	r3, [r4, #16]
 800878a:	65a1      	str	r1, [r4, #88]	; 0x58
 800878c:	f04f 0900 	mov.w	r9, #0
 8008790:	e7de      	b.n	8008750 <_printf_float+0x16c>
 8008792:	b913      	cbnz	r3, 800879a <_printf_float+0x1b6>
 8008794:	6822      	ldr	r2, [r4, #0]
 8008796:	07d2      	lsls	r2, r2, #31
 8008798:	d501      	bpl.n	800879e <_printf_float+0x1ba>
 800879a:	3302      	adds	r3, #2
 800879c:	e7f4      	b.n	8008788 <_printf_float+0x1a4>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7f2      	b.n	8008788 <_printf_float+0x1a4>
 80087a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a8:	4299      	cmp	r1, r3
 80087aa:	db05      	blt.n	80087b8 <_printf_float+0x1d4>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	6121      	str	r1, [r4, #16]
 80087b0:	07d8      	lsls	r0, r3, #31
 80087b2:	d5ea      	bpl.n	800878a <_printf_float+0x1a6>
 80087b4:	1c4b      	adds	r3, r1, #1
 80087b6:	e7e7      	b.n	8008788 <_printf_float+0x1a4>
 80087b8:	2900      	cmp	r1, #0
 80087ba:	bfd4      	ite	le
 80087bc:	f1c1 0202 	rsble	r2, r1, #2
 80087c0:	2201      	movgt	r2, #1
 80087c2:	4413      	add	r3, r2
 80087c4:	e7e0      	b.n	8008788 <_printf_float+0x1a4>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	055a      	lsls	r2, r3, #21
 80087ca:	d407      	bmi.n	80087dc <_printf_float+0x1f8>
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	4642      	mov	r2, r8
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	d12c      	bne.n	8008834 <_printf_float+0x250>
 80087da:	e764      	b.n	80086a6 <_printf_float+0xc2>
 80087dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087e0:	f240 80e0 	bls.w	80089a4 <_printf_float+0x3c0>
 80087e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087e8:	2200      	movs	r2, #0
 80087ea:	2300      	movs	r3, #0
 80087ec:	f7f8 f974 	bl	8000ad8 <__aeabi_dcmpeq>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d034      	beq.n	800885e <_printf_float+0x27a>
 80087f4:	4a37      	ldr	r2, [pc, #220]	; (80088d4 <_printf_float+0x2f0>)
 80087f6:	2301      	movs	r3, #1
 80087f8:	4631      	mov	r1, r6
 80087fa:	4628      	mov	r0, r5
 80087fc:	47b8      	blx	r7
 80087fe:	3001      	adds	r0, #1
 8008800:	f43f af51 	beq.w	80086a6 <_printf_float+0xc2>
 8008804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008808:	429a      	cmp	r2, r3
 800880a:	db02      	blt.n	8008812 <_printf_float+0x22e>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	07d8      	lsls	r0, r3, #31
 8008810:	d510      	bpl.n	8008834 <_printf_float+0x250>
 8008812:	ee18 3a10 	vmov	r3, s16
 8008816:	4652      	mov	r2, sl
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	47b8      	blx	r7
 800881e:	3001      	adds	r0, #1
 8008820:	f43f af41 	beq.w	80086a6 <_printf_float+0xc2>
 8008824:	f04f 0800 	mov.w	r8, #0
 8008828:	f104 091a 	add.w	r9, r4, #26
 800882c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800882e:	3b01      	subs	r3, #1
 8008830:	4543      	cmp	r3, r8
 8008832:	dc09      	bgt.n	8008848 <_printf_float+0x264>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	079b      	lsls	r3, r3, #30
 8008838:	f100 8105 	bmi.w	8008a46 <_printf_float+0x462>
 800883c:	68e0      	ldr	r0, [r4, #12]
 800883e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008840:	4298      	cmp	r0, r3
 8008842:	bfb8      	it	lt
 8008844:	4618      	movlt	r0, r3
 8008846:	e730      	b.n	80086aa <_printf_float+0xc6>
 8008848:	2301      	movs	r3, #1
 800884a:	464a      	mov	r2, r9
 800884c:	4631      	mov	r1, r6
 800884e:	4628      	mov	r0, r5
 8008850:	47b8      	blx	r7
 8008852:	3001      	adds	r0, #1
 8008854:	f43f af27 	beq.w	80086a6 <_printf_float+0xc2>
 8008858:	f108 0801 	add.w	r8, r8, #1
 800885c:	e7e6      	b.n	800882c <_printf_float+0x248>
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	dc39      	bgt.n	80088d8 <_printf_float+0x2f4>
 8008864:	4a1b      	ldr	r2, [pc, #108]	; (80088d4 <_printf_float+0x2f0>)
 8008866:	2301      	movs	r3, #1
 8008868:	4631      	mov	r1, r6
 800886a:	4628      	mov	r0, r5
 800886c:	47b8      	blx	r7
 800886e:	3001      	adds	r0, #1
 8008870:	f43f af19 	beq.w	80086a6 <_printf_float+0xc2>
 8008874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008878:	4313      	orrs	r3, r2
 800887a:	d102      	bne.n	8008882 <_printf_float+0x29e>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	07d9      	lsls	r1, r3, #31
 8008880:	d5d8      	bpl.n	8008834 <_printf_float+0x250>
 8008882:	ee18 3a10 	vmov	r3, s16
 8008886:	4652      	mov	r2, sl
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	47b8      	blx	r7
 800888e:	3001      	adds	r0, #1
 8008890:	f43f af09 	beq.w	80086a6 <_printf_float+0xc2>
 8008894:	f04f 0900 	mov.w	r9, #0
 8008898:	f104 0a1a 	add.w	sl, r4, #26
 800889c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889e:	425b      	negs	r3, r3
 80088a0:	454b      	cmp	r3, r9
 80088a2:	dc01      	bgt.n	80088a8 <_printf_float+0x2c4>
 80088a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a6:	e792      	b.n	80087ce <_printf_float+0x1ea>
 80088a8:	2301      	movs	r3, #1
 80088aa:	4652      	mov	r2, sl
 80088ac:	4631      	mov	r1, r6
 80088ae:	4628      	mov	r0, r5
 80088b0:	47b8      	blx	r7
 80088b2:	3001      	adds	r0, #1
 80088b4:	f43f aef7 	beq.w	80086a6 <_printf_float+0xc2>
 80088b8:	f109 0901 	add.w	r9, r9, #1
 80088bc:	e7ee      	b.n	800889c <_printf_float+0x2b8>
 80088be:	bf00      	nop
 80088c0:	7fefffff 	.word	0x7fefffff
 80088c4:	0800aeec 	.word	0x0800aeec
 80088c8:	0800aef0 	.word	0x0800aef0
 80088cc:	0800aef8 	.word	0x0800aef8
 80088d0:	0800aef4 	.word	0x0800aef4
 80088d4:	0800aefc 	.word	0x0800aefc
 80088d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088dc:	429a      	cmp	r2, r3
 80088de:	bfa8      	it	ge
 80088e0:	461a      	movge	r2, r3
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	4691      	mov	r9, r2
 80088e6:	dc37      	bgt.n	8008958 <_printf_float+0x374>
 80088e8:	f04f 0b00 	mov.w	fp, #0
 80088ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088f0:	f104 021a 	add.w	r2, r4, #26
 80088f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088f6:	9305      	str	r3, [sp, #20]
 80088f8:	eba3 0309 	sub.w	r3, r3, r9
 80088fc:	455b      	cmp	r3, fp
 80088fe:	dc33      	bgt.n	8008968 <_printf_float+0x384>
 8008900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008904:	429a      	cmp	r2, r3
 8008906:	db3b      	blt.n	8008980 <_printf_float+0x39c>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	07da      	lsls	r2, r3, #31
 800890c:	d438      	bmi.n	8008980 <_printf_float+0x39c>
 800890e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	eba2 0901 	sub.w	r9, r2, r1
 800891a:	4599      	cmp	r9, r3
 800891c:	bfa8      	it	ge
 800891e:	4699      	movge	r9, r3
 8008920:	f1b9 0f00 	cmp.w	r9, #0
 8008924:	dc35      	bgt.n	8008992 <_printf_float+0x3ae>
 8008926:	f04f 0800 	mov.w	r8, #0
 800892a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800892e:	f104 0a1a 	add.w	sl, r4, #26
 8008932:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008936:	1a9b      	subs	r3, r3, r2
 8008938:	eba3 0309 	sub.w	r3, r3, r9
 800893c:	4543      	cmp	r3, r8
 800893e:	f77f af79 	ble.w	8008834 <_printf_float+0x250>
 8008942:	2301      	movs	r3, #1
 8008944:	4652      	mov	r2, sl
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	f43f aeaa 	beq.w	80086a6 <_printf_float+0xc2>
 8008952:	f108 0801 	add.w	r8, r8, #1
 8008956:	e7ec      	b.n	8008932 <_printf_float+0x34e>
 8008958:	4613      	mov	r3, r2
 800895a:	4631      	mov	r1, r6
 800895c:	4642      	mov	r2, r8
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	d1c0      	bne.n	80088e8 <_printf_float+0x304>
 8008966:	e69e      	b.n	80086a6 <_printf_float+0xc2>
 8008968:	2301      	movs	r3, #1
 800896a:	4631      	mov	r1, r6
 800896c:	4628      	mov	r0, r5
 800896e:	9205      	str	r2, [sp, #20]
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f ae97 	beq.w	80086a6 <_printf_float+0xc2>
 8008978:	9a05      	ldr	r2, [sp, #20]
 800897a:	f10b 0b01 	add.w	fp, fp, #1
 800897e:	e7b9      	b.n	80088f4 <_printf_float+0x310>
 8008980:	ee18 3a10 	vmov	r3, s16
 8008984:	4652      	mov	r2, sl
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	d1be      	bne.n	800890e <_printf_float+0x32a>
 8008990:	e689      	b.n	80086a6 <_printf_float+0xc2>
 8008992:	9a05      	ldr	r2, [sp, #20]
 8008994:	464b      	mov	r3, r9
 8008996:	4442      	add	r2, r8
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	d1c1      	bne.n	8008926 <_printf_float+0x342>
 80089a2:	e680      	b.n	80086a6 <_printf_float+0xc2>
 80089a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089a6:	2a01      	cmp	r2, #1
 80089a8:	dc01      	bgt.n	80089ae <_printf_float+0x3ca>
 80089aa:	07db      	lsls	r3, r3, #31
 80089ac:	d538      	bpl.n	8008a20 <_printf_float+0x43c>
 80089ae:	2301      	movs	r3, #1
 80089b0:	4642      	mov	r2, r8
 80089b2:	4631      	mov	r1, r6
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b8      	blx	r7
 80089b8:	3001      	adds	r0, #1
 80089ba:	f43f ae74 	beq.w	80086a6 <_printf_float+0xc2>
 80089be:	ee18 3a10 	vmov	r3, s16
 80089c2:	4652      	mov	r2, sl
 80089c4:	4631      	mov	r1, r6
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	f43f ae6b 	beq.w	80086a6 <_printf_float+0xc2>
 80089d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089d4:	2200      	movs	r2, #0
 80089d6:	2300      	movs	r3, #0
 80089d8:	f7f8 f87e 	bl	8000ad8 <__aeabi_dcmpeq>
 80089dc:	b9d8      	cbnz	r0, 8008a16 <_printf_float+0x432>
 80089de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e0:	f108 0201 	add.w	r2, r8, #1
 80089e4:	3b01      	subs	r3, #1
 80089e6:	4631      	mov	r1, r6
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b8      	blx	r7
 80089ec:	3001      	adds	r0, #1
 80089ee:	d10e      	bne.n	8008a0e <_printf_float+0x42a>
 80089f0:	e659      	b.n	80086a6 <_printf_float+0xc2>
 80089f2:	2301      	movs	r3, #1
 80089f4:	4652      	mov	r2, sl
 80089f6:	4631      	mov	r1, r6
 80089f8:	4628      	mov	r0, r5
 80089fa:	47b8      	blx	r7
 80089fc:	3001      	adds	r0, #1
 80089fe:	f43f ae52 	beq.w	80086a6 <_printf_float+0xc2>
 8008a02:	f108 0801 	add.w	r8, r8, #1
 8008a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	4543      	cmp	r3, r8
 8008a0c:	dcf1      	bgt.n	80089f2 <_printf_float+0x40e>
 8008a0e:	464b      	mov	r3, r9
 8008a10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a14:	e6dc      	b.n	80087d0 <_printf_float+0x1ec>
 8008a16:	f04f 0800 	mov.w	r8, #0
 8008a1a:	f104 0a1a 	add.w	sl, r4, #26
 8008a1e:	e7f2      	b.n	8008a06 <_printf_float+0x422>
 8008a20:	2301      	movs	r3, #1
 8008a22:	4642      	mov	r2, r8
 8008a24:	e7df      	b.n	80089e6 <_printf_float+0x402>
 8008a26:	2301      	movs	r3, #1
 8008a28:	464a      	mov	r2, r9
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b8      	blx	r7
 8008a30:	3001      	adds	r0, #1
 8008a32:	f43f ae38 	beq.w	80086a6 <_printf_float+0xc2>
 8008a36:	f108 0801 	add.w	r8, r8, #1
 8008a3a:	68e3      	ldr	r3, [r4, #12]
 8008a3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a3e:	1a5b      	subs	r3, r3, r1
 8008a40:	4543      	cmp	r3, r8
 8008a42:	dcf0      	bgt.n	8008a26 <_printf_float+0x442>
 8008a44:	e6fa      	b.n	800883c <_printf_float+0x258>
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	f104 0919 	add.w	r9, r4, #25
 8008a4e:	e7f4      	b.n	8008a3a <_printf_float+0x456>

08008a50 <_printf_common>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	4616      	mov	r6, r2
 8008a56:	4699      	mov	r9, r3
 8008a58:	688a      	ldr	r2, [r1, #8]
 8008a5a:	690b      	ldr	r3, [r1, #16]
 8008a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bfb8      	it	lt
 8008a64:	4613      	movlt	r3, r2
 8008a66:	6033      	str	r3, [r6, #0]
 8008a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	b10a      	cbz	r2, 8008a76 <_printf_common+0x26>
 8008a72:	3301      	adds	r3, #1
 8008a74:	6033      	str	r3, [r6, #0]
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	0699      	lsls	r1, r3, #26
 8008a7a:	bf42      	ittt	mi
 8008a7c:	6833      	ldrmi	r3, [r6, #0]
 8008a7e:	3302      	addmi	r3, #2
 8008a80:	6033      	strmi	r3, [r6, #0]
 8008a82:	6825      	ldr	r5, [r4, #0]
 8008a84:	f015 0506 	ands.w	r5, r5, #6
 8008a88:	d106      	bne.n	8008a98 <_printf_common+0x48>
 8008a8a:	f104 0a19 	add.w	sl, r4, #25
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	6832      	ldr	r2, [r6, #0]
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	dc26      	bgt.n	8008ae6 <_printf_common+0x96>
 8008a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a9c:	1e13      	subs	r3, r2, #0
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	bf18      	it	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	0692      	lsls	r2, r2, #26
 8008aa6:	d42b      	bmi.n	8008b00 <_printf_common+0xb0>
 8008aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008aac:	4649      	mov	r1, r9
 8008aae:	4638      	mov	r0, r7
 8008ab0:	47c0      	blx	r8
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d01e      	beq.n	8008af4 <_printf_common+0xa4>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	68e5      	ldr	r5, [r4, #12]
 8008aba:	6832      	ldr	r2, [r6, #0]
 8008abc:	f003 0306 	and.w	r3, r3, #6
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	bf08      	it	eq
 8008ac4:	1aad      	subeq	r5, r5, r2
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	6922      	ldr	r2, [r4, #16]
 8008aca:	bf0c      	ite	eq
 8008acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ad0:	2500      	movne	r5, #0
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	bfc4      	itt	gt
 8008ad6:	1a9b      	subgt	r3, r3, r2
 8008ad8:	18ed      	addgt	r5, r5, r3
 8008ada:	2600      	movs	r6, #0
 8008adc:	341a      	adds	r4, #26
 8008ade:	42b5      	cmp	r5, r6
 8008ae0:	d11a      	bne.n	8008b18 <_printf_common+0xc8>
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	e008      	b.n	8008af8 <_printf_common+0xa8>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4652      	mov	r2, sl
 8008aea:	4649      	mov	r1, r9
 8008aec:	4638      	mov	r0, r7
 8008aee:	47c0      	blx	r8
 8008af0:	3001      	adds	r0, #1
 8008af2:	d103      	bne.n	8008afc <_printf_common+0xac>
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afc:	3501      	adds	r5, #1
 8008afe:	e7c6      	b.n	8008a8e <_printf_common+0x3e>
 8008b00:	18e1      	adds	r1, r4, r3
 8008b02:	1c5a      	adds	r2, r3, #1
 8008b04:	2030      	movs	r0, #48	; 0x30
 8008b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b0a:	4422      	add	r2, r4
 8008b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b14:	3302      	adds	r3, #2
 8008b16:	e7c7      	b.n	8008aa8 <_printf_common+0x58>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4622      	mov	r2, r4
 8008b1c:	4649      	mov	r1, r9
 8008b1e:	4638      	mov	r0, r7
 8008b20:	47c0      	blx	r8
 8008b22:	3001      	adds	r0, #1
 8008b24:	d0e6      	beq.n	8008af4 <_printf_common+0xa4>
 8008b26:	3601      	adds	r6, #1
 8008b28:	e7d9      	b.n	8008ade <_printf_common+0x8e>
	...

08008b2c <_printf_i>:
 8008b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	460c      	mov	r4, r1
 8008b32:	4691      	mov	r9, r2
 8008b34:	7e27      	ldrb	r7, [r4, #24]
 8008b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008b38:	2f78      	cmp	r7, #120	; 0x78
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	469a      	mov	sl, r3
 8008b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b42:	d807      	bhi.n	8008b54 <_printf_i+0x28>
 8008b44:	2f62      	cmp	r7, #98	; 0x62
 8008b46:	d80a      	bhi.n	8008b5e <_printf_i+0x32>
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	f000 80d8 	beq.w	8008cfe <_printf_i+0x1d2>
 8008b4e:	2f58      	cmp	r7, #88	; 0x58
 8008b50:	f000 80a3 	beq.w	8008c9a <_printf_i+0x16e>
 8008b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b5c:	e03a      	b.n	8008bd4 <_printf_i+0xa8>
 8008b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b62:	2b15      	cmp	r3, #21
 8008b64:	d8f6      	bhi.n	8008b54 <_printf_i+0x28>
 8008b66:	a001      	add	r0, pc, #4	; (adr r0, 8008b6c <_printf_i+0x40>)
 8008b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008b6c:	08008bc5 	.word	0x08008bc5
 8008b70:	08008bd9 	.word	0x08008bd9
 8008b74:	08008b55 	.word	0x08008b55
 8008b78:	08008b55 	.word	0x08008b55
 8008b7c:	08008b55 	.word	0x08008b55
 8008b80:	08008b55 	.word	0x08008b55
 8008b84:	08008bd9 	.word	0x08008bd9
 8008b88:	08008b55 	.word	0x08008b55
 8008b8c:	08008b55 	.word	0x08008b55
 8008b90:	08008b55 	.word	0x08008b55
 8008b94:	08008b55 	.word	0x08008b55
 8008b98:	08008ce5 	.word	0x08008ce5
 8008b9c:	08008c09 	.word	0x08008c09
 8008ba0:	08008cc7 	.word	0x08008cc7
 8008ba4:	08008b55 	.word	0x08008b55
 8008ba8:	08008b55 	.word	0x08008b55
 8008bac:	08008d07 	.word	0x08008d07
 8008bb0:	08008b55 	.word	0x08008b55
 8008bb4:	08008c09 	.word	0x08008c09
 8008bb8:	08008b55 	.word	0x08008b55
 8008bbc:	08008b55 	.word	0x08008b55
 8008bc0:	08008ccf 	.word	0x08008ccf
 8008bc4:	680b      	ldr	r3, [r1, #0]
 8008bc6:	1d1a      	adds	r2, r3, #4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	600a      	str	r2, [r1, #0]
 8008bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e0a3      	b.n	8008d20 <_printf_i+0x1f4>
 8008bd8:	6825      	ldr	r5, [r4, #0]
 8008bda:	6808      	ldr	r0, [r1, #0]
 8008bdc:	062e      	lsls	r6, r5, #24
 8008bde:	f100 0304 	add.w	r3, r0, #4
 8008be2:	d50a      	bpl.n	8008bfa <_printf_i+0xce>
 8008be4:	6805      	ldr	r5, [r0, #0]
 8008be6:	600b      	str	r3, [r1, #0]
 8008be8:	2d00      	cmp	r5, #0
 8008bea:	da03      	bge.n	8008bf4 <_printf_i+0xc8>
 8008bec:	232d      	movs	r3, #45	; 0x2d
 8008bee:	426d      	negs	r5, r5
 8008bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bf4:	485e      	ldr	r0, [pc, #376]	; (8008d70 <_printf_i+0x244>)
 8008bf6:	230a      	movs	r3, #10
 8008bf8:	e019      	b.n	8008c2e <_printf_i+0x102>
 8008bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008bfe:	6805      	ldr	r5, [r0, #0]
 8008c00:	600b      	str	r3, [r1, #0]
 8008c02:	bf18      	it	ne
 8008c04:	b22d      	sxthne	r5, r5
 8008c06:	e7ef      	b.n	8008be8 <_printf_i+0xbc>
 8008c08:	680b      	ldr	r3, [r1, #0]
 8008c0a:	6825      	ldr	r5, [r4, #0]
 8008c0c:	1d18      	adds	r0, r3, #4
 8008c0e:	6008      	str	r0, [r1, #0]
 8008c10:	0628      	lsls	r0, r5, #24
 8008c12:	d501      	bpl.n	8008c18 <_printf_i+0xec>
 8008c14:	681d      	ldr	r5, [r3, #0]
 8008c16:	e002      	b.n	8008c1e <_printf_i+0xf2>
 8008c18:	0669      	lsls	r1, r5, #25
 8008c1a:	d5fb      	bpl.n	8008c14 <_printf_i+0xe8>
 8008c1c:	881d      	ldrh	r5, [r3, #0]
 8008c1e:	4854      	ldr	r0, [pc, #336]	; (8008d70 <_printf_i+0x244>)
 8008c20:	2f6f      	cmp	r7, #111	; 0x6f
 8008c22:	bf0c      	ite	eq
 8008c24:	2308      	moveq	r3, #8
 8008c26:	230a      	movne	r3, #10
 8008c28:	2100      	movs	r1, #0
 8008c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c2e:	6866      	ldr	r6, [r4, #4]
 8008c30:	60a6      	str	r6, [r4, #8]
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	bfa2      	ittt	ge
 8008c36:	6821      	ldrge	r1, [r4, #0]
 8008c38:	f021 0104 	bicge.w	r1, r1, #4
 8008c3c:	6021      	strge	r1, [r4, #0]
 8008c3e:	b90d      	cbnz	r5, 8008c44 <_printf_i+0x118>
 8008c40:	2e00      	cmp	r6, #0
 8008c42:	d04d      	beq.n	8008ce0 <_printf_i+0x1b4>
 8008c44:	4616      	mov	r6, r2
 8008c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8008c4e:	5dc7      	ldrb	r7, [r0, r7]
 8008c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c54:	462f      	mov	r7, r5
 8008c56:	42bb      	cmp	r3, r7
 8008c58:	460d      	mov	r5, r1
 8008c5a:	d9f4      	bls.n	8008c46 <_printf_i+0x11a>
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d10b      	bne.n	8008c78 <_printf_i+0x14c>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	07df      	lsls	r7, r3, #31
 8008c64:	d508      	bpl.n	8008c78 <_printf_i+0x14c>
 8008c66:	6923      	ldr	r3, [r4, #16]
 8008c68:	6861      	ldr	r1, [r4, #4]
 8008c6a:	4299      	cmp	r1, r3
 8008c6c:	bfde      	ittt	le
 8008c6e:	2330      	movle	r3, #48	; 0x30
 8008c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c78:	1b92      	subs	r2, r2, r6
 8008c7a:	6122      	str	r2, [r4, #16]
 8008c7c:	f8cd a000 	str.w	sl, [sp]
 8008c80:	464b      	mov	r3, r9
 8008c82:	aa03      	add	r2, sp, #12
 8008c84:	4621      	mov	r1, r4
 8008c86:	4640      	mov	r0, r8
 8008c88:	f7ff fee2 	bl	8008a50 <_printf_common>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d14c      	bne.n	8008d2a <_printf_i+0x1fe>
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	b004      	add	sp, #16
 8008c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9a:	4835      	ldr	r0, [pc, #212]	; (8008d70 <_printf_i+0x244>)
 8008c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	680e      	ldr	r6, [r1, #0]
 8008ca4:	061f      	lsls	r7, r3, #24
 8008ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008caa:	600e      	str	r6, [r1, #0]
 8008cac:	d514      	bpl.n	8008cd8 <_printf_i+0x1ac>
 8008cae:	07d9      	lsls	r1, r3, #31
 8008cb0:	bf44      	itt	mi
 8008cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008cb6:	6023      	strmi	r3, [r4, #0]
 8008cb8:	b91d      	cbnz	r5, 8008cc2 <_printf_i+0x196>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	f023 0320 	bic.w	r3, r3, #32
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	2310      	movs	r3, #16
 8008cc4:	e7b0      	b.n	8008c28 <_printf_i+0xfc>
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	f043 0320 	orr.w	r3, r3, #32
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	2378      	movs	r3, #120	; 0x78
 8008cd0:	4828      	ldr	r0, [pc, #160]	; (8008d74 <_printf_i+0x248>)
 8008cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cd6:	e7e3      	b.n	8008ca0 <_printf_i+0x174>
 8008cd8:	065e      	lsls	r6, r3, #25
 8008cda:	bf48      	it	mi
 8008cdc:	b2ad      	uxthmi	r5, r5
 8008cde:	e7e6      	b.n	8008cae <_printf_i+0x182>
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	e7bb      	b.n	8008c5c <_printf_i+0x130>
 8008ce4:	680b      	ldr	r3, [r1, #0]
 8008ce6:	6826      	ldr	r6, [r4, #0]
 8008ce8:	6960      	ldr	r0, [r4, #20]
 8008cea:	1d1d      	adds	r5, r3, #4
 8008cec:	600d      	str	r5, [r1, #0]
 8008cee:	0635      	lsls	r5, r6, #24
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	d501      	bpl.n	8008cf8 <_printf_i+0x1cc>
 8008cf4:	6018      	str	r0, [r3, #0]
 8008cf6:	e002      	b.n	8008cfe <_printf_i+0x1d2>
 8008cf8:	0671      	lsls	r1, r6, #25
 8008cfa:	d5fb      	bpl.n	8008cf4 <_printf_i+0x1c8>
 8008cfc:	8018      	strh	r0, [r3, #0]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	6123      	str	r3, [r4, #16]
 8008d02:	4616      	mov	r6, r2
 8008d04:	e7ba      	b.n	8008c7c <_printf_i+0x150>
 8008d06:	680b      	ldr	r3, [r1, #0]
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	600a      	str	r2, [r1, #0]
 8008d0c:	681e      	ldr	r6, [r3, #0]
 8008d0e:	6862      	ldr	r2, [r4, #4]
 8008d10:	2100      	movs	r1, #0
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7f7 fa6c 	bl	80001f0 <memchr>
 8008d18:	b108      	cbz	r0, 8008d1e <_printf_i+0x1f2>
 8008d1a:	1b80      	subs	r0, r0, r6
 8008d1c:	6060      	str	r0, [r4, #4]
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	2300      	movs	r3, #0
 8008d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d28:	e7a8      	b.n	8008c7c <_printf_i+0x150>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	4649      	mov	r1, r9
 8008d30:	4640      	mov	r0, r8
 8008d32:	47d0      	blx	sl
 8008d34:	3001      	adds	r0, #1
 8008d36:	d0ab      	beq.n	8008c90 <_printf_i+0x164>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	079b      	lsls	r3, r3, #30
 8008d3c:	d413      	bmi.n	8008d66 <_printf_i+0x23a>
 8008d3e:	68e0      	ldr	r0, [r4, #12]
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	4298      	cmp	r0, r3
 8008d44:	bfb8      	it	lt
 8008d46:	4618      	movlt	r0, r3
 8008d48:	e7a4      	b.n	8008c94 <_printf_i+0x168>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4649      	mov	r1, r9
 8008d50:	4640      	mov	r0, r8
 8008d52:	47d0      	blx	sl
 8008d54:	3001      	adds	r0, #1
 8008d56:	d09b      	beq.n	8008c90 <_printf_i+0x164>
 8008d58:	3501      	adds	r5, #1
 8008d5a:	68e3      	ldr	r3, [r4, #12]
 8008d5c:	9903      	ldr	r1, [sp, #12]
 8008d5e:	1a5b      	subs	r3, r3, r1
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	dcf2      	bgt.n	8008d4a <_printf_i+0x21e>
 8008d64:	e7eb      	b.n	8008d3e <_printf_i+0x212>
 8008d66:	2500      	movs	r5, #0
 8008d68:	f104 0619 	add.w	r6, r4, #25
 8008d6c:	e7f5      	b.n	8008d5a <_printf_i+0x22e>
 8008d6e:	bf00      	nop
 8008d70:	0800aefe 	.word	0x0800aefe
 8008d74:	0800af0f 	.word	0x0800af0f

08008d78 <_puts_r>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	460e      	mov	r6, r1
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	b118      	cbz	r0, 8008d88 <_puts_r+0x10>
 8008d80:	6983      	ldr	r3, [r0, #24]
 8008d82:	b90b      	cbnz	r3, 8008d88 <_puts_r+0x10>
 8008d84:	f7ff fa58 	bl	8008238 <__sinit>
 8008d88:	69ab      	ldr	r3, [r5, #24]
 8008d8a:	68ac      	ldr	r4, [r5, #8]
 8008d8c:	b913      	cbnz	r3, 8008d94 <_puts_r+0x1c>
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f7ff fa52 	bl	8008238 <__sinit>
 8008d94:	4b2c      	ldr	r3, [pc, #176]	; (8008e48 <_puts_r+0xd0>)
 8008d96:	429c      	cmp	r4, r3
 8008d98:	d120      	bne.n	8008ddc <_puts_r+0x64>
 8008d9a:	686c      	ldr	r4, [r5, #4]
 8008d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d9e:	07db      	lsls	r3, r3, #31
 8008da0:	d405      	bmi.n	8008dae <_puts_r+0x36>
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	0598      	lsls	r0, r3, #22
 8008da6:	d402      	bmi.n	8008dae <_puts_r+0x36>
 8008da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008daa:	f7ff fb08 	bl	80083be <__retarget_lock_acquire_recursive>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	0719      	lsls	r1, r3, #28
 8008db2:	d51d      	bpl.n	8008df0 <_puts_r+0x78>
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	b1db      	cbz	r3, 8008df0 <_puts_r+0x78>
 8008db8:	3e01      	subs	r6, #1
 8008dba:	68a3      	ldr	r3, [r4, #8]
 8008dbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	60a3      	str	r3, [r4, #8]
 8008dc4:	bb39      	cbnz	r1, 8008e16 <_puts_r+0x9e>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	da38      	bge.n	8008e3c <_puts_r+0xc4>
 8008dca:	4622      	mov	r2, r4
 8008dcc:	210a      	movs	r1, #10
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f000 f906 	bl	8008fe0 <__swbuf_r>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d011      	beq.n	8008dfc <_puts_r+0x84>
 8008dd8:	250a      	movs	r5, #10
 8008dda:	e011      	b.n	8008e00 <_puts_r+0x88>
 8008ddc:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <_puts_r+0xd4>)
 8008dde:	429c      	cmp	r4, r3
 8008de0:	d101      	bne.n	8008de6 <_puts_r+0x6e>
 8008de2:	68ac      	ldr	r4, [r5, #8]
 8008de4:	e7da      	b.n	8008d9c <_puts_r+0x24>
 8008de6:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <_puts_r+0xd8>)
 8008de8:	429c      	cmp	r4, r3
 8008dea:	bf08      	it	eq
 8008dec:	68ec      	ldreq	r4, [r5, #12]
 8008dee:	e7d5      	b.n	8008d9c <_puts_r+0x24>
 8008df0:	4621      	mov	r1, r4
 8008df2:	4628      	mov	r0, r5
 8008df4:	f000 f958 	bl	80090a8 <__swsetup_r>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d0dd      	beq.n	8008db8 <_puts_r+0x40>
 8008dfc:	f04f 35ff 	mov.w	r5, #4294967295
 8008e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e02:	07da      	lsls	r2, r3, #31
 8008e04:	d405      	bmi.n	8008e12 <_puts_r+0x9a>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	059b      	lsls	r3, r3, #22
 8008e0a:	d402      	bmi.n	8008e12 <_puts_r+0x9a>
 8008e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e0e:	f7ff fad7 	bl	80083c0 <__retarget_lock_release_recursive>
 8008e12:	4628      	mov	r0, r5
 8008e14:	bd70      	pop	{r4, r5, r6, pc}
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da04      	bge.n	8008e24 <_puts_r+0xac>
 8008e1a:	69a2      	ldr	r2, [r4, #24]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	dc06      	bgt.n	8008e2e <_puts_r+0xb6>
 8008e20:	290a      	cmp	r1, #10
 8008e22:	d004      	beq.n	8008e2e <_puts_r+0xb6>
 8008e24:	6823      	ldr	r3, [r4, #0]
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	7019      	strb	r1, [r3, #0]
 8008e2c:	e7c5      	b.n	8008dba <_puts_r+0x42>
 8008e2e:	4622      	mov	r2, r4
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 f8d5 	bl	8008fe0 <__swbuf_r>
 8008e36:	3001      	adds	r0, #1
 8008e38:	d1bf      	bne.n	8008dba <_puts_r+0x42>
 8008e3a:	e7df      	b.n	8008dfc <_puts_r+0x84>
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	250a      	movs	r5, #10
 8008e40:	1c5a      	adds	r2, r3, #1
 8008e42:	6022      	str	r2, [r4, #0]
 8008e44:	701d      	strb	r5, [r3, #0]
 8008e46:	e7db      	b.n	8008e00 <_puts_r+0x88>
 8008e48:	0800aea8 	.word	0x0800aea8
 8008e4c:	0800aec8 	.word	0x0800aec8
 8008e50:	0800ae88 	.word	0x0800ae88

08008e54 <puts>:
 8008e54:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <puts+0xc>)
 8008e56:	4601      	mov	r1, r0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f7ff bf8d 	b.w	8008d78 <_puts_r>
 8008e5e:	bf00      	nop
 8008e60:	20000060 	.word	0x20000060

08008e64 <cleanup_glue>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	460c      	mov	r4, r1
 8008e68:	6809      	ldr	r1, [r1, #0]
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	b109      	cbz	r1, 8008e72 <cleanup_glue+0xe>
 8008e6e:	f7ff fff9 	bl	8008e64 <cleanup_glue>
 8008e72:	4621      	mov	r1, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e7a:	f001 bceb 	b.w	800a854 <_free_r>
	...

08008e80 <_reclaim_reent>:
 8008e80:	4b2c      	ldr	r3, [pc, #176]	; (8008f34 <_reclaim_reent+0xb4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4283      	cmp	r3, r0
 8008e86:	b570      	push	{r4, r5, r6, lr}
 8008e88:	4604      	mov	r4, r0
 8008e8a:	d051      	beq.n	8008f30 <_reclaim_reent+0xb0>
 8008e8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e8e:	b143      	cbz	r3, 8008ea2 <_reclaim_reent+0x22>
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d14a      	bne.n	8008f2c <_reclaim_reent+0xac>
 8008e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e98:	6819      	ldr	r1, [r3, #0]
 8008e9a:	b111      	cbz	r1, 8008ea2 <_reclaim_reent+0x22>
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f001 fcd9 	bl	800a854 <_free_r>
 8008ea2:	6961      	ldr	r1, [r4, #20]
 8008ea4:	b111      	cbz	r1, 8008eac <_reclaim_reent+0x2c>
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f001 fcd4 	bl	800a854 <_free_r>
 8008eac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008eae:	b111      	cbz	r1, 8008eb6 <_reclaim_reent+0x36>
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f001 fccf 	bl	800a854 <_free_r>
 8008eb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008eb8:	b111      	cbz	r1, 8008ec0 <_reclaim_reent+0x40>
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f001 fcca 	bl	800a854 <_free_r>
 8008ec0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ec2:	b111      	cbz	r1, 8008eca <_reclaim_reent+0x4a>
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f001 fcc5 	bl	800a854 <_free_r>
 8008eca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008ecc:	b111      	cbz	r1, 8008ed4 <_reclaim_reent+0x54>
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f001 fcc0 	bl	800a854 <_free_r>
 8008ed4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008ed6:	b111      	cbz	r1, 8008ede <_reclaim_reent+0x5e>
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f001 fcbb 	bl	800a854 <_free_r>
 8008ede:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ee0:	b111      	cbz	r1, 8008ee8 <_reclaim_reent+0x68>
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f001 fcb6 	bl	800a854 <_free_r>
 8008ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eea:	b111      	cbz	r1, 8008ef2 <_reclaim_reent+0x72>
 8008eec:	4620      	mov	r0, r4
 8008eee:	f001 fcb1 	bl	800a854 <_free_r>
 8008ef2:	69a3      	ldr	r3, [r4, #24]
 8008ef4:	b1e3      	cbz	r3, 8008f30 <_reclaim_reent+0xb0>
 8008ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ef8:	4620      	mov	r0, r4
 8008efa:	4798      	blx	r3
 8008efc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008efe:	b1b9      	cbz	r1, 8008f30 <_reclaim_reent+0xb0>
 8008f00:	4620      	mov	r0, r4
 8008f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f06:	f7ff bfad 	b.w	8008e64 <cleanup_glue>
 8008f0a:	5949      	ldr	r1, [r1, r5]
 8008f0c:	b941      	cbnz	r1, 8008f20 <_reclaim_reent+0xa0>
 8008f0e:	3504      	adds	r5, #4
 8008f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f12:	2d80      	cmp	r5, #128	; 0x80
 8008f14:	68d9      	ldr	r1, [r3, #12]
 8008f16:	d1f8      	bne.n	8008f0a <_reclaim_reent+0x8a>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f001 fc9b 	bl	800a854 <_free_r>
 8008f1e:	e7ba      	b.n	8008e96 <_reclaim_reent+0x16>
 8008f20:	680e      	ldr	r6, [r1, #0]
 8008f22:	4620      	mov	r0, r4
 8008f24:	f001 fc96 	bl	800a854 <_free_r>
 8008f28:	4631      	mov	r1, r6
 8008f2a:	e7ef      	b.n	8008f0c <_reclaim_reent+0x8c>
 8008f2c:	2500      	movs	r5, #0
 8008f2e:	e7ef      	b.n	8008f10 <_reclaim_reent+0x90>
 8008f30:	bd70      	pop	{r4, r5, r6, pc}
 8008f32:	bf00      	nop
 8008f34:	20000060 	.word	0x20000060

08008f38 <_sbrk_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d06      	ldr	r5, [pc, #24]	; (8008f54 <_sbrk_r+0x1c>)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7f9 fa34 	bl	80023b0 <_sbrk>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_sbrk_r+0x1a>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_sbrk_r+0x1a>
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	20005274 	.word	0x20005274

08008f58 <__sread>:
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	460c      	mov	r4, r1
 8008f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f60:	f001 fe22 	bl	800aba8 <_read_r>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	bfab      	itete	ge
 8008f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008f6c:	181b      	addge	r3, r3, r0
 8008f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f72:	bfac      	ite	ge
 8008f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f76:	81a3      	strhlt	r3, [r4, #12]
 8008f78:	bd10      	pop	{r4, pc}

08008f7a <__swrite>:
 8008f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7e:	461f      	mov	r7, r3
 8008f80:	898b      	ldrh	r3, [r1, #12]
 8008f82:	05db      	lsls	r3, r3, #23
 8008f84:	4605      	mov	r5, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	4616      	mov	r6, r2
 8008f8a:	d505      	bpl.n	8008f98 <__swrite+0x1e>
 8008f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f90:	2302      	movs	r3, #2
 8008f92:	2200      	movs	r2, #0
 8008f94:	f001 f846 	bl	800a024 <_lseek_r>
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fa2:	81a3      	strh	r3, [r4, #12]
 8008fa4:	4632      	mov	r2, r6
 8008fa6:	463b      	mov	r3, r7
 8008fa8:	4628      	mov	r0, r5
 8008faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fae:	f000 b869 	b.w	8009084 <_write_r>

08008fb2 <__sseek>:
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fba:	f001 f833 	bl	800a024 <_lseek_r>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	bf15      	itete	ne
 8008fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008fce:	81a3      	strheq	r3, [r4, #12]
 8008fd0:	bf18      	it	ne
 8008fd2:	81a3      	strhne	r3, [r4, #12]
 8008fd4:	bd10      	pop	{r4, pc}

08008fd6 <__sclose>:
 8008fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fda:	f000 b8d3 	b.w	8009184 <_close_r>
	...

08008fe0 <__swbuf_r>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	460e      	mov	r6, r1
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	b118      	cbz	r0, 8008ff2 <__swbuf_r+0x12>
 8008fea:	6983      	ldr	r3, [r0, #24]
 8008fec:	b90b      	cbnz	r3, 8008ff2 <__swbuf_r+0x12>
 8008fee:	f7ff f923 	bl	8008238 <__sinit>
 8008ff2:	4b21      	ldr	r3, [pc, #132]	; (8009078 <__swbuf_r+0x98>)
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	d12b      	bne.n	8009050 <__swbuf_r+0x70>
 8008ff8:	686c      	ldr	r4, [r5, #4]
 8008ffa:	69a3      	ldr	r3, [r4, #24]
 8008ffc:	60a3      	str	r3, [r4, #8]
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	071a      	lsls	r2, r3, #28
 8009002:	d52f      	bpl.n	8009064 <__swbuf_r+0x84>
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	b36b      	cbz	r3, 8009064 <__swbuf_r+0x84>
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	6820      	ldr	r0, [r4, #0]
 800900c:	1ac0      	subs	r0, r0, r3
 800900e:	6963      	ldr	r3, [r4, #20]
 8009010:	b2f6      	uxtb	r6, r6
 8009012:	4283      	cmp	r3, r0
 8009014:	4637      	mov	r7, r6
 8009016:	dc04      	bgt.n	8009022 <__swbuf_r+0x42>
 8009018:	4621      	mov	r1, r4
 800901a:	4628      	mov	r0, r5
 800901c:	f000 ffc2 	bl	8009fa4 <_fflush_r>
 8009020:	bb30      	cbnz	r0, 8009070 <__swbuf_r+0x90>
 8009022:	68a3      	ldr	r3, [r4, #8]
 8009024:	3b01      	subs	r3, #1
 8009026:	60a3      	str	r3, [r4, #8]
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	6022      	str	r2, [r4, #0]
 800902e:	701e      	strb	r6, [r3, #0]
 8009030:	6963      	ldr	r3, [r4, #20]
 8009032:	3001      	adds	r0, #1
 8009034:	4283      	cmp	r3, r0
 8009036:	d004      	beq.n	8009042 <__swbuf_r+0x62>
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	07db      	lsls	r3, r3, #31
 800903c:	d506      	bpl.n	800904c <__swbuf_r+0x6c>
 800903e:	2e0a      	cmp	r6, #10
 8009040:	d104      	bne.n	800904c <__swbuf_r+0x6c>
 8009042:	4621      	mov	r1, r4
 8009044:	4628      	mov	r0, r5
 8009046:	f000 ffad 	bl	8009fa4 <_fflush_r>
 800904a:	b988      	cbnz	r0, 8009070 <__swbuf_r+0x90>
 800904c:	4638      	mov	r0, r7
 800904e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <__swbuf_r+0x9c>)
 8009052:	429c      	cmp	r4, r3
 8009054:	d101      	bne.n	800905a <__swbuf_r+0x7a>
 8009056:	68ac      	ldr	r4, [r5, #8]
 8009058:	e7cf      	b.n	8008ffa <__swbuf_r+0x1a>
 800905a:	4b09      	ldr	r3, [pc, #36]	; (8009080 <__swbuf_r+0xa0>)
 800905c:	429c      	cmp	r4, r3
 800905e:	bf08      	it	eq
 8009060:	68ec      	ldreq	r4, [r5, #12]
 8009062:	e7ca      	b.n	8008ffa <__swbuf_r+0x1a>
 8009064:	4621      	mov	r1, r4
 8009066:	4628      	mov	r0, r5
 8009068:	f000 f81e 	bl	80090a8 <__swsetup_r>
 800906c:	2800      	cmp	r0, #0
 800906e:	d0cb      	beq.n	8009008 <__swbuf_r+0x28>
 8009070:	f04f 37ff 	mov.w	r7, #4294967295
 8009074:	e7ea      	b.n	800904c <__swbuf_r+0x6c>
 8009076:	bf00      	nop
 8009078:	0800aea8 	.word	0x0800aea8
 800907c:	0800aec8 	.word	0x0800aec8
 8009080:	0800ae88 	.word	0x0800ae88

08009084 <_write_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d07      	ldr	r5, [pc, #28]	; (80090a4 <_write_r+0x20>)
 8009088:	4604      	mov	r4, r0
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	2200      	movs	r2, #0
 8009090:	602a      	str	r2, [r5, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	f7f9 f93b 	bl	800230e <_write>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_write_r+0x1e>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_write_r+0x1e>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20005274 	.word	0x20005274

080090a8 <__swsetup_r>:
 80090a8:	4b32      	ldr	r3, [pc, #200]	; (8009174 <__swsetup_r+0xcc>)
 80090aa:	b570      	push	{r4, r5, r6, lr}
 80090ac:	681d      	ldr	r5, [r3, #0]
 80090ae:	4606      	mov	r6, r0
 80090b0:	460c      	mov	r4, r1
 80090b2:	b125      	cbz	r5, 80090be <__swsetup_r+0x16>
 80090b4:	69ab      	ldr	r3, [r5, #24]
 80090b6:	b913      	cbnz	r3, 80090be <__swsetup_r+0x16>
 80090b8:	4628      	mov	r0, r5
 80090ba:	f7ff f8bd 	bl	8008238 <__sinit>
 80090be:	4b2e      	ldr	r3, [pc, #184]	; (8009178 <__swsetup_r+0xd0>)
 80090c0:	429c      	cmp	r4, r3
 80090c2:	d10f      	bne.n	80090e4 <__swsetup_r+0x3c>
 80090c4:	686c      	ldr	r4, [r5, #4]
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090cc:	0719      	lsls	r1, r3, #28
 80090ce:	d42c      	bmi.n	800912a <__swsetup_r+0x82>
 80090d0:	06dd      	lsls	r5, r3, #27
 80090d2:	d411      	bmi.n	80090f8 <__swsetup_r+0x50>
 80090d4:	2309      	movs	r3, #9
 80090d6:	6033      	str	r3, [r6, #0]
 80090d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	e03e      	b.n	8009162 <__swsetup_r+0xba>
 80090e4:	4b25      	ldr	r3, [pc, #148]	; (800917c <__swsetup_r+0xd4>)
 80090e6:	429c      	cmp	r4, r3
 80090e8:	d101      	bne.n	80090ee <__swsetup_r+0x46>
 80090ea:	68ac      	ldr	r4, [r5, #8]
 80090ec:	e7eb      	b.n	80090c6 <__swsetup_r+0x1e>
 80090ee:	4b24      	ldr	r3, [pc, #144]	; (8009180 <__swsetup_r+0xd8>)
 80090f0:	429c      	cmp	r4, r3
 80090f2:	bf08      	it	eq
 80090f4:	68ec      	ldreq	r4, [r5, #12]
 80090f6:	e7e6      	b.n	80090c6 <__swsetup_r+0x1e>
 80090f8:	0758      	lsls	r0, r3, #29
 80090fa:	d512      	bpl.n	8009122 <__swsetup_r+0x7a>
 80090fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090fe:	b141      	cbz	r1, 8009112 <__swsetup_r+0x6a>
 8009100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009104:	4299      	cmp	r1, r3
 8009106:	d002      	beq.n	800910e <__swsetup_r+0x66>
 8009108:	4630      	mov	r0, r6
 800910a:	f001 fba3 	bl	800a854 <_free_r>
 800910e:	2300      	movs	r3, #0
 8009110:	6363      	str	r3, [r4, #52]	; 0x34
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009118:	81a3      	strh	r3, [r4, #12]
 800911a:	2300      	movs	r3, #0
 800911c:	6063      	str	r3, [r4, #4]
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f043 0308 	orr.w	r3, r3, #8
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	6923      	ldr	r3, [r4, #16]
 800912c:	b94b      	cbnz	r3, 8009142 <__swsetup_r+0x9a>
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009138:	d003      	beq.n	8009142 <__swsetup_r+0x9a>
 800913a:	4621      	mov	r1, r4
 800913c:	4630      	mov	r0, r6
 800913e:	f000 ffa7 	bl	800a090 <__smakebuf_r>
 8009142:	89a0      	ldrh	r0, [r4, #12]
 8009144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009148:	f010 0301 	ands.w	r3, r0, #1
 800914c:	d00a      	beq.n	8009164 <__swsetup_r+0xbc>
 800914e:	2300      	movs	r3, #0
 8009150:	60a3      	str	r3, [r4, #8]
 8009152:	6963      	ldr	r3, [r4, #20]
 8009154:	425b      	negs	r3, r3
 8009156:	61a3      	str	r3, [r4, #24]
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	b943      	cbnz	r3, 800916e <__swsetup_r+0xc6>
 800915c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009160:	d1ba      	bne.n	80090d8 <__swsetup_r+0x30>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	0781      	lsls	r1, r0, #30
 8009166:	bf58      	it	pl
 8009168:	6963      	ldrpl	r3, [r4, #20]
 800916a:	60a3      	str	r3, [r4, #8]
 800916c:	e7f4      	b.n	8009158 <__swsetup_r+0xb0>
 800916e:	2000      	movs	r0, #0
 8009170:	e7f7      	b.n	8009162 <__swsetup_r+0xba>
 8009172:	bf00      	nop
 8009174:	20000060 	.word	0x20000060
 8009178:	0800aea8 	.word	0x0800aea8
 800917c:	0800aec8 	.word	0x0800aec8
 8009180:	0800ae88 	.word	0x0800ae88

08009184 <_close_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4d06      	ldr	r5, [pc, #24]	; (80091a0 <_close_r+0x1c>)
 8009188:	2300      	movs	r3, #0
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	602b      	str	r3, [r5, #0]
 8009190:	f7f9 f8d9 	bl	8002346 <_close>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_close_r+0x1a>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_close_r+0x1a>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	20005274 	.word	0x20005274

080091a4 <quorem>:
 80091a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	6903      	ldr	r3, [r0, #16]
 80091aa:	690c      	ldr	r4, [r1, #16]
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	4607      	mov	r7, r0
 80091b0:	f2c0 8081 	blt.w	80092b6 <quorem+0x112>
 80091b4:	3c01      	subs	r4, #1
 80091b6:	f101 0814 	add.w	r8, r1, #20
 80091ba:	f100 0514 	add.w	r5, r0, #20
 80091be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091cc:	3301      	adds	r3, #1
 80091ce:	429a      	cmp	r2, r3
 80091d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80091d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80091dc:	d331      	bcc.n	8009242 <quorem+0x9e>
 80091de:	f04f 0e00 	mov.w	lr, #0
 80091e2:	4640      	mov	r0, r8
 80091e4:	46ac      	mov	ip, r5
 80091e6:	46f2      	mov	sl, lr
 80091e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80091ec:	b293      	uxth	r3, r2
 80091ee:	fb06 e303 	mla	r3, r6, r3, lr
 80091f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	ebaa 0303 	sub.w	r3, sl, r3
 80091fc:	0c12      	lsrs	r2, r2, #16
 80091fe:	f8dc a000 	ldr.w	sl, [ip]
 8009202:	fb06 e202 	mla	r2, r6, r2, lr
 8009206:	fa13 f38a 	uxtah	r3, r3, sl
 800920a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800920e:	fa1f fa82 	uxth.w	sl, r2
 8009212:	f8dc 2000 	ldr.w	r2, [ip]
 8009216:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800921a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800921e:	b29b      	uxth	r3, r3
 8009220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009224:	4581      	cmp	r9, r0
 8009226:	f84c 3b04 	str.w	r3, [ip], #4
 800922a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800922e:	d2db      	bcs.n	80091e8 <quorem+0x44>
 8009230:	f855 300b 	ldr.w	r3, [r5, fp]
 8009234:	b92b      	cbnz	r3, 8009242 <quorem+0x9e>
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	3b04      	subs	r3, #4
 800923a:	429d      	cmp	r5, r3
 800923c:	461a      	mov	r2, r3
 800923e:	d32e      	bcc.n	800929e <quorem+0xfa>
 8009240:	613c      	str	r4, [r7, #16]
 8009242:	4638      	mov	r0, r7
 8009244:	f001 f9f6 	bl	800a634 <__mcmp>
 8009248:	2800      	cmp	r0, #0
 800924a:	db24      	blt.n	8009296 <quorem+0xf2>
 800924c:	3601      	adds	r6, #1
 800924e:	4628      	mov	r0, r5
 8009250:	f04f 0c00 	mov.w	ip, #0
 8009254:	f858 2b04 	ldr.w	r2, [r8], #4
 8009258:	f8d0 e000 	ldr.w	lr, [r0]
 800925c:	b293      	uxth	r3, r2
 800925e:	ebac 0303 	sub.w	r3, ip, r3
 8009262:	0c12      	lsrs	r2, r2, #16
 8009264:	fa13 f38e 	uxtah	r3, r3, lr
 8009268:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800926c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009270:	b29b      	uxth	r3, r3
 8009272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009276:	45c1      	cmp	r9, r8
 8009278:	f840 3b04 	str.w	r3, [r0], #4
 800927c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009280:	d2e8      	bcs.n	8009254 <quorem+0xb0>
 8009282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800928a:	b922      	cbnz	r2, 8009296 <quorem+0xf2>
 800928c:	3b04      	subs	r3, #4
 800928e:	429d      	cmp	r5, r3
 8009290:	461a      	mov	r2, r3
 8009292:	d30a      	bcc.n	80092aa <quorem+0x106>
 8009294:	613c      	str	r4, [r7, #16]
 8009296:	4630      	mov	r0, r6
 8009298:	b003      	add	sp, #12
 800929a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929e:	6812      	ldr	r2, [r2, #0]
 80092a0:	3b04      	subs	r3, #4
 80092a2:	2a00      	cmp	r2, #0
 80092a4:	d1cc      	bne.n	8009240 <quorem+0x9c>
 80092a6:	3c01      	subs	r4, #1
 80092a8:	e7c7      	b.n	800923a <quorem+0x96>
 80092aa:	6812      	ldr	r2, [r2, #0]
 80092ac:	3b04      	subs	r3, #4
 80092ae:	2a00      	cmp	r2, #0
 80092b0:	d1f0      	bne.n	8009294 <quorem+0xf0>
 80092b2:	3c01      	subs	r4, #1
 80092b4:	e7eb      	b.n	800928e <quorem+0xea>
 80092b6:	2000      	movs	r0, #0
 80092b8:	e7ee      	b.n	8009298 <quorem+0xf4>
 80092ba:	0000      	movs	r0, r0
 80092bc:	0000      	movs	r0, r0
	...

080092c0 <_dtoa_r>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	ed2d 8b02 	vpush	{d8}
 80092c8:	ec57 6b10 	vmov	r6, r7, d0
 80092cc:	b095      	sub	sp, #84	; 0x54
 80092ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80092d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80092d4:	9105      	str	r1, [sp, #20]
 80092d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80092da:	4604      	mov	r4, r0
 80092dc:	9209      	str	r2, [sp, #36]	; 0x24
 80092de:	930f      	str	r3, [sp, #60]	; 0x3c
 80092e0:	b975      	cbnz	r5, 8009300 <_dtoa_r+0x40>
 80092e2:	2010      	movs	r0, #16
 80092e4:	f000 ff14 	bl	800a110 <malloc>
 80092e8:	4602      	mov	r2, r0
 80092ea:	6260      	str	r0, [r4, #36]	; 0x24
 80092ec:	b920      	cbnz	r0, 80092f8 <_dtoa_r+0x38>
 80092ee:	4bb2      	ldr	r3, [pc, #712]	; (80095b8 <_dtoa_r+0x2f8>)
 80092f0:	21ea      	movs	r1, #234	; 0xea
 80092f2:	48b2      	ldr	r0, [pc, #712]	; (80095bc <_dtoa_r+0x2fc>)
 80092f4:	f001 fc6a 	bl	800abcc <__assert_func>
 80092f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092fc:	6005      	str	r5, [r0, #0]
 80092fe:	60c5      	str	r5, [r0, #12]
 8009300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009302:	6819      	ldr	r1, [r3, #0]
 8009304:	b151      	cbz	r1, 800931c <_dtoa_r+0x5c>
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	604a      	str	r2, [r1, #4]
 800930a:	2301      	movs	r3, #1
 800930c:	4093      	lsls	r3, r2
 800930e:	608b      	str	r3, [r1, #8]
 8009310:	4620      	mov	r0, r4
 8009312:	f000 ff51 	bl	800a1b8 <_Bfree>
 8009316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	1e3b      	subs	r3, r7, #0
 800931e:	bfb9      	ittee	lt
 8009320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009324:	9303      	strlt	r3, [sp, #12]
 8009326:	2300      	movge	r3, #0
 8009328:	f8c8 3000 	strge.w	r3, [r8]
 800932c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009330:	4ba3      	ldr	r3, [pc, #652]	; (80095c0 <_dtoa_r+0x300>)
 8009332:	bfbc      	itt	lt
 8009334:	2201      	movlt	r2, #1
 8009336:	f8c8 2000 	strlt.w	r2, [r8]
 800933a:	ea33 0309 	bics.w	r3, r3, r9
 800933e:	d11b      	bne.n	8009378 <_dtoa_r+0xb8>
 8009340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009342:	f242 730f 	movw	r3, #9999	; 0x270f
 8009346:	6013      	str	r3, [r2, #0]
 8009348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800934c:	4333      	orrs	r3, r6
 800934e:	f000 857a 	beq.w	8009e46 <_dtoa_r+0xb86>
 8009352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009354:	b963      	cbnz	r3, 8009370 <_dtoa_r+0xb0>
 8009356:	4b9b      	ldr	r3, [pc, #620]	; (80095c4 <_dtoa_r+0x304>)
 8009358:	e024      	b.n	80093a4 <_dtoa_r+0xe4>
 800935a:	4b9b      	ldr	r3, [pc, #620]	; (80095c8 <_dtoa_r+0x308>)
 800935c:	9300      	str	r3, [sp, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	9800      	ldr	r0, [sp, #0]
 8009366:	b015      	add	sp, #84	; 0x54
 8009368:	ecbd 8b02 	vpop	{d8}
 800936c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009370:	4b94      	ldr	r3, [pc, #592]	; (80095c4 <_dtoa_r+0x304>)
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	3303      	adds	r3, #3
 8009376:	e7f3      	b.n	8009360 <_dtoa_r+0xa0>
 8009378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800937c:	2200      	movs	r2, #0
 800937e:	ec51 0b17 	vmov	r0, r1, d7
 8009382:	2300      	movs	r3, #0
 8009384:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009388:	f7f7 fba6 	bl	8000ad8 <__aeabi_dcmpeq>
 800938c:	4680      	mov	r8, r0
 800938e:	b158      	cbz	r0, 80093a8 <_dtoa_r+0xe8>
 8009390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009392:	2301      	movs	r3, #1
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8551 	beq.w	8009e40 <_dtoa_r+0xb80>
 800939e:	488b      	ldr	r0, [pc, #556]	; (80095cc <_dtoa_r+0x30c>)
 80093a0:	6018      	str	r0, [r3, #0]
 80093a2:	1e43      	subs	r3, r0, #1
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	e7dd      	b.n	8009364 <_dtoa_r+0xa4>
 80093a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80093ac:	aa12      	add	r2, sp, #72	; 0x48
 80093ae:	a913      	add	r1, sp, #76	; 0x4c
 80093b0:	4620      	mov	r0, r4
 80093b2:	f001 f9e3 	bl	800a77c <__d2b>
 80093b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093ba:	4683      	mov	fp, r0
 80093bc:	2d00      	cmp	r5, #0
 80093be:	d07c      	beq.n	80094ba <_dtoa_r+0x1fa>
 80093c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80093c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80093ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80093d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80093d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80093da:	4b7d      	ldr	r3, [pc, #500]	; (80095d0 <_dtoa_r+0x310>)
 80093dc:	2200      	movs	r2, #0
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f6 ff59 	bl	8000298 <__aeabi_dsub>
 80093e6:	a36e      	add	r3, pc, #440	; (adr r3, 80095a0 <_dtoa_r+0x2e0>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f7 f90c 	bl	8000608 <__aeabi_dmul>
 80093f0:	a36d      	add	r3, pc, #436	; (adr r3, 80095a8 <_dtoa_r+0x2e8>)
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f7f6 ff51 	bl	800029c <__adddf3>
 80093fa:	4606      	mov	r6, r0
 80093fc:	4628      	mov	r0, r5
 80093fe:	460f      	mov	r7, r1
 8009400:	f7f7 f898 	bl	8000534 <__aeabi_i2d>
 8009404:	a36a      	add	r3, pc, #424	; (adr r3, 80095b0 <_dtoa_r+0x2f0>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f7f7 f8fd 	bl	8000608 <__aeabi_dmul>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4630      	mov	r0, r6
 8009414:	4639      	mov	r1, r7
 8009416:	f7f6 ff41 	bl	800029c <__adddf3>
 800941a:	4606      	mov	r6, r0
 800941c:	460f      	mov	r7, r1
 800941e:	f7f7 fba3 	bl	8000b68 <__aeabi_d2iz>
 8009422:	2200      	movs	r2, #0
 8009424:	4682      	mov	sl, r0
 8009426:	2300      	movs	r3, #0
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	f7f7 fb5e 	bl	8000aec <__aeabi_dcmplt>
 8009430:	b148      	cbz	r0, 8009446 <_dtoa_r+0x186>
 8009432:	4650      	mov	r0, sl
 8009434:	f7f7 f87e 	bl	8000534 <__aeabi_i2d>
 8009438:	4632      	mov	r2, r6
 800943a:	463b      	mov	r3, r7
 800943c:	f7f7 fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009440:	b908      	cbnz	r0, 8009446 <_dtoa_r+0x186>
 8009442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009446:	f1ba 0f16 	cmp.w	sl, #22
 800944a:	d854      	bhi.n	80094f6 <_dtoa_r+0x236>
 800944c:	4b61      	ldr	r3, [pc, #388]	; (80095d4 <_dtoa_r+0x314>)
 800944e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800945a:	f7f7 fb47 	bl	8000aec <__aeabi_dcmplt>
 800945e:	2800      	cmp	r0, #0
 8009460:	d04b      	beq.n	80094fa <_dtoa_r+0x23a>
 8009462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009466:	2300      	movs	r3, #0
 8009468:	930e      	str	r3, [sp, #56]	; 0x38
 800946a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800946c:	1b5d      	subs	r5, r3, r5
 800946e:	1e6b      	subs	r3, r5, #1
 8009470:	9304      	str	r3, [sp, #16]
 8009472:	bf43      	ittte	mi
 8009474:	2300      	movmi	r3, #0
 8009476:	f1c5 0801 	rsbmi	r8, r5, #1
 800947a:	9304      	strmi	r3, [sp, #16]
 800947c:	f04f 0800 	movpl.w	r8, #0
 8009480:	f1ba 0f00 	cmp.w	sl, #0
 8009484:	db3b      	blt.n	80094fe <_dtoa_r+0x23e>
 8009486:	9b04      	ldr	r3, [sp, #16]
 8009488:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800948c:	4453      	add	r3, sl
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	2300      	movs	r3, #0
 8009492:	9306      	str	r3, [sp, #24]
 8009494:	9b05      	ldr	r3, [sp, #20]
 8009496:	2b09      	cmp	r3, #9
 8009498:	d869      	bhi.n	800956e <_dtoa_r+0x2ae>
 800949a:	2b05      	cmp	r3, #5
 800949c:	bfc4      	itt	gt
 800949e:	3b04      	subgt	r3, #4
 80094a0:	9305      	strgt	r3, [sp, #20]
 80094a2:	9b05      	ldr	r3, [sp, #20]
 80094a4:	f1a3 0302 	sub.w	r3, r3, #2
 80094a8:	bfcc      	ite	gt
 80094aa:	2500      	movgt	r5, #0
 80094ac:	2501      	movle	r5, #1
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	d869      	bhi.n	8009586 <_dtoa_r+0x2c6>
 80094b2:	e8df f003 	tbb	[pc, r3]
 80094b6:	4e2c      	.short	0x4e2c
 80094b8:	5a4c      	.short	0x5a4c
 80094ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80094be:	441d      	add	r5, r3
 80094c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	bfc1      	itttt	gt
 80094c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80094cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80094d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80094d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80094d8:	bfda      	itte	le
 80094da:	f1c3 0320 	rsble	r3, r3, #32
 80094de:	fa06 f003 	lslle.w	r0, r6, r3
 80094e2:	4318      	orrgt	r0, r3
 80094e4:	f7f7 f816 	bl	8000514 <__aeabi_ui2d>
 80094e8:	2301      	movs	r3, #1
 80094ea:	4606      	mov	r6, r0
 80094ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80094f0:	3d01      	subs	r5, #1
 80094f2:	9310      	str	r3, [sp, #64]	; 0x40
 80094f4:	e771      	b.n	80093da <_dtoa_r+0x11a>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e7b6      	b.n	8009468 <_dtoa_r+0x1a8>
 80094fa:	900e      	str	r0, [sp, #56]	; 0x38
 80094fc:	e7b5      	b.n	800946a <_dtoa_r+0x1aa>
 80094fe:	f1ca 0300 	rsb	r3, sl, #0
 8009502:	9306      	str	r3, [sp, #24]
 8009504:	2300      	movs	r3, #0
 8009506:	eba8 080a 	sub.w	r8, r8, sl
 800950a:	930d      	str	r3, [sp, #52]	; 0x34
 800950c:	e7c2      	b.n	8009494 <_dtoa_r+0x1d4>
 800950e:	2300      	movs	r3, #0
 8009510:	9308      	str	r3, [sp, #32]
 8009512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009514:	2b00      	cmp	r3, #0
 8009516:	dc39      	bgt.n	800958c <_dtoa_r+0x2cc>
 8009518:	f04f 0901 	mov.w	r9, #1
 800951c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009520:	464b      	mov	r3, r9
 8009522:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009526:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009528:	2200      	movs	r2, #0
 800952a:	6042      	str	r2, [r0, #4]
 800952c:	2204      	movs	r2, #4
 800952e:	f102 0614 	add.w	r6, r2, #20
 8009532:	429e      	cmp	r6, r3
 8009534:	6841      	ldr	r1, [r0, #4]
 8009536:	d92f      	bls.n	8009598 <_dtoa_r+0x2d8>
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fdfd 	bl	800a138 <_Balloc>
 800953e:	9000      	str	r0, [sp, #0]
 8009540:	2800      	cmp	r0, #0
 8009542:	d14b      	bne.n	80095dc <_dtoa_r+0x31c>
 8009544:	4b24      	ldr	r3, [pc, #144]	; (80095d8 <_dtoa_r+0x318>)
 8009546:	4602      	mov	r2, r0
 8009548:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800954c:	e6d1      	b.n	80092f2 <_dtoa_r+0x32>
 800954e:	2301      	movs	r3, #1
 8009550:	e7de      	b.n	8009510 <_dtoa_r+0x250>
 8009552:	2300      	movs	r3, #0
 8009554:	9308      	str	r3, [sp, #32]
 8009556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009558:	eb0a 0903 	add.w	r9, sl, r3
 800955c:	f109 0301 	add.w	r3, r9, #1
 8009560:	2b01      	cmp	r3, #1
 8009562:	9301      	str	r3, [sp, #4]
 8009564:	bfb8      	it	lt
 8009566:	2301      	movlt	r3, #1
 8009568:	e7dd      	b.n	8009526 <_dtoa_r+0x266>
 800956a:	2301      	movs	r3, #1
 800956c:	e7f2      	b.n	8009554 <_dtoa_r+0x294>
 800956e:	2501      	movs	r5, #1
 8009570:	2300      	movs	r3, #0
 8009572:	9305      	str	r3, [sp, #20]
 8009574:	9508      	str	r5, [sp, #32]
 8009576:	f04f 39ff 	mov.w	r9, #4294967295
 800957a:	2200      	movs	r2, #0
 800957c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009580:	2312      	movs	r3, #18
 8009582:	9209      	str	r2, [sp, #36]	; 0x24
 8009584:	e7cf      	b.n	8009526 <_dtoa_r+0x266>
 8009586:	2301      	movs	r3, #1
 8009588:	9308      	str	r3, [sp, #32]
 800958a:	e7f4      	b.n	8009576 <_dtoa_r+0x2b6>
 800958c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009590:	f8cd 9004 	str.w	r9, [sp, #4]
 8009594:	464b      	mov	r3, r9
 8009596:	e7c6      	b.n	8009526 <_dtoa_r+0x266>
 8009598:	3101      	adds	r1, #1
 800959a:	6041      	str	r1, [r0, #4]
 800959c:	0052      	lsls	r2, r2, #1
 800959e:	e7c6      	b.n	800952e <_dtoa_r+0x26e>
 80095a0:	636f4361 	.word	0x636f4361
 80095a4:	3fd287a7 	.word	0x3fd287a7
 80095a8:	8b60c8b3 	.word	0x8b60c8b3
 80095ac:	3fc68a28 	.word	0x3fc68a28
 80095b0:	509f79fb 	.word	0x509f79fb
 80095b4:	3fd34413 	.word	0x3fd34413
 80095b8:	0800b02e 	.word	0x0800b02e
 80095bc:	0800b045 	.word	0x0800b045
 80095c0:	7ff00000 	.word	0x7ff00000
 80095c4:	0800b02a 	.word	0x0800b02a
 80095c8:	0800b021 	.word	0x0800b021
 80095cc:	0800aefd 	.word	0x0800aefd
 80095d0:	3ff80000 	.word	0x3ff80000
 80095d4:	0800b140 	.word	0x0800b140
 80095d8:	0800b0a4 	.word	0x0800b0a4
 80095dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095de:	9a00      	ldr	r2, [sp, #0]
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	9b01      	ldr	r3, [sp, #4]
 80095e4:	2b0e      	cmp	r3, #14
 80095e6:	f200 80ad 	bhi.w	8009744 <_dtoa_r+0x484>
 80095ea:	2d00      	cmp	r5, #0
 80095ec:	f000 80aa 	beq.w	8009744 <_dtoa_r+0x484>
 80095f0:	f1ba 0f00 	cmp.w	sl, #0
 80095f4:	dd36      	ble.n	8009664 <_dtoa_r+0x3a4>
 80095f6:	4ac3      	ldr	r2, [pc, #780]	; (8009904 <_dtoa_r+0x644>)
 80095f8:	f00a 030f 	and.w	r3, sl, #15
 80095fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009600:	ed93 7b00 	vldr	d7, [r3]
 8009604:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009608:	ea4f 172a 	mov.w	r7, sl, asr #4
 800960c:	eeb0 8a47 	vmov.f32	s16, s14
 8009610:	eef0 8a67 	vmov.f32	s17, s15
 8009614:	d016      	beq.n	8009644 <_dtoa_r+0x384>
 8009616:	4bbc      	ldr	r3, [pc, #752]	; (8009908 <_dtoa_r+0x648>)
 8009618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800961c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009620:	f7f7 f91c 	bl	800085c <__aeabi_ddiv>
 8009624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009628:	f007 070f 	and.w	r7, r7, #15
 800962c:	2503      	movs	r5, #3
 800962e:	4eb6      	ldr	r6, [pc, #728]	; (8009908 <_dtoa_r+0x648>)
 8009630:	b957      	cbnz	r7, 8009648 <_dtoa_r+0x388>
 8009632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009636:	ec53 2b18 	vmov	r2, r3, d8
 800963a:	f7f7 f90f 	bl	800085c <__aeabi_ddiv>
 800963e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009642:	e029      	b.n	8009698 <_dtoa_r+0x3d8>
 8009644:	2502      	movs	r5, #2
 8009646:	e7f2      	b.n	800962e <_dtoa_r+0x36e>
 8009648:	07f9      	lsls	r1, r7, #31
 800964a:	d508      	bpl.n	800965e <_dtoa_r+0x39e>
 800964c:	ec51 0b18 	vmov	r0, r1, d8
 8009650:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009654:	f7f6 ffd8 	bl	8000608 <__aeabi_dmul>
 8009658:	ec41 0b18 	vmov	d8, r0, r1
 800965c:	3501      	adds	r5, #1
 800965e:	107f      	asrs	r7, r7, #1
 8009660:	3608      	adds	r6, #8
 8009662:	e7e5      	b.n	8009630 <_dtoa_r+0x370>
 8009664:	f000 80a6 	beq.w	80097b4 <_dtoa_r+0x4f4>
 8009668:	f1ca 0600 	rsb	r6, sl, #0
 800966c:	4ba5      	ldr	r3, [pc, #660]	; (8009904 <_dtoa_r+0x644>)
 800966e:	4fa6      	ldr	r7, [pc, #664]	; (8009908 <_dtoa_r+0x648>)
 8009670:	f006 020f 	and.w	r2, r6, #15
 8009674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009680:	f7f6 ffc2 	bl	8000608 <__aeabi_dmul>
 8009684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009688:	1136      	asrs	r6, r6, #4
 800968a:	2300      	movs	r3, #0
 800968c:	2502      	movs	r5, #2
 800968e:	2e00      	cmp	r6, #0
 8009690:	f040 8085 	bne.w	800979e <_dtoa_r+0x4de>
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1d2      	bne.n	800963e <_dtoa_r+0x37e>
 8009698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 808c 	beq.w	80097b8 <_dtoa_r+0x4f8>
 80096a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096a4:	4b99      	ldr	r3, [pc, #612]	; (800990c <_dtoa_r+0x64c>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	4630      	mov	r0, r6
 80096aa:	4639      	mov	r1, r7
 80096ac:	f7f7 fa1e 	bl	8000aec <__aeabi_dcmplt>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	f000 8081 	beq.w	80097b8 <_dtoa_r+0x4f8>
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d07d      	beq.n	80097b8 <_dtoa_r+0x4f8>
 80096bc:	f1b9 0f00 	cmp.w	r9, #0
 80096c0:	dd3c      	ble.n	800973c <_dtoa_r+0x47c>
 80096c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80096c6:	9307      	str	r3, [sp, #28]
 80096c8:	2200      	movs	r2, #0
 80096ca:	4b91      	ldr	r3, [pc, #580]	; (8009910 <_dtoa_r+0x650>)
 80096cc:	4630      	mov	r0, r6
 80096ce:	4639      	mov	r1, r7
 80096d0:	f7f6 ff9a 	bl	8000608 <__aeabi_dmul>
 80096d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d8:	3501      	adds	r5, #1
 80096da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80096de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096e2:	4628      	mov	r0, r5
 80096e4:	f7f6 ff26 	bl	8000534 <__aeabi_i2d>
 80096e8:	4632      	mov	r2, r6
 80096ea:	463b      	mov	r3, r7
 80096ec:	f7f6 ff8c 	bl	8000608 <__aeabi_dmul>
 80096f0:	4b88      	ldr	r3, [pc, #544]	; (8009914 <_dtoa_r+0x654>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	f7f6 fdd2 	bl	800029c <__adddf3>
 80096f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80096fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009700:	9303      	str	r3, [sp, #12]
 8009702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009704:	2b00      	cmp	r3, #0
 8009706:	d15c      	bne.n	80097c2 <_dtoa_r+0x502>
 8009708:	4b83      	ldr	r3, [pc, #524]	; (8009918 <_dtoa_r+0x658>)
 800970a:	2200      	movs	r2, #0
 800970c:	4630      	mov	r0, r6
 800970e:	4639      	mov	r1, r7
 8009710:	f7f6 fdc2 	bl	8000298 <__aeabi_dsub>
 8009714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009718:	4606      	mov	r6, r0
 800971a:	460f      	mov	r7, r1
 800971c:	f7f7 fa04 	bl	8000b28 <__aeabi_dcmpgt>
 8009720:	2800      	cmp	r0, #0
 8009722:	f040 8296 	bne.w	8009c52 <_dtoa_r+0x992>
 8009726:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800972a:	4630      	mov	r0, r6
 800972c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009730:	4639      	mov	r1, r7
 8009732:	f7f7 f9db 	bl	8000aec <__aeabi_dcmplt>
 8009736:	2800      	cmp	r0, #0
 8009738:	f040 8288 	bne.w	8009c4c <_dtoa_r+0x98c>
 800973c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009744:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009746:	2b00      	cmp	r3, #0
 8009748:	f2c0 8158 	blt.w	80099fc <_dtoa_r+0x73c>
 800974c:	f1ba 0f0e 	cmp.w	sl, #14
 8009750:	f300 8154 	bgt.w	80099fc <_dtoa_r+0x73c>
 8009754:	4b6b      	ldr	r3, [pc, #428]	; (8009904 <_dtoa_r+0x644>)
 8009756:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800975a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800975e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009760:	2b00      	cmp	r3, #0
 8009762:	f280 80e3 	bge.w	800992c <_dtoa_r+0x66c>
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f300 80df 	bgt.w	800992c <_dtoa_r+0x66c>
 800976e:	f040 826d 	bne.w	8009c4c <_dtoa_r+0x98c>
 8009772:	4b69      	ldr	r3, [pc, #420]	; (8009918 <_dtoa_r+0x658>)
 8009774:	2200      	movs	r2, #0
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f6 ff45 	bl	8000608 <__aeabi_dmul>
 800977e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009782:	f7f7 f9c7 	bl	8000b14 <__aeabi_dcmpge>
 8009786:	9e01      	ldr	r6, [sp, #4]
 8009788:	4637      	mov	r7, r6
 800978a:	2800      	cmp	r0, #0
 800978c:	f040 8243 	bne.w	8009c16 <_dtoa_r+0x956>
 8009790:	9d00      	ldr	r5, [sp, #0]
 8009792:	2331      	movs	r3, #49	; 0x31
 8009794:	f805 3b01 	strb.w	r3, [r5], #1
 8009798:	f10a 0a01 	add.w	sl, sl, #1
 800979c:	e23f      	b.n	8009c1e <_dtoa_r+0x95e>
 800979e:	07f2      	lsls	r2, r6, #31
 80097a0:	d505      	bpl.n	80097ae <_dtoa_r+0x4ee>
 80097a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097a6:	f7f6 ff2f 	bl	8000608 <__aeabi_dmul>
 80097aa:	3501      	adds	r5, #1
 80097ac:	2301      	movs	r3, #1
 80097ae:	1076      	asrs	r6, r6, #1
 80097b0:	3708      	adds	r7, #8
 80097b2:	e76c      	b.n	800968e <_dtoa_r+0x3ce>
 80097b4:	2502      	movs	r5, #2
 80097b6:	e76f      	b.n	8009698 <_dtoa_r+0x3d8>
 80097b8:	9b01      	ldr	r3, [sp, #4]
 80097ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80097be:	930c      	str	r3, [sp, #48]	; 0x30
 80097c0:	e78d      	b.n	80096de <_dtoa_r+0x41e>
 80097c2:	9900      	ldr	r1, [sp, #0]
 80097c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80097c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097c8:	4b4e      	ldr	r3, [pc, #312]	; (8009904 <_dtoa_r+0x644>)
 80097ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097ce:	4401      	add	r1, r0
 80097d0:	9102      	str	r1, [sp, #8]
 80097d2:	9908      	ldr	r1, [sp, #32]
 80097d4:	eeb0 8a47 	vmov.f32	s16, s14
 80097d8:	eef0 8a67 	vmov.f32	s17, s15
 80097dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097e4:	2900      	cmp	r1, #0
 80097e6:	d045      	beq.n	8009874 <_dtoa_r+0x5b4>
 80097e8:	494c      	ldr	r1, [pc, #304]	; (800991c <_dtoa_r+0x65c>)
 80097ea:	2000      	movs	r0, #0
 80097ec:	f7f7 f836 	bl	800085c <__aeabi_ddiv>
 80097f0:	ec53 2b18 	vmov	r2, r3, d8
 80097f4:	f7f6 fd50 	bl	8000298 <__aeabi_dsub>
 80097f8:	9d00      	ldr	r5, [sp, #0]
 80097fa:	ec41 0b18 	vmov	d8, r0, r1
 80097fe:	4639      	mov	r1, r7
 8009800:	4630      	mov	r0, r6
 8009802:	f7f7 f9b1 	bl	8000b68 <__aeabi_d2iz>
 8009806:	900c      	str	r0, [sp, #48]	; 0x30
 8009808:	f7f6 fe94 	bl	8000534 <__aeabi_i2d>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4630      	mov	r0, r6
 8009812:	4639      	mov	r1, r7
 8009814:	f7f6 fd40 	bl	8000298 <__aeabi_dsub>
 8009818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800981a:	3330      	adds	r3, #48	; 0x30
 800981c:	f805 3b01 	strb.w	r3, [r5], #1
 8009820:	ec53 2b18 	vmov	r2, r3, d8
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	f7f7 f960 	bl	8000aec <__aeabi_dcmplt>
 800982c:	2800      	cmp	r0, #0
 800982e:	d165      	bne.n	80098fc <_dtoa_r+0x63c>
 8009830:	4632      	mov	r2, r6
 8009832:	463b      	mov	r3, r7
 8009834:	4935      	ldr	r1, [pc, #212]	; (800990c <_dtoa_r+0x64c>)
 8009836:	2000      	movs	r0, #0
 8009838:	f7f6 fd2e 	bl	8000298 <__aeabi_dsub>
 800983c:	ec53 2b18 	vmov	r2, r3, d8
 8009840:	f7f7 f954 	bl	8000aec <__aeabi_dcmplt>
 8009844:	2800      	cmp	r0, #0
 8009846:	f040 80b9 	bne.w	80099bc <_dtoa_r+0x6fc>
 800984a:	9b02      	ldr	r3, [sp, #8]
 800984c:	429d      	cmp	r5, r3
 800984e:	f43f af75 	beq.w	800973c <_dtoa_r+0x47c>
 8009852:	4b2f      	ldr	r3, [pc, #188]	; (8009910 <_dtoa_r+0x650>)
 8009854:	ec51 0b18 	vmov	r0, r1, d8
 8009858:	2200      	movs	r2, #0
 800985a:	f7f6 fed5 	bl	8000608 <__aeabi_dmul>
 800985e:	4b2c      	ldr	r3, [pc, #176]	; (8009910 <_dtoa_r+0x650>)
 8009860:	ec41 0b18 	vmov	d8, r0, r1
 8009864:	2200      	movs	r2, #0
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f6 fecd 	bl	8000608 <__aeabi_dmul>
 800986e:	4606      	mov	r6, r0
 8009870:	460f      	mov	r7, r1
 8009872:	e7c4      	b.n	80097fe <_dtoa_r+0x53e>
 8009874:	ec51 0b17 	vmov	r0, r1, d7
 8009878:	f7f6 fec6 	bl	8000608 <__aeabi_dmul>
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	9d00      	ldr	r5, [sp, #0]
 8009880:	930c      	str	r3, [sp, #48]	; 0x30
 8009882:	ec41 0b18 	vmov	d8, r0, r1
 8009886:	4639      	mov	r1, r7
 8009888:	4630      	mov	r0, r6
 800988a:	f7f7 f96d 	bl	8000b68 <__aeabi_d2iz>
 800988e:	9011      	str	r0, [sp, #68]	; 0x44
 8009890:	f7f6 fe50 	bl	8000534 <__aeabi_i2d>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	4630      	mov	r0, r6
 800989a:	4639      	mov	r1, r7
 800989c:	f7f6 fcfc 	bl	8000298 <__aeabi_dsub>
 80098a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098a2:	3330      	adds	r3, #48	; 0x30
 80098a4:	f805 3b01 	strb.w	r3, [r5], #1
 80098a8:	9b02      	ldr	r3, [sp, #8]
 80098aa:	429d      	cmp	r5, r3
 80098ac:	4606      	mov	r6, r0
 80098ae:	460f      	mov	r7, r1
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	d134      	bne.n	8009920 <_dtoa_r+0x660>
 80098b6:	4b19      	ldr	r3, [pc, #100]	; (800991c <_dtoa_r+0x65c>)
 80098b8:	ec51 0b18 	vmov	r0, r1, d8
 80098bc:	f7f6 fcee 	bl	800029c <__adddf3>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4630      	mov	r0, r6
 80098c6:	4639      	mov	r1, r7
 80098c8:	f7f7 f92e 	bl	8000b28 <__aeabi_dcmpgt>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d175      	bne.n	80099bc <_dtoa_r+0x6fc>
 80098d0:	ec53 2b18 	vmov	r2, r3, d8
 80098d4:	4911      	ldr	r1, [pc, #68]	; (800991c <_dtoa_r+0x65c>)
 80098d6:	2000      	movs	r0, #0
 80098d8:	f7f6 fcde 	bl	8000298 <__aeabi_dsub>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f7 f902 	bl	8000aec <__aeabi_dcmplt>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f43f af27 	beq.w	800973c <_dtoa_r+0x47c>
 80098ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098f0:	1e6b      	subs	r3, r5, #1
 80098f2:	930c      	str	r3, [sp, #48]	; 0x30
 80098f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098f8:	2b30      	cmp	r3, #48	; 0x30
 80098fa:	d0f8      	beq.n	80098ee <_dtoa_r+0x62e>
 80098fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009900:	e04a      	b.n	8009998 <_dtoa_r+0x6d8>
 8009902:	bf00      	nop
 8009904:	0800b140 	.word	0x0800b140
 8009908:	0800b118 	.word	0x0800b118
 800990c:	3ff00000 	.word	0x3ff00000
 8009910:	40240000 	.word	0x40240000
 8009914:	401c0000 	.word	0x401c0000
 8009918:	40140000 	.word	0x40140000
 800991c:	3fe00000 	.word	0x3fe00000
 8009920:	4baf      	ldr	r3, [pc, #700]	; (8009be0 <_dtoa_r+0x920>)
 8009922:	f7f6 fe71 	bl	8000608 <__aeabi_dmul>
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	e7ac      	b.n	8009886 <_dtoa_r+0x5c6>
 800992c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009930:	9d00      	ldr	r5, [sp, #0]
 8009932:	4642      	mov	r2, r8
 8009934:	464b      	mov	r3, r9
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f6 ff8f 	bl	800085c <__aeabi_ddiv>
 800993e:	f7f7 f913 	bl	8000b68 <__aeabi_d2iz>
 8009942:	9002      	str	r0, [sp, #8]
 8009944:	f7f6 fdf6 	bl	8000534 <__aeabi_i2d>
 8009948:	4642      	mov	r2, r8
 800994a:	464b      	mov	r3, r9
 800994c:	f7f6 fe5c 	bl	8000608 <__aeabi_dmul>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4630      	mov	r0, r6
 8009956:	4639      	mov	r1, r7
 8009958:	f7f6 fc9e 	bl	8000298 <__aeabi_dsub>
 800995c:	9e02      	ldr	r6, [sp, #8]
 800995e:	9f01      	ldr	r7, [sp, #4]
 8009960:	3630      	adds	r6, #48	; 0x30
 8009962:	f805 6b01 	strb.w	r6, [r5], #1
 8009966:	9e00      	ldr	r6, [sp, #0]
 8009968:	1bae      	subs	r6, r5, r6
 800996a:	42b7      	cmp	r7, r6
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	d137      	bne.n	80099e2 <_dtoa_r+0x722>
 8009972:	f7f6 fc93 	bl	800029c <__adddf3>
 8009976:	4642      	mov	r2, r8
 8009978:	464b      	mov	r3, r9
 800997a:	4606      	mov	r6, r0
 800997c:	460f      	mov	r7, r1
 800997e:	f7f7 f8d3 	bl	8000b28 <__aeabi_dcmpgt>
 8009982:	b9c8      	cbnz	r0, 80099b8 <_dtoa_r+0x6f8>
 8009984:	4642      	mov	r2, r8
 8009986:	464b      	mov	r3, r9
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f8a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009990:	b110      	cbz	r0, 8009998 <_dtoa_r+0x6d8>
 8009992:	9b02      	ldr	r3, [sp, #8]
 8009994:	07d9      	lsls	r1, r3, #31
 8009996:	d40f      	bmi.n	80099b8 <_dtoa_r+0x6f8>
 8009998:	4620      	mov	r0, r4
 800999a:	4659      	mov	r1, fp
 800999c:	f000 fc0c 	bl	800a1b8 <_Bfree>
 80099a0:	2300      	movs	r3, #0
 80099a2:	702b      	strb	r3, [r5, #0]
 80099a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099a6:	f10a 0001 	add.w	r0, sl, #1
 80099aa:	6018      	str	r0, [r3, #0]
 80099ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f43f acd8 	beq.w	8009364 <_dtoa_r+0xa4>
 80099b4:	601d      	str	r5, [r3, #0]
 80099b6:	e4d5      	b.n	8009364 <_dtoa_r+0xa4>
 80099b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80099bc:	462b      	mov	r3, r5
 80099be:	461d      	mov	r5, r3
 80099c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099c4:	2a39      	cmp	r2, #57	; 0x39
 80099c6:	d108      	bne.n	80099da <_dtoa_r+0x71a>
 80099c8:	9a00      	ldr	r2, [sp, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d1f7      	bne.n	80099be <_dtoa_r+0x6fe>
 80099ce:	9a07      	ldr	r2, [sp, #28]
 80099d0:	9900      	ldr	r1, [sp, #0]
 80099d2:	3201      	adds	r2, #1
 80099d4:	9207      	str	r2, [sp, #28]
 80099d6:	2230      	movs	r2, #48	; 0x30
 80099d8:	700a      	strb	r2, [r1, #0]
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	3201      	adds	r2, #1
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e78c      	b.n	80098fc <_dtoa_r+0x63c>
 80099e2:	4b7f      	ldr	r3, [pc, #508]	; (8009be0 <_dtoa_r+0x920>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	f7f6 fe0f 	bl	8000608 <__aeabi_dmul>
 80099ea:	2200      	movs	r2, #0
 80099ec:	2300      	movs	r3, #0
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	f7f7 f871 	bl	8000ad8 <__aeabi_dcmpeq>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d09b      	beq.n	8009932 <_dtoa_r+0x672>
 80099fa:	e7cd      	b.n	8009998 <_dtoa_r+0x6d8>
 80099fc:	9a08      	ldr	r2, [sp, #32]
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	f000 80c4 	beq.w	8009b8c <_dtoa_r+0x8cc>
 8009a04:	9a05      	ldr	r2, [sp, #20]
 8009a06:	2a01      	cmp	r2, #1
 8009a08:	f300 80a8 	bgt.w	8009b5c <_dtoa_r+0x89c>
 8009a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	f000 80a0 	beq.w	8009b54 <_dtoa_r+0x894>
 8009a14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a18:	9e06      	ldr	r6, [sp, #24]
 8009a1a:	4645      	mov	r5, r8
 8009a1c:	9a04      	ldr	r2, [sp, #16]
 8009a1e:	2101      	movs	r1, #1
 8009a20:	441a      	add	r2, r3
 8009a22:	4620      	mov	r0, r4
 8009a24:	4498      	add	r8, r3
 8009a26:	9204      	str	r2, [sp, #16]
 8009a28:	f000 fc82 	bl	800a330 <__i2b>
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	dd0b      	ble.n	8009a4a <_dtoa_r+0x78a>
 8009a32:	9b04      	ldr	r3, [sp, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dd08      	ble.n	8009a4a <_dtoa_r+0x78a>
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	9a04      	ldr	r2, [sp, #16]
 8009a3c:	bfa8      	it	ge
 8009a3e:	462b      	movge	r3, r5
 8009a40:	eba8 0803 	sub.w	r8, r8, r3
 8009a44:	1aed      	subs	r5, r5, r3
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	9b06      	ldr	r3, [sp, #24]
 8009a4c:	b1fb      	cbz	r3, 8009a8e <_dtoa_r+0x7ce>
 8009a4e:	9b08      	ldr	r3, [sp, #32]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 809f 	beq.w	8009b94 <_dtoa_r+0x8d4>
 8009a56:	2e00      	cmp	r6, #0
 8009a58:	dd11      	ble.n	8009a7e <_dtoa_r+0x7be>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 fd22 	bl	800a4a8 <__pow5mult>
 8009a64:	465a      	mov	r2, fp
 8009a66:	4601      	mov	r1, r0
 8009a68:	4607      	mov	r7, r0
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fc76 	bl	800a35c <__multiply>
 8009a70:	4659      	mov	r1, fp
 8009a72:	9007      	str	r0, [sp, #28]
 8009a74:	4620      	mov	r0, r4
 8009a76:	f000 fb9f 	bl	800a1b8 <_Bfree>
 8009a7a:	9b07      	ldr	r3, [sp, #28]
 8009a7c:	469b      	mov	fp, r3
 8009a7e:	9b06      	ldr	r3, [sp, #24]
 8009a80:	1b9a      	subs	r2, r3, r6
 8009a82:	d004      	beq.n	8009a8e <_dtoa_r+0x7ce>
 8009a84:	4659      	mov	r1, fp
 8009a86:	4620      	mov	r0, r4
 8009a88:	f000 fd0e 	bl	800a4a8 <__pow5mult>
 8009a8c:	4683      	mov	fp, r0
 8009a8e:	2101      	movs	r1, #1
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fc4d 	bl	800a330 <__i2b>
 8009a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	dd7c      	ble.n	8009b98 <_dtoa_r+0x8d8>
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4601      	mov	r1, r0
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fd00 	bl	800a4a8 <__pow5mult>
 8009aa8:	9b05      	ldr	r3, [sp, #20]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	4606      	mov	r6, r0
 8009aae:	dd76      	ble.n	8009b9e <_dtoa_r+0x8de>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	9306      	str	r3, [sp, #24]
 8009ab4:	6933      	ldr	r3, [r6, #16]
 8009ab6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009aba:	6918      	ldr	r0, [r3, #16]
 8009abc:	f000 fbe8 	bl	800a290 <__hi0bits>
 8009ac0:	f1c0 0020 	rsb	r0, r0, #32
 8009ac4:	9b04      	ldr	r3, [sp, #16]
 8009ac6:	4418      	add	r0, r3
 8009ac8:	f010 001f 	ands.w	r0, r0, #31
 8009acc:	f000 8086 	beq.w	8009bdc <_dtoa_r+0x91c>
 8009ad0:	f1c0 0320 	rsb	r3, r0, #32
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	dd7f      	ble.n	8009bd8 <_dtoa_r+0x918>
 8009ad8:	f1c0 001c 	rsb	r0, r0, #28
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	4403      	add	r3, r0
 8009ae0:	4480      	add	r8, r0
 8009ae2:	4405      	add	r5, r0
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	f1b8 0f00 	cmp.w	r8, #0
 8009aea:	dd05      	ble.n	8009af8 <_dtoa_r+0x838>
 8009aec:	4659      	mov	r1, fp
 8009aee:	4642      	mov	r2, r8
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fd33 	bl	800a55c <__lshift>
 8009af6:	4683      	mov	fp, r0
 8009af8:	9b04      	ldr	r3, [sp, #16]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dd05      	ble.n	8009b0a <_dtoa_r+0x84a>
 8009afe:	4631      	mov	r1, r6
 8009b00:	461a      	mov	r2, r3
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 fd2a 	bl	800a55c <__lshift>
 8009b08:	4606      	mov	r6, r0
 8009b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d069      	beq.n	8009be4 <_dtoa_r+0x924>
 8009b10:	4631      	mov	r1, r6
 8009b12:	4658      	mov	r0, fp
 8009b14:	f000 fd8e 	bl	800a634 <__mcmp>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	da63      	bge.n	8009be4 <_dtoa_r+0x924>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4659      	mov	r1, fp
 8009b20:	220a      	movs	r2, #10
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 fb6a 	bl	800a1fc <__multadd>
 8009b28:	9b08      	ldr	r3, [sp, #32]
 8009b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b2e:	4683      	mov	fp, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 818f 	beq.w	8009e54 <_dtoa_r+0xb94>
 8009b36:	4639      	mov	r1, r7
 8009b38:	2300      	movs	r3, #0
 8009b3a:	220a      	movs	r2, #10
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 fb5d 	bl	800a1fc <__multadd>
 8009b42:	f1b9 0f00 	cmp.w	r9, #0
 8009b46:	4607      	mov	r7, r0
 8009b48:	f300 808e 	bgt.w	8009c68 <_dtoa_r+0x9a8>
 8009b4c:	9b05      	ldr	r3, [sp, #20]
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	dc50      	bgt.n	8009bf4 <_dtoa_r+0x934>
 8009b52:	e089      	b.n	8009c68 <_dtoa_r+0x9a8>
 8009b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b5a:	e75d      	b.n	8009a18 <_dtoa_r+0x758>
 8009b5c:	9b01      	ldr	r3, [sp, #4]
 8009b5e:	1e5e      	subs	r6, r3, #1
 8009b60:	9b06      	ldr	r3, [sp, #24]
 8009b62:	42b3      	cmp	r3, r6
 8009b64:	bfbf      	itttt	lt
 8009b66:	9b06      	ldrlt	r3, [sp, #24]
 8009b68:	9606      	strlt	r6, [sp, #24]
 8009b6a:	1af2      	sublt	r2, r6, r3
 8009b6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009b6e:	bfb6      	itet	lt
 8009b70:	189b      	addlt	r3, r3, r2
 8009b72:	1b9e      	subge	r6, r3, r6
 8009b74:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009b76:	9b01      	ldr	r3, [sp, #4]
 8009b78:	bfb8      	it	lt
 8009b7a:	2600      	movlt	r6, #0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfb5      	itete	lt
 8009b80:	eba8 0503 	sublt.w	r5, r8, r3
 8009b84:	9b01      	ldrge	r3, [sp, #4]
 8009b86:	2300      	movlt	r3, #0
 8009b88:	4645      	movge	r5, r8
 8009b8a:	e747      	b.n	8009a1c <_dtoa_r+0x75c>
 8009b8c:	9e06      	ldr	r6, [sp, #24]
 8009b8e:	9f08      	ldr	r7, [sp, #32]
 8009b90:	4645      	mov	r5, r8
 8009b92:	e74c      	b.n	8009a2e <_dtoa_r+0x76e>
 8009b94:	9a06      	ldr	r2, [sp, #24]
 8009b96:	e775      	b.n	8009a84 <_dtoa_r+0x7c4>
 8009b98:	9b05      	ldr	r3, [sp, #20]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	dc18      	bgt.n	8009bd0 <_dtoa_r+0x910>
 8009b9e:	9b02      	ldr	r3, [sp, #8]
 8009ba0:	b9b3      	cbnz	r3, 8009bd0 <_dtoa_r+0x910>
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ba8:	b9a3      	cbnz	r3, 8009bd4 <_dtoa_r+0x914>
 8009baa:	9b03      	ldr	r3, [sp, #12]
 8009bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009bb0:	0d1b      	lsrs	r3, r3, #20
 8009bb2:	051b      	lsls	r3, r3, #20
 8009bb4:	b12b      	cbz	r3, 8009bc2 <_dtoa_r+0x902>
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	9304      	str	r3, [sp, #16]
 8009bbc:	f108 0801 	add.w	r8, r8, #1
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	9306      	str	r3, [sp, #24]
 8009bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f47f af74 	bne.w	8009ab4 <_dtoa_r+0x7f4>
 8009bcc:	2001      	movs	r0, #1
 8009bce:	e779      	b.n	8009ac4 <_dtoa_r+0x804>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e7f6      	b.n	8009bc2 <_dtoa_r+0x902>
 8009bd4:	9b02      	ldr	r3, [sp, #8]
 8009bd6:	e7f4      	b.n	8009bc2 <_dtoa_r+0x902>
 8009bd8:	d085      	beq.n	8009ae6 <_dtoa_r+0x826>
 8009bda:	4618      	mov	r0, r3
 8009bdc:	301c      	adds	r0, #28
 8009bde:	e77d      	b.n	8009adc <_dtoa_r+0x81c>
 8009be0:	40240000 	.word	0x40240000
 8009be4:	9b01      	ldr	r3, [sp, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	dc38      	bgt.n	8009c5c <_dtoa_r+0x99c>
 8009bea:	9b05      	ldr	r3, [sp, #20]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	dd35      	ble.n	8009c5c <_dtoa_r+0x99c>
 8009bf0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009bf4:	f1b9 0f00 	cmp.w	r9, #0
 8009bf8:	d10d      	bne.n	8009c16 <_dtoa_r+0x956>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	2205      	movs	r2, #5
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fafb 	bl	800a1fc <__multadd>
 8009c06:	4601      	mov	r1, r0
 8009c08:	4606      	mov	r6, r0
 8009c0a:	4658      	mov	r0, fp
 8009c0c:	f000 fd12 	bl	800a634 <__mcmp>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f73f adbd 	bgt.w	8009790 <_dtoa_r+0x4d0>
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	9d00      	ldr	r5, [sp, #0]
 8009c1a:	ea6f 0a03 	mvn.w	sl, r3
 8009c1e:	f04f 0800 	mov.w	r8, #0
 8009c22:	4631      	mov	r1, r6
 8009c24:	4620      	mov	r0, r4
 8009c26:	f000 fac7 	bl	800a1b8 <_Bfree>
 8009c2a:	2f00      	cmp	r7, #0
 8009c2c:	f43f aeb4 	beq.w	8009998 <_dtoa_r+0x6d8>
 8009c30:	f1b8 0f00 	cmp.w	r8, #0
 8009c34:	d005      	beq.n	8009c42 <_dtoa_r+0x982>
 8009c36:	45b8      	cmp	r8, r7
 8009c38:	d003      	beq.n	8009c42 <_dtoa_r+0x982>
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 fabb 	bl	800a1b8 <_Bfree>
 8009c42:	4639      	mov	r1, r7
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 fab7 	bl	800a1b8 <_Bfree>
 8009c4a:	e6a5      	b.n	8009998 <_dtoa_r+0x6d8>
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	4637      	mov	r7, r6
 8009c50:	e7e1      	b.n	8009c16 <_dtoa_r+0x956>
 8009c52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009c54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009c58:	4637      	mov	r7, r6
 8009c5a:	e599      	b.n	8009790 <_dtoa_r+0x4d0>
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 80fd 	beq.w	8009e62 <_dtoa_r+0xba2>
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	dd05      	ble.n	8009c78 <_dtoa_r+0x9b8>
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	462a      	mov	r2, r5
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fc73 	bl	800a55c <__lshift>
 8009c76:	4607      	mov	r7, r0
 8009c78:	9b06      	ldr	r3, [sp, #24]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d05c      	beq.n	8009d38 <_dtoa_r+0xa78>
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 fa59 	bl	800a138 <_Balloc>
 8009c86:	4605      	mov	r5, r0
 8009c88:	b928      	cbnz	r0, 8009c96 <_dtoa_r+0x9d6>
 8009c8a:	4b80      	ldr	r3, [pc, #512]	; (8009e8c <_dtoa_r+0xbcc>)
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c92:	f7ff bb2e 	b.w	80092f2 <_dtoa_r+0x32>
 8009c96:	693a      	ldr	r2, [r7, #16]
 8009c98:	3202      	adds	r2, #2
 8009c9a:	0092      	lsls	r2, r2, #2
 8009c9c:	f107 010c 	add.w	r1, r7, #12
 8009ca0:	300c      	adds	r0, #12
 8009ca2:	f7fe fb8e 	bl	80083c2 <memcpy>
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fc56 	bl	800a55c <__lshift>
 8009cb0:	9b00      	ldr	r3, [sp, #0]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	9301      	str	r3, [sp, #4]
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	444b      	add	r3, r9
 8009cba:	9307      	str	r3, [sp, #28]
 8009cbc:	9b02      	ldr	r3, [sp, #8]
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	46b8      	mov	r8, r7
 8009cc4:	9306      	str	r3, [sp, #24]
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	4631      	mov	r1, r6
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	4658      	mov	r0, fp
 8009cd0:	9302      	str	r3, [sp, #8]
 8009cd2:	f7ff fa67 	bl	80091a4 <quorem>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	3330      	adds	r3, #48	; 0x30
 8009cda:	9004      	str	r0, [sp, #16]
 8009cdc:	4641      	mov	r1, r8
 8009cde:	4658      	mov	r0, fp
 8009ce0:	9308      	str	r3, [sp, #32]
 8009ce2:	f000 fca7 	bl	800a634 <__mcmp>
 8009ce6:	463a      	mov	r2, r7
 8009ce8:	4681      	mov	r9, r0
 8009cea:	4631      	mov	r1, r6
 8009cec:	4620      	mov	r0, r4
 8009cee:	f000 fcbd 	bl	800a66c <__mdiff>
 8009cf2:	68c2      	ldr	r2, [r0, #12]
 8009cf4:	9b08      	ldr	r3, [sp, #32]
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	bb02      	cbnz	r2, 8009d3c <_dtoa_r+0xa7c>
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	4658      	mov	r0, fp
 8009cfe:	f000 fc99 	bl	800a634 <__mcmp>
 8009d02:	9b08      	ldr	r3, [sp, #32]
 8009d04:	4602      	mov	r2, r0
 8009d06:	4629      	mov	r1, r5
 8009d08:	4620      	mov	r0, r4
 8009d0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009d0e:	f000 fa53 	bl	800a1b8 <_Bfree>
 8009d12:	9b05      	ldr	r3, [sp, #20]
 8009d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d16:	9d01      	ldr	r5, [sp, #4]
 8009d18:	ea43 0102 	orr.w	r1, r3, r2
 8009d1c:	9b06      	ldr	r3, [sp, #24]
 8009d1e:	430b      	orrs	r3, r1
 8009d20:	9b08      	ldr	r3, [sp, #32]
 8009d22:	d10d      	bne.n	8009d40 <_dtoa_r+0xa80>
 8009d24:	2b39      	cmp	r3, #57	; 0x39
 8009d26:	d029      	beq.n	8009d7c <_dtoa_r+0xabc>
 8009d28:	f1b9 0f00 	cmp.w	r9, #0
 8009d2c:	dd01      	ble.n	8009d32 <_dtoa_r+0xa72>
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	3331      	adds	r3, #49	; 0x31
 8009d32:	9a02      	ldr	r2, [sp, #8]
 8009d34:	7013      	strb	r3, [r2, #0]
 8009d36:	e774      	b.n	8009c22 <_dtoa_r+0x962>
 8009d38:	4638      	mov	r0, r7
 8009d3a:	e7b9      	b.n	8009cb0 <_dtoa_r+0x9f0>
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	e7e2      	b.n	8009d06 <_dtoa_r+0xa46>
 8009d40:	f1b9 0f00 	cmp.w	r9, #0
 8009d44:	db06      	blt.n	8009d54 <_dtoa_r+0xa94>
 8009d46:	9905      	ldr	r1, [sp, #20]
 8009d48:	ea41 0909 	orr.w	r9, r1, r9
 8009d4c:	9906      	ldr	r1, [sp, #24]
 8009d4e:	ea59 0101 	orrs.w	r1, r9, r1
 8009d52:	d120      	bne.n	8009d96 <_dtoa_r+0xad6>
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	ddec      	ble.n	8009d32 <_dtoa_r+0xa72>
 8009d58:	4659      	mov	r1, fp
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	f000 fbfc 	bl	800a55c <__lshift>
 8009d64:	4631      	mov	r1, r6
 8009d66:	4683      	mov	fp, r0
 8009d68:	f000 fc64 	bl	800a634 <__mcmp>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	9b01      	ldr	r3, [sp, #4]
 8009d70:	dc02      	bgt.n	8009d78 <_dtoa_r+0xab8>
 8009d72:	d1de      	bne.n	8009d32 <_dtoa_r+0xa72>
 8009d74:	07da      	lsls	r2, r3, #31
 8009d76:	d5dc      	bpl.n	8009d32 <_dtoa_r+0xa72>
 8009d78:	2b39      	cmp	r3, #57	; 0x39
 8009d7a:	d1d8      	bne.n	8009d2e <_dtoa_r+0xa6e>
 8009d7c:	9a02      	ldr	r2, [sp, #8]
 8009d7e:	2339      	movs	r3, #57	; 0x39
 8009d80:	7013      	strb	r3, [r2, #0]
 8009d82:	462b      	mov	r3, r5
 8009d84:	461d      	mov	r5, r3
 8009d86:	3b01      	subs	r3, #1
 8009d88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d8c:	2a39      	cmp	r2, #57	; 0x39
 8009d8e:	d050      	beq.n	8009e32 <_dtoa_r+0xb72>
 8009d90:	3201      	adds	r2, #1
 8009d92:	701a      	strb	r2, [r3, #0]
 8009d94:	e745      	b.n	8009c22 <_dtoa_r+0x962>
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	dd03      	ble.n	8009da2 <_dtoa_r+0xae2>
 8009d9a:	2b39      	cmp	r3, #57	; 0x39
 8009d9c:	d0ee      	beq.n	8009d7c <_dtoa_r+0xabc>
 8009d9e:	3301      	adds	r3, #1
 8009da0:	e7c7      	b.n	8009d32 <_dtoa_r+0xa72>
 8009da2:	9a01      	ldr	r2, [sp, #4]
 8009da4:	9907      	ldr	r1, [sp, #28]
 8009da6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009daa:	428a      	cmp	r2, r1
 8009dac:	d02a      	beq.n	8009e04 <_dtoa_r+0xb44>
 8009dae:	4659      	mov	r1, fp
 8009db0:	2300      	movs	r3, #0
 8009db2:	220a      	movs	r2, #10
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 fa21 	bl	800a1fc <__multadd>
 8009dba:	45b8      	cmp	r8, r7
 8009dbc:	4683      	mov	fp, r0
 8009dbe:	f04f 0300 	mov.w	r3, #0
 8009dc2:	f04f 020a 	mov.w	r2, #10
 8009dc6:	4641      	mov	r1, r8
 8009dc8:	4620      	mov	r0, r4
 8009dca:	d107      	bne.n	8009ddc <_dtoa_r+0xb1c>
 8009dcc:	f000 fa16 	bl	800a1fc <__multadd>
 8009dd0:	4680      	mov	r8, r0
 8009dd2:	4607      	mov	r7, r0
 8009dd4:	9b01      	ldr	r3, [sp, #4]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	e775      	b.n	8009cc8 <_dtoa_r+0xa08>
 8009ddc:	f000 fa0e 	bl	800a1fc <__multadd>
 8009de0:	4639      	mov	r1, r7
 8009de2:	4680      	mov	r8, r0
 8009de4:	2300      	movs	r3, #0
 8009de6:	220a      	movs	r2, #10
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fa07 	bl	800a1fc <__multadd>
 8009dee:	4607      	mov	r7, r0
 8009df0:	e7f0      	b.n	8009dd4 <_dtoa_r+0xb14>
 8009df2:	f1b9 0f00 	cmp.w	r9, #0
 8009df6:	9a00      	ldr	r2, [sp, #0]
 8009df8:	bfcc      	ite	gt
 8009dfa:	464d      	movgt	r5, r9
 8009dfc:	2501      	movle	r5, #1
 8009dfe:	4415      	add	r5, r2
 8009e00:	f04f 0800 	mov.w	r8, #0
 8009e04:	4659      	mov	r1, fp
 8009e06:	2201      	movs	r2, #1
 8009e08:	4620      	mov	r0, r4
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	f000 fba6 	bl	800a55c <__lshift>
 8009e10:	4631      	mov	r1, r6
 8009e12:	4683      	mov	fp, r0
 8009e14:	f000 fc0e 	bl	800a634 <__mcmp>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	dcb2      	bgt.n	8009d82 <_dtoa_r+0xac2>
 8009e1c:	d102      	bne.n	8009e24 <_dtoa_r+0xb64>
 8009e1e:	9b01      	ldr	r3, [sp, #4]
 8009e20:	07db      	lsls	r3, r3, #31
 8009e22:	d4ae      	bmi.n	8009d82 <_dtoa_r+0xac2>
 8009e24:	462b      	mov	r3, r5
 8009e26:	461d      	mov	r5, r3
 8009e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e2c:	2a30      	cmp	r2, #48	; 0x30
 8009e2e:	d0fa      	beq.n	8009e26 <_dtoa_r+0xb66>
 8009e30:	e6f7      	b.n	8009c22 <_dtoa_r+0x962>
 8009e32:	9a00      	ldr	r2, [sp, #0]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d1a5      	bne.n	8009d84 <_dtoa_r+0xac4>
 8009e38:	f10a 0a01 	add.w	sl, sl, #1
 8009e3c:	2331      	movs	r3, #49	; 0x31
 8009e3e:	e779      	b.n	8009d34 <_dtoa_r+0xa74>
 8009e40:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <_dtoa_r+0xbd0>)
 8009e42:	f7ff baaf 	b.w	80093a4 <_dtoa_r+0xe4>
 8009e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f47f aa86 	bne.w	800935a <_dtoa_r+0x9a>
 8009e4e:	4b11      	ldr	r3, [pc, #68]	; (8009e94 <_dtoa_r+0xbd4>)
 8009e50:	f7ff baa8 	b.w	80093a4 <_dtoa_r+0xe4>
 8009e54:	f1b9 0f00 	cmp.w	r9, #0
 8009e58:	dc03      	bgt.n	8009e62 <_dtoa_r+0xba2>
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	f73f aec9 	bgt.w	8009bf4 <_dtoa_r+0x934>
 8009e62:	9d00      	ldr	r5, [sp, #0]
 8009e64:	4631      	mov	r1, r6
 8009e66:	4658      	mov	r0, fp
 8009e68:	f7ff f99c 	bl	80091a4 <quorem>
 8009e6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009e70:	f805 3b01 	strb.w	r3, [r5], #1
 8009e74:	9a00      	ldr	r2, [sp, #0]
 8009e76:	1aaa      	subs	r2, r5, r2
 8009e78:	4591      	cmp	r9, r2
 8009e7a:	ddba      	ble.n	8009df2 <_dtoa_r+0xb32>
 8009e7c:	4659      	mov	r1, fp
 8009e7e:	2300      	movs	r3, #0
 8009e80:	220a      	movs	r2, #10
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 f9ba 	bl	800a1fc <__multadd>
 8009e88:	4683      	mov	fp, r0
 8009e8a:	e7eb      	b.n	8009e64 <_dtoa_r+0xba4>
 8009e8c:	0800b0a4 	.word	0x0800b0a4
 8009e90:	0800aefc 	.word	0x0800aefc
 8009e94:	0800b021 	.word	0x0800b021

08009e98 <__sflush_r>:
 8009e98:	898a      	ldrh	r2, [r1, #12]
 8009e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	0710      	lsls	r0, r2, #28
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	d458      	bmi.n	8009f58 <__sflush_r+0xc0>
 8009ea6:	684b      	ldr	r3, [r1, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dc05      	bgt.n	8009eb8 <__sflush_r+0x20>
 8009eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dc02      	bgt.n	8009eb8 <__sflush_r+0x20>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	d0f9      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ec4:	682f      	ldr	r7, [r5, #0]
 8009ec6:	602b      	str	r3, [r5, #0]
 8009ec8:	d032      	beq.n	8009f30 <__sflush_r+0x98>
 8009eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	075a      	lsls	r2, r3, #29
 8009ed0:	d505      	bpl.n	8009ede <__sflush_r+0x46>
 8009ed2:	6863      	ldr	r3, [r4, #4]
 8009ed4:	1ac0      	subs	r0, r0, r3
 8009ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ed8:	b10b      	cbz	r3, 8009ede <__sflush_r+0x46>
 8009eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009edc:	1ac0      	subs	r0, r0, r3
 8009ede:	2300      	movs	r3, #0
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ee4:	6a21      	ldr	r1, [r4, #32]
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b0      	blx	r6
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	d106      	bne.n	8009efe <__sflush_r+0x66>
 8009ef0:	6829      	ldr	r1, [r5, #0]
 8009ef2:	291d      	cmp	r1, #29
 8009ef4:	d82c      	bhi.n	8009f50 <__sflush_r+0xb8>
 8009ef6:	4a2a      	ldr	r2, [pc, #168]	; (8009fa0 <__sflush_r+0x108>)
 8009ef8:	40ca      	lsrs	r2, r1
 8009efa:	07d6      	lsls	r6, r2, #31
 8009efc:	d528      	bpl.n	8009f50 <__sflush_r+0xb8>
 8009efe:	2200      	movs	r2, #0
 8009f00:	6062      	str	r2, [r4, #4]
 8009f02:	04d9      	lsls	r1, r3, #19
 8009f04:	6922      	ldr	r2, [r4, #16]
 8009f06:	6022      	str	r2, [r4, #0]
 8009f08:	d504      	bpl.n	8009f14 <__sflush_r+0x7c>
 8009f0a:	1c42      	adds	r2, r0, #1
 8009f0c:	d101      	bne.n	8009f12 <__sflush_r+0x7a>
 8009f0e:	682b      	ldr	r3, [r5, #0]
 8009f10:	b903      	cbnz	r3, 8009f14 <__sflush_r+0x7c>
 8009f12:	6560      	str	r0, [r4, #84]	; 0x54
 8009f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f16:	602f      	str	r7, [r5, #0]
 8009f18:	2900      	cmp	r1, #0
 8009f1a:	d0ca      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f20:	4299      	cmp	r1, r3
 8009f22:	d002      	beq.n	8009f2a <__sflush_r+0x92>
 8009f24:	4628      	mov	r0, r5
 8009f26:	f000 fc95 	bl	800a854 <_free_r>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f2e:	e7c1      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f30:	6a21      	ldr	r1, [r4, #32]
 8009f32:	2301      	movs	r3, #1
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b0      	blx	r6
 8009f38:	1c41      	adds	r1, r0, #1
 8009f3a:	d1c7      	bne.n	8009ecc <__sflush_r+0x34>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0c4      	beq.n	8009ecc <__sflush_r+0x34>
 8009f42:	2b1d      	cmp	r3, #29
 8009f44:	d001      	beq.n	8009f4a <__sflush_r+0xb2>
 8009f46:	2b16      	cmp	r3, #22
 8009f48:	d101      	bne.n	8009f4e <__sflush_r+0xb6>
 8009f4a:	602f      	str	r7, [r5, #0]
 8009f4c:	e7b1      	b.n	8009eb2 <__sflush_r+0x1a>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	e7ad      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f58:	690f      	ldr	r7, [r1, #16]
 8009f5a:	2f00      	cmp	r7, #0
 8009f5c:	d0a9      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009f5e:	0793      	lsls	r3, r2, #30
 8009f60:	680e      	ldr	r6, [r1, #0]
 8009f62:	bf08      	it	eq
 8009f64:	694b      	ldreq	r3, [r1, #20]
 8009f66:	600f      	str	r7, [r1, #0]
 8009f68:	bf18      	it	ne
 8009f6a:	2300      	movne	r3, #0
 8009f6c:	eba6 0807 	sub.w	r8, r6, r7
 8009f70:	608b      	str	r3, [r1, #8]
 8009f72:	f1b8 0f00 	cmp.w	r8, #0
 8009f76:	dd9c      	ble.n	8009eb2 <__sflush_r+0x1a>
 8009f78:	6a21      	ldr	r1, [r4, #32]
 8009f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f7c:	4643      	mov	r3, r8
 8009f7e:	463a      	mov	r2, r7
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b0      	blx	r6
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dc06      	bgt.n	8009f96 <__sflush_r+0xfe>
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8e:	81a3      	strh	r3, [r4, #12]
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	e78e      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f96:	4407      	add	r7, r0
 8009f98:	eba8 0800 	sub.w	r8, r8, r0
 8009f9c:	e7e9      	b.n	8009f72 <__sflush_r+0xda>
 8009f9e:	bf00      	nop
 8009fa0:	20400001 	.word	0x20400001

08009fa4 <_fflush_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	690b      	ldr	r3, [r1, #16]
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	b913      	cbnz	r3, 8009fb4 <_fflush_r+0x10>
 8009fae:	2500      	movs	r5, #0
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	b118      	cbz	r0, 8009fbe <_fflush_r+0x1a>
 8009fb6:	6983      	ldr	r3, [r0, #24]
 8009fb8:	b90b      	cbnz	r3, 8009fbe <_fflush_r+0x1a>
 8009fba:	f7fe f93d 	bl	8008238 <__sinit>
 8009fbe:	4b14      	ldr	r3, [pc, #80]	; (800a010 <_fflush_r+0x6c>)
 8009fc0:	429c      	cmp	r4, r3
 8009fc2:	d11b      	bne.n	8009ffc <_fflush_r+0x58>
 8009fc4:	686c      	ldr	r4, [r5, #4]
 8009fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0ef      	beq.n	8009fae <_fflush_r+0xa>
 8009fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fd0:	07d0      	lsls	r0, r2, #31
 8009fd2:	d404      	bmi.n	8009fde <_fflush_r+0x3a>
 8009fd4:	0599      	lsls	r1, r3, #22
 8009fd6:	d402      	bmi.n	8009fde <_fflush_r+0x3a>
 8009fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fda:	f7fe f9f0 	bl	80083be <__retarget_lock_acquire_recursive>
 8009fde:	4628      	mov	r0, r5
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	f7ff ff59 	bl	8009e98 <__sflush_r>
 8009fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fe8:	07da      	lsls	r2, r3, #31
 8009fea:	4605      	mov	r5, r0
 8009fec:	d4e0      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	059b      	lsls	r3, r3, #22
 8009ff2:	d4dd      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff6:	f7fe f9e3 	bl	80083c0 <__retarget_lock_release_recursive>
 8009ffa:	e7d9      	b.n	8009fb0 <_fflush_r+0xc>
 8009ffc:	4b05      	ldr	r3, [pc, #20]	; (800a014 <_fflush_r+0x70>)
 8009ffe:	429c      	cmp	r4, r3
 800a000:	d101      	bne.n	800a006 <_fflush_r+0x62>
 800a002:	68ac      	ldr	r4, [r5, #8]
 800a004:	e7df      	b.n	8009fc6 <_fflush_r+0x22>
 800a006:	4b04      	ldr	r3, [pc, #16]	; (800a018 <_fflush_r+0x74>)
 800a008:	429c      	cmp	r4, r3
 800a00a:	bf08      	it	eq
 800a00c:	68ec      	ldreq	r4, [r5, #12]
 800a00e:	e7da      	b.n	8009fc6 <_fflush_r+0x22>
 800a010:	0800aea8 	.word	0x0800aea8
 800a014:	0800aec8 	.word	0x0800aec8
 800a018:	0800ae88 	.word	0x0800ae88

0800a01c <_localeconv_r>:
 800a01c:	4800      	ldr	r0, [pc, #0]	; (800a020 <_localeconv_r+0x4>)
 800a01e:	4770      	bx	lr
 800a020:	200001b4 	.word	0x200001b4

0800a024 <_lseek_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d07      	ldr	r5, [pc, #28]	; (800a044 <_lseek_r+0x20>)
 800a028:	4604      	mov	r4, r0
 800a02a:	4608      	mov	r0, r1
 800a02c:	4611      	mov	r1, r2
 800a02e:	2200      	movs	r2, #0
 800a030:	602a      	str	r2, [r5, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	f7f8 f9ae 	bl	8002394 <_lseek>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_lseek_r+0x1e>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_lseek_r+0x1e>
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	20005274 	.word	0x20005274

0800a048 <__swhatbuf_r>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	460e      	mov	r6, r1
 800a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a050:	2900      	cmp	r1, #0
 800a052:	b096      	sub	sp, #88	; 0x58
 800a054:	4614      	mov	r4, r2
 800a056:	461d      	mov	r5, r3
 800a058:	da07      	bge.n	800a06a <__swhatbuf_r+0x22>
 800a05a:	2300      	movs	r3, #0
 800a05c:	602b      	str	r3, [r5, #0]
 800a05e:	89b3      	ldrh	r3, [r6, #12]
 800a060:	061a      	lsls	r2, r3, #24
 800a062:	d410      	bmi.n	800a086 <__swhatbuf_r+0x3e>
 800a064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a068:	e00e      	b.n	800a088 <__swhatbuf_r+0x40>
 800a06a:	466a      	mov	r2, sp
 800a06c:	f000 fdde 	bl	800ac2c <_fstat_r>
 800a070:	2800      	cmp	r0, #0
 800a072:	dbf2      	blt.n	800a05a <__swhatbuf_r+0x12>
 800a074:	9a01      	ldr	r2, [sp, #4]
 800a076:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a07a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a07e:	425a      	negs	r2, r3
 800a080:	415a      	adcs	r2, r3
 800a082:	602a      	str	r2, [r5, #0]
 800a084:	e7ee      	b.n	800a064 <__swhatbuf_r+0x1c>
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	2000      	movs	r0, #0
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	b016      	add	sp, #88	; 0x58
 800a08e:	bd70      	pop	{r4, r5, r6, pc}

0800a090 <__smakebuf_r>:
 800a090:	898b      	ldrh	r3, [r1, #12]
 800a092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a094:	079d      	lsls	r5, r3, #30
 800a096:	4606      	mov	r6, r0
 800a098:	460c      	mov	r4, r1
 800a09a:	d507      	bpl.n	800a0ac <__smakebuf_r+0x1c>
 800a09c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	6123      	str	r3, [r4, #16]
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	6163      	str	r3, [r4, #20]
 800a0a8:	b002      	add	sp, #8
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	ab01      	add	r3, sp, #4
 800a0ae:	466a      	mov	r2, sp
 800a0b0:	f7ff ffca 	bl	800a048 <__swhatbuf_r>
 800a0b4:	9900      	ldr	r1, [sp, #0]
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7fe f999 	bl	80083f0 <_malloc_r>
 800a0be:	b948      	cbnz	r0, 800a0d4 <__smakebuf_r+0x44>
 800a0c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c4:	059a      	lsls	r2, r3, #22
 800a0c6:	d4ef      	bmi.n	800a0a8 <__smakebuf_r+0x18>
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	81a3      	strh	r3, [r4, #12]
 800a0d2:	e7e3      	b.n	800a09c <__smakebuf_r+0xc>
 800a0d4:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <__smakebuf_r+0x7c>)
 800a0d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	6020      	str	r0, [r4, #0]
 800a0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e0:	81a3      	strh	r3, [r4, #12]
 800a0e2:	9b00      	ldr	r3, [sp, #0]
 800a0e4:	6163      	str	r3, [r4, #20]
 800a0e6:	9b01      	ldr	r3, [sp, #4]
 800a0e8:	6120      	str	r0, [r4, #16]
 800a0ea:	b15b      	cbz	r3, 800a104 <__smakebuf_r+0x74>
 800a0ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f000 fdad 	bl	800ac50 <_isatty_r>
 800a0f6:	b128      	cbz	r0, 800a104 <__smakebuf_r+0x74>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	f023 0303 	bic.w	r3, r3, #3
 800a0fe:	f043 0301 	orr.w	r3, r3, #1
 800a102:	81a3      	strh	r3, [r4, #12]
 800a104:	89a0      	ldrh	r0, [r4, #12]
 800a106:	4305      	orrs	r5, r0
 800a108:	81a5      	strh	r5, [r4, #12]
 800a10a:	e7cd      	b.n	800a0a8 <__smakebuf_r+0x18>
 800a10c:	080081d1 	.word	0x080081d1

0800a110 <malloc>:
 800a110:	4b02      	ldr	r3, [pc, #8]	; (800a11c <malloc+0xc>)
 800a112:	4601      	mov	r1, r0
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	f7fe b96b 	b.w	80083f0 <_malloc_r>
 800a11a:	bf00      	nop
 800a11c:	20000060 	.word	0x20000060

0800a120 <__malloc_lock>:
 800a120:	4801      	ldr	r0, [pc, #4]	; (800a128 <__malloc_lock+0x8>)
 800a122:	f7fe b94c 	b.w	80083be <__retarget_lock_acquire_recursive>
 800a126:	bf00      	nop
 800a128:	2000526c 	.word	0x2000526c

0800a12c <__malloc_unlock>:
 800a12c:	4801      	ldr	r0, [pc, #4]	; (800a134 <__malloc_unlock+0x8>)
 800a12e:	f7fe b947 	b.w	80083c0 <__retarget_lock_release_recursive>
 800a132:	bf00      	nop
 800a134:	2000526c 	.word	0x2000526c

0800a138 <_Balloc>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a13c:	4604      	mov	r4, r0
 800a13e:	460d      	mov	r5, r1
 800a140:	b976      	cbnz	r6, 800a160 <_Balloc+0x28>
 800a142:	2010      	movs	r0, #16
 800a144:	f7ff ffe4 	bl	800a110 <malloc>
 800a148:	4602      	mov	r2, r0
 800a14a:	6260      	str	r0, [r4, #36]	; 0x24
 800a14c:	b920      	cbnz	r0, 800a158 <_Balloc+0x20>
 800a14e:	4b18      	ldr	r3, [pc, #96]	; (800a1b0 <_Balloc+0x78>)
 800a150:	4818      	ldr	r0, [pc, #96]	; (800a1b4 <_Balloc+0x7c>)
 800a152:	2166      	movs	r1, #102	; 0x66
 800a154:	f000 fd3a 	bl	800abcc <__assert_func>
 800a158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a15c:	6006      	str	r6, [r0, #0]
 800a15e:	60c6      	str	r6, [r0, #12]
 800a160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a162:	68f3      	ldr	r3, [r6, #12]
 800a164:	b183      	cbz	r3, 800a188 <_Balloc+0x50>
 800a166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a16e:	b9b8      	cbnz	r0, 800a1a0 <_Balloc+0x68>
 800a170:	2101      	movs	r1, #1
 800a172:	fa01 f605 	lsl.w	r6, r1, r5
 800a176:	1d72      	adds	r2, r6, #5
 800a178:	0092      	lsls	r2, r2, #2
 800a17a:	4620      	mov	r0, r4
 800a17c:	f000 fb5a 	bl	800a834 <_calloc_r>
 800a180:	b160      	cbz	r0, 800a19c <_Balloc+0x64>
 800a182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a186:	e00e      	b.n	800a1a6 <_Balloc+0x6e>
 800a188:	2221      	movs	r2, #33	; 0x21
 800a18a:	2104      	movs	r1, #4
 800a18c:	4620      	mov	r0, r4
 800a18e:	f000 fb51 	bl	800a834 <_calloc_r>
 800a192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a194:	60f0      	str	r0, [r6, #12]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e4      	bne.n	800a166 <_Balloc+0x2e>
 800a19c:	2000      	movs	r0, #0
 800a19e:	bd70      	pop	{r4, r5, r6, pc}
 800a1a0:	6802      	ldr	r2, [r0, #0]
 800a1a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1ac:	e7f7      	b.n	800a19e <_Balloc+0x66>
 800a1ae:	bf00      	nop
 800a1b0:	0800b02e 	.word	0x0800b02e
 800a1b4:	0800b0b5 	.word	0x0800b0b5

0800a1b8 <_Bfree>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1bc:	4605      	mov	r5, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	b976      	cbnz	r6, 800a1e0 <_Bfree+0x28>
 800a1c2:	2010      	movs	r0, #16
 800a1c4:	f7ff ffa4 	bl	800a110 <malloc>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	6268      	str	r0, [r5, #36]	; 0x24
 800a1cc:	b920      	cbnz	r0, 800a1d8 <_Bfree+0x20>
 800a1ce:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <_Bfree+0x3c>)
 800a1d0:	4809      	ldr	r0, [pc, #36]	; (800a1f8 <_Bfree+0x40>)
 800a1d2:	218a      	movs	r1, #138	; 0x8a
 800a1d4:	f000 fcfa 	bl	800abcc <__assert_func>
 800a1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1dc:	6006      	str	r6, [r0, #0]
 800a1de:	60c6      	str	r6, [r0, #12]
 800a1e0:	b13c      	cbz	r4, 800a1f2 <_Bfree+0x3a>
 800a1e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1e4:	6862      	ldr	r2, [r4, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1ec:	6021      	str	r1, [r4, #0]
 800a1ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	0800b02e 	.word	0x0800b02e
 800a1f8:	0800b0b5 	.word	0x0800b0b5

0800a1fc <__multadd>:
 800a1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a200:	690e      	ldr	r6, [r1, #16]
 800a202:	4607      	mov	r7, r0
 800a204:	4698      	mov	r8, r3
 800a206:	460c      	mov	r4, r1
 800a208:	f101 0014 	add.w	r0, r1, #20
 800a20c:	2300      	movs	r3, #0
 800a20e:	6805      	ldr	r5, [r0, #0]
 800a210:	b2a9      	uxth	r1, r5
 800a212:	fb02 8101 	mla	r1, r2, r1, r8
 800a216:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a21a:	0c2d      	lsrs	r5, r5, #16
 800a21c:	fb02 c505 	mla	r5, r2, r5, ip
 800a220:	b289      	uxth	r1, r1
 800a222:	3301      	adds	r3, #1
 800a224:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a228:	429e      	cmp	r6, r3
 800a22a:	f840 1b04 	str.w	r1, [r0], #4
 800a22e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a232:	dcec      	bgt.n	800a20e <__multadd+0x12>
 800a234:	f1b8 0f00 	cmp.w	r8, #0
 800a238:	d022      	beq.n	800a280 <__multadd+0x84>
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	42b3      	cmp	r3, r6
 800a23e:	dc19      	bgt.n	800a274 <__multadd+0x78>
 800a240:	6861      	ldr	r1, [r4, #4]
 800a242:	4638      	mov	r0, r7
 800a244:	3101      	adds	r1, #1
 800a246:	f7ff ff77 	bl	800a138 <_Balloc>
 800a24a:	4605      	mov	r5, r0
 800a24c:	b928      	cbnz	r0, 800a25a <__multadd+0x5e>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b0d      	ldr	r3, [pc, #52]	; (800a288 <__multadd+0x8c>)
 800a252:	480e      	ldr	r0, [pc, #56]	; (800a28c <__multadd+0x90>)
 800a254:	21b5      	movs	r1, #181	; 0xb5
 800a256:	f000 fcb9 	bl	800abcc <__assert_func>
 800a25a:	6922      	ldr	r2, [r4, #16]
 800a25c:	3202      	adds	r2, #2
 800a25e:	f104 010c 	add.w	r1, r4, #12
 800a262:	0092      	lsls	r2, r2, #2
 800a264:	300c      	adds	r0, #12
 800a266:	f7fe f8ac 	bl	80083c2 <memcpy>
 800a26a:	4621      	mov	r1, r4
 800a26c:	4638      	mov	r0, r7
 800a26e:	f7ff ffa3 	bl	800a1b8 <_Bfree>
 800a272:	462c      	mov	r4, r5
 800a274:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a278:	3601      	adds	r6, #1
 800a27a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a27e:	6126      	str	r6, [r4, #16]
 800a280:	4620      	mov	r0, r4
 800a282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a286:	bf00      	nop
 800a288:	0800b0a4 	.word	0x0800b0a4
 800a28c:	0800b0b5 	.word	0x0800b0b5

0800a290 <__hi0bits>:
 800a290:	0c03      	lsrs	r3, r0, #16
 800a292:	041b      	lsls	r3, r3, #16
 800a294:	b9d3      	cbnz	r3, 800a2cc <__hi0bits+0x3c>
 800a296:	0400      	lsls	r0, r0, #16
 800a298:	2310      	movs	r3, #16
 800a29a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a29e:	bf04      	itt	eq
 800a2a0:	0200      	lsleq	r0, r0, #8
 800a2a2:	3308      	addeq	r3, #8
 800a2a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2a8:	bf04      	itt	eq
 800a2aa:	0100      	lsleq	r0, r0, #4
 800a2ac:	3304      	addeq	r3, #4
 800a2ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2b2:	bf04      	itt	eq
 800a2b4:	0080      	lsleq	r0, r0, #2
 800a2b6:	3302      	addeq	r3, #2
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	db05      	blt.n	800a2c8 <__hi0bits+0x38>
 800a2bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2c0:	f103 0301 	add.w	r3, r3, #1
 800a2c4:	bf08      	it	eq
 800a2c6:	2320      	moveq	r3, #32
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	4770      	bx	lr
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	e7e4      	b.n	800a29a <__hi0bits+0xa>

0800a2d0 <__lo0bits>:
 800a2d0:	6803      	ldr	r3, [r0, #0]
 800a2d2:	f013 0207 	ands.w	r2, r3, #7
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	d00b      	beq.n	800a2f2 <__lo0bits+0x22>
 800a2da:	07da      	lsls	r2, r3, #31
 800a2dc:	d424      	bmi.n	800a328 <__lo0bits+0x58>
 800a2de:	0798      	lsls	r0, r3, #30
 800a2e0:	bf49      	itett	mi
 800a2e2:	085b      	lsrmi	r3, r3, #1
 800a2e4:	089b      	lsrpl	r3, r3, #2
 800a2e6:	2001      	movmi	r0, #1
 800a2e8:	600b      	strmi	r3, [r1, #0]
 800a2ea:	bf5c      	itt	pl
 800a2ec:	600b      	strpl	r3, [r1, #0]
 800a2ee:	2002      	movpl	r0, #2
 800a2f0:	4770      	bx	lr
 800a2f2:	b298      	uxth	r0, r3
 800a2f4:	b9b0      	cbnz	r0, 800a324 <__lo0bits+0x54>
 800a2f6:	0c1b      	lsrs	r3, r3, #16
 800a2f8:	2010      	movs	r0, #16
 800a2fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2fe:	bf04      	itt	eq
 800a300:	0a1b      	lsreq	r3, r3, #8
 800a302:	3008      	addeq	r0, #8
 800a304:	071a      	lsls	r2, r3, #28
 800a306:	bf04      	itt	eq
 800a308:	091b      	lsreq	r3, r3, #4
 800a30a:	3004      	addeq	r0, #4
 800a30c:	079a      	lsls	r2, r3, #30
 800a30e:	bf04      	itt	eq
 800a310:	089b      	lsreq	r3, r3, #2
 800a312:	3002      	addeq	r0, #2
 800a314:	07da      	lsls	r2, r3, #31
 800a316:	d403      	bmi.n	800a320 <__lo0bits+0x50>
 800a318:	085b      	lsrs	r3, r3, #1
 800a31a:	f100 0001 	add.w	r0, r0, #1
 800a31e:	d005      	beq.n	800a32c <__lo0bits+0x5c>
 800a320:	600b      	str	r3, [r1, #0]
 800a322:	4770      	bx	lr
 800a324:	4610      	mov	r0, r2
 800a326:	e7e8      	b.n	800a2fa <__lo0bits+0x2a>
 800a328:	2000      	movs	r0, #0
 800a32a:	4770      	bx	lr
 800a32c:	2020      	movs	r0, #32
 800a32e:	4770      	bx	lr

0800a330 <__i2b>:
 800a330:	b510      	push	{r4, lr}
 800a332:	460c      	mov	r4, r1
 800a334:	2101      	movs	r1, #1
 800a336:	f7ff feff 	bl	800a138 <_Balloc>
 800a33a:	4602      	mov	r2, r0
 800a33c:	b928      	cbnz	r0, 800a34a <__i2b+0x1a>
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <__i2b+0x24>)
 800a340:	4805      	ldr	r0, [pc, #20]	; (800a358 <__i2b+0x28>)
 800a342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a346:	f000 fc41 	bl	800abcc <__assert_func>
 800a34a:	2301      	movs	r3, #1
 800a34c:	6144      	str	r4, [r0, #20]
 800a34e:	6103      	str	r3, [r0, #16]
 800a350:	bd10      	pop	{r4, pc}
 800a352:	bf00      	nop
 800a354:	0800b0a4 	.word	0x0800b0a4
 800a358:	0800b0b5 	.word	0x0800b0b5

0800a35c <__multiply>:
 800a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	4614      	mov	r4, r2
 800a362:	690a      	ldr	r2, [r1, #16]
 800a364:	6923      	ldr	r3, [r4, #16]
 800a366:	429a      	cmp	r2, r3
 800a368:	bfb8      	it	lt
 800a36a:	460b      	movlt	r3, r1
 800a36c:	460d      	mov	r5, r1
 800a36e:	bfbc      	itt	lt
 800a370:	4625      	movlt	r5, r4
 800a372:	461c      	movlt	r4, r3
 800a374:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a378:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a37c:	68ab      	ldr	r3, [r5, #8]
 800a37e:	6869      	ldr	r1, [r5, #4]
 800a380:	eb0a 0709 	add.w	r7, sl, r9
 800a384:	42bb      	cmp	r3, r7
 800a386:	b085      	sub	sp, #20
 800a388:	bfb8      	it	lt
 800a38a:	3101      	addlt	r1, #1
 800a38c:	f7ff fed4 	bl	800a138 <_Balloc>
 800a390:	b930      	cbnz	r0, 800a3a0 <__multiply+0x44>
 800a392:	4602      	mov	r2, r0
 800a394:	4b42      	ldr	r3, [pc, #264]	; (800a4a0 <__multiply+0x144>)
 800a396:	4843      	ldr	r0, [pc, #268]	; (800a4a4 <__multiply+0x148>)
 800a398:	f240 115d 	movw	r1, #349	; 0x15d
 800a39c:	f000 fc16 	bl	800abcc <__assert_func>
 800a3a0:	f100 0614 	add.w	r6, r0, #20
 800a3a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a3a8:	4633      	mov	r3, r6
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	4543      	cmp	r3, r8
 800a3ae:	d31e      	bcc.n	800a3ee <__multiply+0x92>
 800a3b0:	f105 0c14 	add.w	ip, r5, #20
 800a3b4:	f104 0314 	add.w	r3, r4, #20
 800a3b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a3bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a3c0:	9202      	str	r2, [sp, #8]
 800a3c2:	ebac 0205 	sub.w	r2, ip, r5
 800a3c6:	3a15      	subs	r2, #21
 800a3c8:	f022 0203 	bic.w	r2, r2, #3
 800a3cc:	3204      	adds	r2, #4
 800a3ce:	f105 0115 	add.w	r1, r5, #21
 800a3d2:	458c      	cmp	ip, r1
 800a3d4:	bf38      	it	cc
 800a3d6:	2204      	movcc	r2, #4
 800a3d8:	9201      	str	r2, [sp, #4]
 800a3da:	9a02      	ldr	r2, [sp, #8]
 800a3dc:	9303      	str	r3, [sp, #12]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d808      	bhi.n	800a3f4 <__multiply+0x98>
 800a3e2:	2f00      	cmp	r7, #0
 800a3e4:	dc55      	bgt.n	800a492 <__multiply+0x136>
 800a3e6:	6107      	str	r7, [r0, #16]
 800a3e8:	b005      	add	sp, #20
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	f843 2b04 	str.w	r2, [r3], #4
 800a3f2:	e7db      	b.n	800a3ac <__multiply+0x50>
 800a3f4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a3f8:	f1ba 0f00 	cmp.w	sl, #0
 800a3fc:	d020      	beq.n	800a440 <__multiply+0xe4>
 800a3fe:	f105 0e14 	add.w	lr, r5, #20
 800a402:	46b1      	mov	r9, r6
 800a404:	2200      	movs	r2, #0
 800a406:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a40a:	f8d9 b000 	ldr.w	fp, [r9]
 800a40e:	b2a1      	uxth	r1, r4
 800a410:	fa1f fb8b 	uxth.w	fp, fp
 800a414:	fb0a b101 	mla	r1, sl, r1, fp
 800a418:	4411      	add	r1, r2
 800a41a:	f8d9 2000 	ldr.w	r2, [r9]
 800a41e:	0c24      	lsrs	r4, r4, #16
 800a420:	0c12      	lsrs	r2, r2, #16
 800a422:	fb0a 2404 	mla	r4, sl, r4, r2
 800a426:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a42a:	b289      	uxth	r1, r1
 800a42c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a430:	45f4      	cmp	ip, lr
 800a432:	f849 1b04 	str.w	r1, [r9], #4
 800a436:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a43a:	d8e4      	bhi.n	800a406 <__multiply+0xaa>
 800a43c:	9901      	ldr	r1, [sp, #4]
 800a43e:	5072      	str	r2, [r6, r1]
 800a440:	9a03      	ldr	r2, [sp, #12]
 800a442:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a446:	3304      	adds	r3, #4
 800a448:	f1b9 0f00 	cmp.w	r9, #0
 800a44c:	d01f      	beq.n	800a48e <__multiply+0x132>
 800a44e:	6834      	ldr	r4, [r6, #0]
 800a450:	f105 0114 	add.w	r1, r5, #20
 800a454:	46b6      	mov	lr, r6
 800a456:	f04f 0a00 	mov.w	sl, #0
 800a45a:	880a      	ldrh	r2, [r1, #0]
 800a45c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a460:	fb09 b202 	mla	r2, r9, r2, fp
 800a464:	4492      	add	sl, r2
 800a466:	b2a4      	uxth	r4, r4
 800a468:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a46c:	f84e 4b04 	str.w	r4, [lr], #4
 800a470:	f851 4b04 	ldr.w	r4, [r1], #4
 800a474:	f8be 2000 	ldrh.w	r2, [lr]
 800a478:	0c24      	lsrs	r4, r4, #16
 800a47a:	fb09 2404 	mla	r4, r9, r4, r2
 800a47e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a482:	458c      	cmp	ip, r1
 800a484:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a488:	d8e7      	bhi.n	800a45a <__multiply+0xfe>
 800a48a:	9a01      	ldr	r2, [sp, #4]
 800a48c:	50b4      	str	r4, [r6, r2]
 800a48e:	3604      	adds	r6, #4
 800a490:	e7a3      	b.n	800a3da <__multiply+0x7e>
 800a492:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1a5      	bne.n	800a3e6 <__multiply+0x8a>
 800a49a:	3f01      	subs	r7, #1
 800a49c:	e7a1      	b.n	800a3e2 <__multiply+0x86>
 800a49e:	bf00      	nop
 800a4a0:	0800b0a4 	.word	0x0800b0a4
 800a4a4:	0800b0b5 	.word	0x0800b0b5

0800a4a8 <__pow5mult>:
 800a4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4ac:	4615      	mov	r5, r2
 800a4ae:	f012 0203 	ands.w	r2, r2, #3
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	460f      	mov	r7, r1
 800a4b6:	d007      	beq.n	800a4c8 <__pow5mult+0x20>
 800a4b8:	4c25      	ldr	r4, [pc, #148]	; (800a550 <__pow5mult+0xa8>)
 800a4ba:	3a01      	subs	r2, #1
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4c2:	f7ff fe9b 	bl	800a1fc <__multadd>
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	10ad      	asrs	r5, r5, #2
 800a4ca:	d03d      	beq.n	800a548 <__pow5mult+0xa0>
 800a4cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4ce:	b97c      	cbnz	r4, 800a4f0 <__pow5mult+0x48>
 800a4d0:	2010      	movs	r0, #16
 800a4d2:	f7ff fe1d 	bl	800a110 <malloc>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	6270      	str	r0, [r6, #36]	; 0x24
 800a4da:	b928      	cbnz	r0, 800a4e8 <__pow5mult+0x40>
 800a4dc:	4b1d      	ldr	r3, [pc, #116]	; (800a554 <__pow5mult+0xac>)
 800a4de:	481e      	ldr	r0, [pc, #120]	; (800a558 <__pow5mult+0xb0>)
 800a4e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a4e4:	f000 fb72 	bl	800abcc <__assert_func>
 800a4e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4ec:	6004      	str	r4, [r0, #0]
 800a4ee:	60c4      	str	r4, [r0, #12]
 800a4f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a4f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4f8:	b94c      	cbnz	r4, 800a50e <__pow5mult+0x66>
 800a4fa:	f240 2171 	movw	r1, #625	; 0x271
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ff16 	bl	800a330 <__i2b>
 800a504:	2300      	movs	r3, #0
 800a506:	f8c8 0008 	str.w	r0, [r8, #8]
 800a50a:	4604      	mov	r4, r0
 800a50c:	6003      	str	r3, [r0, #0]
 800a50e:	f04f 0900 	mov.w	r9, #0
 800a512:	07eb      	lsls	r3, r5, #31
 800a514:	d50a      	bpl.n	800a52c <__pow5mult+0x84>
 800a516:	4639      	mov	r1, r7
 800a518:	4622      	mov	r2, r4
 800a51a:	4630      	mov	r0, r6
 800a51c:	f7ff ff1e 	bl	800a35c <__multiply>
 800a520:	4639      	mov	r1, r7
 800a522:	4680      	mov	r8, r0
 800a524:	4630      	mov	r0, r6
 800a526:	f7ff fe47 	bl	800a1b8 <_Bfree>
 800a52a:	4647      	mov	r7, r8
 800a52c:	106d      	asrs	r5, r5, #1
 800a52e:	d00b      	beq.n	800a548 <__pow5mult+0xa0>
 800a530:	6820      	ldr	r0, [r4, #0]
 800a532:	b938      	cbnz	r0, 800a544 <__pow5mult+0x9c>
 800a534:	4622      	mov	r2, r4
 800a536:	4621      	mov	r1, r4
 800a538:	4630      	mov	r0, r6
 800a53a:	f7ff ff0f 	bl	800a35c <__multiply>
 800a53e:	6020      	str	r0, [r4, #0]
 800a540:	f8c0 9000 	str.w	r9, [r0]
 800a544:	4604      	mov	r4, r0
 800a546:	e7e4      	b.n	800a512 <__pow5mult+0x6a>
 800a548:	4638      	mov	r0, r7
 800a54a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a54e:	bf00      	nop
 800a550:	0800b208 	.word	0x0800b208
 800a554:	0800b02e 	.word	0x0800b02e
 800a558:	0800b0b5 	.word	0x0800b0b5

0800a55c <__lshift>:
 800a55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a560:	460c      	mov	r4, r1
 800a562:	6849      	ldr	r1, [r1, #4]
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	4607      	mov	r7, r0
 800a56e:	4691      	mov	r9, r2
 800a570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a574:	f108 0601 	add.w	r6, r8, #1
 800a578:	42b3      	cmp	r3, r6
 800a57a:	db0b      	blt.n	800a594 <__lshift+0x38>
 800a57c:	4638      	mov	r0, r7
 800a57e:	f7ff fddb 	bl	800a138 <_Balloc>
 800a582:	4605      	mov	r5, r0
 800a584:	b948      	cbnz	r0, 800a59a <__lshift+0x3e>
 800a586:	4602      	mov	r2, r0
 800a588:	4b28      	ldr	r3, [pc, #160]	; (800a62c <__lshift+0xd0>)
 800a58a:	4829      	ldr	r0, [pc, #164]	; (800a630 <__lshift+0xd4>)
 800a58c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a590:	f000 fb1c 	bl	800abcc <__assert_func>
 800a594:	3101      	adds	r1, #1
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	e7ee      	b.n	800a578 <__lshift+0x1c>
 800a59a:	2300      	movs	r3, #0
 800a59c:	f100 0114 	add.w	r1, r0, #20
 800a5a0:	f100 0210 	add.w	r2, r0, #16
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	4553      	cmp	r3, sl
 800a5a8:	db33      	blt.n	800a612 <__lshift+0xb6>
 800a5aa:	6920      	ldr	r0, [r4, #16]
 800a5ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5b0:	f104 0314 	add.w	r3, r4, #20
 800a5b4:	f019 091f 	ands.w	r9, r9, #31
 800a5b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5c0:	d02b      	beq.n	800a61a <__lshift+0xbe>
 800a5c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a5c6:	468a      	mov	sl, r1
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	6818      	ldr	r0, [r3, #0]
 800a5cc:	fa00 f009 	lsl.w	r0, r0, r9
 800a5d0:	4302      	orrs	r2, r0
 800a5d2:	f84a 2b04 	str.w	r2, [sl], #4
 800a5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5da:	459c      	cmp	ip, r3
 800a5dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5e0:	d8f3      	bhi.n	800a5ca <__lshift+0x6e>
 800a5e2:	ebac 0304 	sub.w	r3, ip, r4
 800a5e6:	3b15      	subs	r3, #21
 800a5e8:	f023 0303 	bic.w	r3, r3, #3
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	f104 0015 	add.w	r0, r4, #21
 800a5f2:	4584      	cmp	ip, r0
 800a5f4:	bf38      	it	cc
 800a5f6:	2304      	movcc	r3, #4
 800a5f8:	50ca      	str	r2, [r1, r3]
 800a5fa:	b10a      	cbz	r2, 800a600 <__lshift+0xa4>
 800a5fc:	f108 0602 	add.w	r6, r8, #2
 800a600:	3e01      	subs	r6, #1
 800a602:	4638      	mov	r0, r7
 800a604:	612e      	str	r6, [r5, #16]
 800a606:	4621      	mov	r1, r4
 800a608:	f7ff fdd6 	bl	800a1b8 <_Bfree>
 800a60c:	4628      	mov	r0, r5
 800a60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a612:	f842 0f04 	str.w	r0, [r2, #4]!
 800a616:	3301      	adds	r3, #1
 800a618:	e7c5      	b.n	800a5a6 <__lshift+0x4a>
 800a61a:	3904      	subs	r1, #4
 800a61c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a620:	f841 2f04 	str.w	r2, [r1, #4]!
 800a624:	459c      	cmp	ip, r3
 800a626:	d8f9      	bhi.n	800a61c <__lshift+0xc0>
 800a628:	e7ea      	b.n	800a600 <__lshift+0xa4>
 800a62a:	bf00      	nop
 800a62c:	0800b0a4 	.word	0x0800b0a4
 800a630:	0800b0b5 	.word	0x0800b0b5

0800a634 <__mcmp>:
 800a634:	b530      	push	{r4, r5, lr}
 800a636:	6902      	ldr	r2, [r0, #16]
 800a638:	690c      	ldr	r4, [r1, #16]
 800a63a:	1b12      	subs	r2, r2, r4
 800a63c:	d10e      	bne.n	800a65c <__mcmp+0x28>
 800a63e:	f100 0314 	add.w	r3, r0, #20
 800a642:	3114      	adds	r1, #20
 800a644:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a648:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a64c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a650:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a654:	42a5      	cmp	r5, r4
 800a656:	d003      	beq.n	800a660 <__mcmp+0x2c>
 800a658:	d305      	bcc.n	800a666 <__mcmp+0x32>
 800a65a:	2201      	movs	r2, #1
 800a65c:	4610      	mov	r0, r2
 800a65e:	bd30      	pop	{r4, r5, pc}
 800a660:	4283      	cmp	r3, r0
 800a662:	d3f3      	bcc.n	800a64c <__mcmp+0x18>
 800a664:	e7fa      	b.n	800a65c <__mcmp+0x28>
 800a666:	f04f 32ff 	mov.w	r2, #4294967295
 800a66a:	e7f7      	b.n	800a65c <__mcmp+0x28>

0800a66c <__mdiff>:
 800a66c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	460c      	mov	r4, r1
 800a672:	4606      	mov	r6, r0
 800a674:	4611      	mov	r1, r2
 800a676:	4620      	mov	r0, r4
 800a678:	4617      	mov	r7, r2
 800a67a:	f7ff ffdb 	bl	800a634 <__mcmp>
 800a67e:	1e05      	subs	r5, r0, #0
 800a680:	d110      	bne.n	800a6a4 <__mdiff+0x38>
 800a682:	4629      	mov	r1, r5
 800a684:	4630      	mov	r0, r6
 800a686:	f7ff fd57 	bl	800a138 <_Balloc>
 800a68a:	b930      	cbnz	r0, 800a69a <__mdiff+0x2e>
 800a68c:	4b39      	ldr	r3, [pc, #228]	; (800a774 <__mdiff+0x108>)
 800a68e:	4602      	mov	r2, r0
 800a690:	f240 2132 	movw	r1, #562	; 0x232
 800a694:	4838      	ldr	r0, [pc, #224]	; (800a778 <__mdiff+0x10c>)
 800a696:	f000 fa99 	bl	800abcc <__assert_func>
 800a69a:	2301      	movs	r3, #1
 800a69c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	bfa4      	itt	ge
 800a6a6:	463b      	movge	r3, r7
 800a6a8:	4627      	movge	r7, r4
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	6879      	ldr	r1, [r7, #4]
 800a6ae:	bfa6      	itte	ge
 800a6b0:	461c      	movge	r4, r3
 800a6b2:	2500      	movge	r5, #0
 800a6b4:	2501      	movlt	r5, #1
 800a6b6:	f7ff fd3f 	bl	800a138 <_Balloc>
 800a6ba:	b920      	cbnz	r0, 800a6c6 <__mdiff+0x5a>
 800a6bc:	4b2d      	ldr	r3, [pc, #180]	; (800a774 <__mdiff+0x108>)
 800a6be:	4602      	mov	r2, r0
 800a6c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6c4:	e7e6      	b.n	800a694 <__mdiff+0x28>
 800a6c6:	693e      	ldr	r6, [r7, #16]
 800a6c8:	60c5      	str	r5, [r0, #12]
 800a6ca:	6925      	ldr	r5, [r4, #16]
 800a6cc:	f107 0114 	add.w	r1, r7, #20
 800a6d0:	f104 0914 	add.w	r9, r4, #20
 800a6d4:	f100 0e14 	add.w	lr, r0, #20
 800a6d8:	f107 0210 	add.w	r2, r7, #16
 800a6dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a6e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a6e4:	46f2      	mov	sl, lr
 800a6e6:	2700      	movs	r7, #0
 800a6e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6f0:	fa1f f883 	uxth.w	r8, r3
 800a6f4:	fa17 f78b 	uxtah	r7, r7, fp
 800a6f8:	0c1b      	lsrs	r3, r3, #16
 800a6fa:	eba7 0808 	sub.w	r8, r7, r8
 800a6fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a706:	fa1f f888 	uxth.w	r8, r8
 800a70a:	141f      	asrs	r7, r3, #16
 800a70c:	454d      	cmp	r5, r9
 800a70e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a712:	f84a 3b04 	str.w	r3, [sl], #4
 800a716:	d8e7      	bhi.n	800a6e8 <__mdiff+0x7c>
 800a718:	1b2b      	subs	r3, r5, r4
 800a71a:	3b15      	subs	r3, #21
 800a71c:	f023 0303 	bic.w	r3, r3, #3
 800a720:	3304      	adds	r3, #4
 800a722:	3415      	adds	r4, #21
 800a724:	42a5      	cmp	r5, r4
 800a726:	bf38      	it	cc
 800a728:	2304      	movcc	r3, #4
 800a72a:	4419      	add	r1, r3
 800a72c:	4473      	add	r3, lr
 800a72e:	469e      	mov	lr, r3
 800a730:	460d      	mov	r5, r1
 800a732:	4565      	cmp	r5, ip
 800a734:	d30e      	bcc.n	800a754 <__mdiff+0xe8>
 800a736:	f10c 0203 	add.w	r2, ip, #3
 800a73a:	1a52      	subs	r2, r2, r1
 800a73c:	f022 0203 	bic.w	r2, r2, #3
 800a740:	3903      	subs	r1, #3
 800a742:	458c      	cmp	ip, r1
 800a744:	bf38      	it	cc
 800a746:	2200      	movcc	r2, #0
 800a748:	441a      	add	r2, r3
 800a74a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a74e:	b17b      	cbz	r3, 800a770 <__mdiff+0x104>
 800a750:	6106      	str	r6, [r0, #16]
 800a752:	e7a5      	b.n	800a6a0 <__mdiff+0x34>
 800a754:	f855 8b04 	ldr.w	r8, [r5], #4
 800a758:	fa17 f488 	uxtah	r4, r7, r8
 800a75c:	1422      	asrs	r2, r4, #16
 800a75e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a762:	b2a4      	uxth	r4, r4
 800a764:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a768:	f84e 4b04 	str.w	r4, [lr], #4
 800a76c:	1417      	asrs	r7, r2, #16
 800a76e:	e7e0      	b.n	800a732 <__mdiff+0xc6>
 800a770:	3e01      	subs	r6, #1
 800a772:	e7ea      	b.n	800a74a <__mdiff+0xde>
 800a774:	0800b0a4 	.word	0x0800b0a4
 800a778:	0800b0b5 	.word	0x0800b0b5

0800a77c <__d2b>:
 800a77c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a780:	4689      	mov	r9, r1
 800a782:	2101      	movs	r1, #1
 800a784:	ec57 6b10 	vmov	r6, r7, d0
 800a788:	4690      	mov	r8, r2
 800a78a:	f7ff fcd5 	bl	800a138 <_Balloc>
 800a78e:	4604      	mov	r4, r0
 800a790:	b930      	cbnz	r0, 800a7a0 <__d2b+0x24>
 800a792:	4602      	mov	r2, r0
 800a794:	4b25      	ldr	r3, [pc, #148]	; (800a82c <__d2b+0xb0>)
 800a796:	4826      	ldr	r0, [pc, #152]	; (800a830 <__d2b+0xb4>)
 800a798:	f240 310a 	movw	r1, #778	; 0x30a
 800a79c:	f000 fa16 	bl	800abcc <__assert_func>
 800a7a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a7a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a7a8:	bb35      	cbnz	r5, 800a7f8 <__d2b+0x7c>
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	d028      	beq.n	800a802 <__d2b+0x86>
 800a7b0:	4668      	mov	r0, sp
 800a7b2:	9600      	str	r6, [sp, #0]
 800a7b4:	f7ff fd8c 	bl	800a2d0 <__lo0bits>
 800a7b8:	9900      	ldr	r1, [sp, #0]
 800a7ba:	b300      	cbz	r0, 800a7fe <__d2b+0x82>
 800a7bc:	9a01      	ldr	r2, [sp, #4]
 800a7be:	f1c0 0320 	rsb	r3, r0, #32
 800a7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c6:	430b      	orrs	r3, r1
 800a7c8:	40c2      	lsrs	r2, r0
 800a7ca:	6163      	str	r3, [r4, #20]
 800a7cc:	9201      	str	r2, [sp, #4]
 800a7ce:	9b01      	ldr	r3, [sp, #4]
 800a7d0:	61a3      	str	r3, [r4, #24]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	bf14      	ite	ne
 800a7d6:	2202      	movne	r2, #2
 800a7d8:	2201      	moveq	r2, #1
 800a7da:	6122      	str	r2, [r4, #16]
 800a7dc:	b1d5      	cbz	r5, 800a814 <__d2b+0x98>
 800a7de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7e2:	4405      	add	r5, r0
 800a7e4:	f8c9 5000 	str.w	r5, [r9]
 800a7e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7ec:	f8c8 0000 	str.w	r0, [r8]
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	b003      	add	sp, #12
 800a7f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7fc:	e7d5      	b.n	800a7aa <__d2b+0x2e>
 800a7fe:	6161      	str	r1, [r4, #20]
 800a800:	e7e5      	b.n	800a7ce <__d2b+0x52>
 800a802:	a801      	add	r0, sp, #4
 800a804:	f7ff fd64 	bl	800a2d0 <__lo0bits>
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	6163      	str	r3, [r4, #20]
 800a80c:	2201      	movs	r2, #1
 800a80e:	6122      	str	r2, [r4, #16]
 800a810:	3020      	adds	r0, #32
 800a812:	e7e3      	b.n	800a7dc <__d2b+0x60>
 800a814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a81c:	f8c9 0000 	str.w	r0, [r9]
 800a820:	6918      	ldr	r0, [r3, #16]
 800a822:	f7ff fd35 	bl	800a290 <__hi0bits>
 800a826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a82a:	e7df      	b.n	800a7ec <__d2b+0x70>
 800a82c:	0800b0a4 	.word	0x0800b0a4
 800a830:	0800b0b5 	.word	0x0800b0b5

0800a834 <_calloc_r>:
 800a834:	b513      	push	{r0, r1, r4, lr}
 800a836:	434a      	muls	r2, r1
 800a838:	4611      	mov	r1, r2
 800a83a:	9201      	str	r2, [sp, #4]
 800a83c:	f7fd fdd8 	bl	80083f0 <_malloc_r>
 800a840:	4604      	mov	r4, r0
 800a842:	b118      	cbz	r0, 800a84c <_calloc_r+0x18>
 800a844:	9a01      	ldr	r2, [sp, #4]
 800a846:	2100      	movs	r1, #0
 800a848:	f7fd fdc9 	bl	80083de <memset>
 800a84c:	4620      	mov	r0, r4
 800a84e:	b002      	add	sp, #8
 800a850:	bd10      	pop	{r4, pc}
	...

0800a854 <_free_r>:
 800a854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a856:	2900      	cmp	r1, #0
 800a858:	d048      	beq.n	800a8ec <_free_r+0x98>
 800a85a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a85e:	9001      	str	r0, [sp, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	f1a1 0404 	sub.w	r4, r1, #4
 800a866:	bfb8      	it	lt
 800a868:	18e4      	addlt	r4, r4, r3
 800a86a:	f7ff fc59 	bl	800a120 <__malloc_lock>
 800a86e:	4a20      	ldr	r2, [pc, #128]	; (800a8f0 <_free_r+0x9c>)
 800a870:	9801      	ldr	r0, [sp, #4]
 800a872:	6813      	ldr	r3, [r2, #0]
 800a874:	4615      	mov	r5, r2
 800a876:	b933      	cbnz	r3, 800a886 <_free_r+0x32>
 800a878:	6063      	str	r3, [r4, #4]
 800a87a:	6014      	str	r4, [r2, #0]
 800a87c:	b003      	add	sp, #12
 800a87e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a882:	f7ff bc53 	b.w	800a12c <__malloc_unlock>
 800a886:	42a3      	cmp	r3, r4
 800a888:	d90b      	bls.n	800a8a2 <_free_r+0x4e>
 800a88a:	6821      	ldr	r1, [r4, #0]
 800a88c:	1862      	adds	r2, r4, r1
 800a88e:	4293      	cmp	r3, r2
 800a890:	bf04      	itt	eq
 800a892:	681a      	ldreq	r2, [r3, #0]
 800a894:	685b      	ldreq	r3, [r3, #4]
 800a896:	6063      	str	r3, [r4, #4]
 800a898:	bf04      	itt	eq
 800a89a:	1852      	addeq	r2, r2, r1
 800a89c:	6022      	streq	r2, [r4, #0]
 800a89e:	602c      	str	r4, [r5, #0]
 800a8a0:	e7ec      	b.n	800a87c <_free_r+0x28>
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	b10b      	cbz	r3, 800a8ac <_free_r+0x58>
 800a8a8:	42a3      	cmp	r3, r4
 800a8aa:	d9fa      	bls.n	800a8a2 <_free_r+0x4e>
 800a8ac:	6811      	ldr	r1, [r2, #0]
 800a8ae:	1855      	adds	r5, r2, r1
 800a8b0:	42a5      	cmp	r5, r4
 800a8b2:	d10b      	bne.n	800a8cc <_free_r+0x78>
 800a8b4:	6824      	ldr	r4, [r4, #0]
 800a8b6:	4421      	add	r1, r4
 800a8b8:	1854      	adds	r4, r2, r1
 800a8ba:	42a3      	cmp	r3, r4
 800a8bc:	6011      	str	r1, [r2, #0]
 800a8be:	d1dd      	bne.n	800a87c <_free_r+0x28>
 800a8c0:	681c      	ldr	r4, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	6053      	str	r3, [r2, #4]
 800a8c6:	4421      	add	r1, r4
 800a8c8:	6011      	str	r1, [r2, #0]
 800a8ca:	e7d7      	b.n	800a87c <_free_r+0x28>
 800a8cc:	d902      	bls.n	800a8d4 <_free_r+0x80>
 800a8ce:	230c      	movs	r3, #12
 800a8d0:	6003      	str	r3, [r0, #0]
 800a8d2:	e7d3      	b.n	800a87c <_free_r+0x28>
 800a8d4:	6825      	ldr	r5, [r4, #0]
 800a8d6:	1961      	adds	r1, r4, r5
 800a8d8:	428b      	cmp	r3, r1
 800a8da:	bf04      	itt	eq
 800a8dc:	6819      	ldreq	r1, [r3, #0]
 800a8de:	685b      	ldreq	r3, [r3, #4]
 800a8e0:	6063      	str	r3, [r4, #4]
 800a8e2:	bf04      	itt	eq
 800a8e4:	1949      	addeq	r1, r1, r5
 800a8e6:	6021      	streq	r1, [r4, #0]
 800a8e8:	6054      	str	r4, [r2, #4]
 800a8ea:	e7c7      	b.n	800a87c <_free_r+0x28>
 800a8ec:	b003      	add	sp, #12
 800a8ee:	bd30      	pop	{r4, r5, pc}
 800a8f0:	20004c30 	.word	0x20004c30

0800a8f4 <__sfputc_r>:
 800a8f4:	6893      	ldr	r3, [r2, #8]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	b410      	push	{r4}
 800a8fc:	6093      	str	r3, [r2, #8]
 800a8fe:	da08      	bge.n	800a912 <__sfputc_r+0x1e>
 800a900:	6994      	ldr	r4, [r2, #24]
 800a902:	42a3      	cmp	r3, r4
 800a904:	db01      	blt.n	800a90a <__sfputc_r+0x16>
 800a906:	290a      	cmp	r1, #10
 800a908:	d103      	bne.n	800a912 <__sfputc_r+0x1e>
 800a90a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a90e:	f7fe bb67 	b.w	8008fe0 <__swbuf_r>
 800a912:	6813      	ldr	r3, [r2, #0]
 800a914:	1c58      	adds	r0, r3, #1
 800a916:	6010      	str	r0, [r2, #0]
 800a918:	7019      	strb	r1, [r3, #0]
 800a91a:	4608      	mov	r0, r1
 800a91c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <__sfputs_r>:
 800a922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a924:	4606      	mov	r6, r0
 800a926:	460f      	mov	r7, r1
 800a928:	4614      	mov	r4, r2
 800a92a:	18d5      	adds	r5, r2, r3
 800a92c:	42ac      	cmp	r4, r5
 800a92e:	d101      	bne.n	800a934 <__sfputs_r+0x12>
 800a930:	2000      	movs	r0, #0
 800a932:	e007      	b.n	800a944 <__sfputs_r+0x22>
 800a934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a938:	463a      	mov	r2, r7
 800a93a:	4630      	mov	r0, r6
 800a93c:	f7ff ffda 	bl	800a8f4 <__sfputc_r>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d1f3      	bne.n	800a92c <__sfputs_r+0xa>
 800a944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a948 <_vfiprintf_r>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	460d      	mov	r5, r1
 800a94e:	b09d      	sub	sp, #116	; 0x74
 800a950:	4614      	mov	r4, r2
 800a952:	4698      	mov	r8, r3
 800a954:	4606      	mov	r6, r0
 800a956:	b118      	cbz	r0, 800a960 <_vfiprintf_r+0x18>
 800a958:	6983      	ldr	r3, [r0, #24]
 800a95a:	b90b      	cbnz	r3, 800a960 <_vfiprintf_r+0x18>
 800a95c:	f7fd fc6c 	bl	8008238 <__sinit>
 800a960:	4b89      	ldr	r3, [pc, #548]	; (800ab88 <_vfiprintf_r+0x240>)
 800a962:	429d      	cmp	r5, r3
 800a964:	d11b      	bne.n	800a99e <_vfiprintf_r+0x56>
 800a966:	6875      	ldr	r5, [r6, #4]
 800a968:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a96a:	07d9      	lsls	r1, r3, #31
 800a96c:	d405      	bmi.n	800a97a <_vfiprintf_r+0x32>
 800a96e:	89ab      	ldrh	r3, [r5, #12]
 800a970:	059a      	lsls	r2, r3, #22
 800a972:	d402      	bmi.n	800a97a <_vfiprintf_r+0x32>
 800a974:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a976:	f7fd fd22 	bl	80083be <__retarget_lock_acquire_recursive>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	071b      	lsls	r3, r3, #28
 800a97e:	d501      	bpl.n	800a984 <_vfiprintf_r+0x3c>
 800a980:	692b      	ldr	r3, [r5, #16]
 800a982:	b9eb      	cbnz	r3, 800a9c0 <_vfiprintf_r+0x78>
 800a984:	4629      	mov	r1, r5
 800a986:	4630      	mov	r0, r6
 800a988:	f7fe fb8e 	bl	80090a8 <__swsetup_r>
 800a98c:	b1c0      	cbz	r0, 800a9c0 <_vfiprintf_r+0x78>
 800a98e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a990:	07dc      	lsls	r4, r3, #31
 800a992:	d50e      	bpl.n	800a9b2 <_vfiprintf_r+0x6a>
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	b01d      	add	sp, #116	; 0x74
 800a99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99e:	4b7b      	ldr	r3, [pc, #492]	; (800ab8c <_vfiprintf_r+0x244>)
 800a9a0:	429d      	cmp	r5, r3
 800a9a2:	d101      	bne.n	800a9a8 <_vfiprintf_r+0x60>
 800a9a4:	68b5      	ldr	r5, [r6, #8]
 800a9a6:	e7df      	b.n	800a968 <_vfiprintf_r+0x20>
 800a9a8:	4b79      	ldr	r3, [pc, #484]	; (800ab90 <_vfiprintf_r+0x248>)
 800a9aa:	429d      	cmp	r5, r3
 800a9ac:	bf08      	it	eq
 800a9ae:	68f5      	ldreq	r5, [r6, #12]
 800a9b0:	e7da      	b.n	800a968 <_vfiprintf_r+0x20>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	0598      	lsls	r0, r3, #22
 800a9b6:	d4ed      	bmi.n	800a994 <_vfiprintf_r+0x4c>
 800a9b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ba:	f7fd fd01 	bl	80083c0 <__retarget_lock_release_recursive>
 800a9be:	e7e9      	b.n	800a994 <_vfiprintf_r+0x4c>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c4:	2320      	movs	r3, #32
 800a9c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ce:	2330      	movs	r3, #48	; 0x30
 800a9d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab94 <_vfiprintf_r+0x24c>
 800a9d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9d8:	f04f 0901 	mov.w	r9, #1
 800a9dc:	4623      	mov	r3, r4
 800a9de:	469a      	mov	sl, r3
 800a9e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9e4:	b10a      	cbz	r2, 800a9ea <_vfiprintf_r+0xa2>
 800a9e6:	2a25      	cmp	r2, #37	; 0x25
 800a9e8:	d1f9      	bne.n	800a9de <_vfiprintf_r+0x96>
 800a9ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ee:	d00b      	beq.n	800aa08 <_vfiprintf_r+0xc0>
 800a9f0:	465b      	mov	r3, fp
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f7ff ff93 	bl	800a922 <__sfputs_r>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	f000 80aa 	beq.w	800ab56 <_vfiprintf_r+0x20e>
 800aa02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa04:	445a      	add	r2, fp
 800aa06:	9209      	str	r2, [sp, #36]	; 0x24
 800aa08:	f89a 3000 	ldrb.w	r3, [sl]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 80a2 	beq.w	800ab56 <_vfiprintf_r+0x20e>
 800aa12:	2300      	movs	r3, #0
 800aa14:	f04f 32ff 	mov.w	r2, #4294967295
 800aa18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa1c:	f10a 0a01 	add.w	sl, sl, #1
 800aa20:	9304      	str	r3, [sp, #16]
 800aa22:	9307      	str	r3, [sp, #28]
 800aa24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa28:	931a      	str	r3, [sp, #104]	; 0x68
 800aa2a:	4654      	mov	r4, sl
 800aa2c:	2205      	movs	r2, #5
 800aa2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa32:	4858      	ldr	r0, [pc, #352]	; (800ab94 <_vfiprintf_r+0x24c>)
 800aa34:	f7f5 fbdc 	bl	80001f0 <memchr>
 800aa38:	9a04      	ldr	r2, [sp, #16]
 800aa3a:	b9d8      	cbnz	r0, 800aa74 <_vfiprintf_r+0x12c>
 800aa3c:	06d1      	lsls	r1, r2, #27
 800aa3e:	bf44      	itt	mi
 800aa40:	2320      	movmi	r3, #32
 800aa42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa46:	0713      	lsls	r3, r2, #28
 800aa48:	bf44      	itt	mi
 800aa4a:	232b      	movmi	r3, #43	; 0x2b
 800aa4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa50:	f89a 3000 	ldrb.w	r3, [sl]
 800aa54:	2b2a      	cmp	r3, #42	; 0x2a
 800aa56:	d015      	beq.n	800aa84 <_vfiprintf_r+0x13c>
 800aa58:	9a07      	ldr	r2, [sp, #28]
 800aa5a:	4654      	mov	r4, sl
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	f04f 0c0a 	mov.w	ip, #10
 800aa62:	4621      	mov	r1, r4
 800aa64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa68:	3b30      	subs	r3, #48	; 0x30
 800aa6a:	2b09      	cmp	r3, #9
 800aa6c:	d94e      	bls.n	800ab0c <_vfiprintf_r+0x1c4>
 800aa6e:	b1b0      	cbz	r0, 800aa9e <_vfiprintf_r+0x156>
 800aa70:	9207      	str	r2, [sp, #28]
 800aa72:	e014      	b.n	800aa9e <_vfiprintf_r+0x156>
 800aa74:	eba0 0308 	sub.w	r3, r0, r8
 800aa78:	fa09 f303 	lsl.w	r3, r9, r3
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	9304      	str	r3, [sp, #16]
 800aa80:	46a2      	mov	sl, r4
 800aa82:	e7d2      	b.n	800aa2a <_vfiprintf_r+0xe2>
 800aa84:	9b03      	ldr	r3, [sp, #12]
 800aa86:	1d19      	adds	r1, r3, #4
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	9103      	str	r1, [sp, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bfbb      	ittet	lt
 800aa90:	425b      	neglt	r3, r3
 800aa92:	f042 0202 	orrlt.w	r2, r2, #2
 800aa96:	9307      	strge	r3, [sp, #28]
 800aa98:	9307      	strlt	r3, [sp, #28]
 800aa9a:	bfb8      	it	lt
 800aa9c:	9204      	strlt	r2, [sp, #16]
 800aa9e:	7823      	ldrb	r3, [r4, #0]
 800aaa0:	2b2e      	cmp	r3, #46	; 0x2e
 800aaa2:	d10c      	bne.n	800aabe <_vfiprintf_r+0x176>
 800aaa4:	7863      	ldrb	r3, [r4, #1]
 800aaa6:	2b2a      	cmp	r3, #42	; 0x2a
 800aaa8:	d135      	bne.n	800ab16 <_vfiprintf_r+0x1ce>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	1d1a      	adds	r2, r3, #4
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	9203      	str	r2, [sp, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	bfb8      	it	lt
 800aab6:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaba:	3402      	adds	r4, #2
 800aabc:	9305      	str	r3, [sp, #20]
 800aabe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aba4 <_vfiprintf_r+0x25c>
 800aac2:	7821      	ldrb	r1, [r4, #0]
 800aac4:	2203      	movs	r2, #3
 800aac6:	4650      	mov	r0, sl
 800aac8:	f7f5 fb92 	bl	80001f0 <memchr>
 800aacc:	b140      	cbz	r0, 800aae0 <_vfiprintf_r+0x198>
 800aace:	2340      	movs	r3, #64	; 0x40
 800aad0:	eba0 000a 	sub.w	r0, r0, sl
 800aad4:	fa03 f000 	lsl.w	r0, r3, r0
 800aad8:	9b04      	ldr	r3, [sp, #16]
 800aada:	4303      	orrs	r3, r0
 800aadc:	3401      	adds	r4, #1
 800aade:	9304      	str	r3, [sp, #16]
 800aae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae4:	482c      	ldr	r0, [pc, #176]	; (800ab98 <_vfiprintf_r+0x250>)
 800aae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaea:	2206      	movs	r2, #6
 800aaec:	f7f5 fb80 	bl	80001f0 <memchr>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d03f      	beq.n	800ab74 <_vfiprintf_r+0x22c>
 800aaf4:	4b29      	ldr	r3, [pc, #164]	; (800ab9c <_vfiprintf_r+0x254>)
 800aaf6:	bb1b      	cbnz	r3, 800ab40 <_vfiprintf_r+0x1f8>
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	3307      	adds	r3, #7
 800aafc:	f023 0307 	bic.w	r3, r3, #7
 800ab00:	3308      	adds	r3, #8
 800ab02:	9303      	str	r3, [sp, #12]
 800ab04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab06:	443b      	add	r3, r7
 800ab08:	9309      	str	r3, [sp, #36]	; 0x24
 800ab0a:	e767      	b.n	800a9dc <_vfiprintf_r+0x94>
 800ab0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab10:	460c      	mov	r4, r1
 800ab12:	2001      	movs	r0, #1
 800ab14:	e7a5      	b.n	800aa62 <_vfiprintf_r+0x11a>
 800ab16:	2300      	movs	r3, #0
 800ab18:	3401      	adds	r4, #1
 800ab1a:	9305      	str	r3, [sp, #20]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	f04f 0c0a 	mov.w	ip, #10
 800ab22:	4620      	mov	r0, r4
 800ab24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab28:	3a30      	subs	r2, #48	; 0x30
 800ab2a:	2a09      	cmp	r2, #9
 800ab2c:	d903      	bls.n	800ab36 <_vfiprintf_r+0x1ee>
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0c5      	beq.n	800aabe <_vfiprintf_r+0x176>
 800ab32:	9105      	str	r1, [sp, #20]
 800ab34:	e7c3      	b.n	800aabe <_vfiprintf_r+0x176>
 800ab36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e7f0      	b.n	800ab22 <_vfiprintf_r+0x1da>
 800ab40:	ab03      	add	r3, sp, #12
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	462a      	mov	r2, r5
 800ab46:	4b16      	ldr	r3, [pc, #88]	; (800aba0 <_vfiprintf_r+0x258>)
 800ab48:	a904      	add	r1, sp, #16
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7fd fd4a 	bl	80085e4 <_printf_float>
 800ab50:	4607      	mov	r7, r0
 800ab52:	1c78      	adds	r0, r7, #1
 800ab54:	d1d6      	bne.n	800ab04 <_vfiprintf_r+0x1bc>
 800ab56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab58:	07d9      	lsls	r1, r3, #31
 800ab5a:	d405      	bmi.n	800ab68 <_vfiprintf_r+0x220>
 800ab5c:	89ab      	ldrh	r3, [r5, #12]
 800ab5e:	059a      	lsls	r2, r3, #22
 800ab60:	d402      	bmi.n	800ab68 <_vfiprintf_r+0x220>
 800ab62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab64:	f7fd fc2c 	bl	80083c0 <__retarget_lock_release_recursive>
 800ab68:	89ab      	ldrh	r3, [r5, #12]
 800ab6a:	065b      	lsls	r3, r3, #25
 800ab6c:	f53f af12 	bmi.w	800a994 <_vfiprintf_r+0x4c>
 800ab70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab72:	e711      	b.n	800a998 <_vfiprintf_r+0x50>
 800ab74:	ab03      	add	r3, sp, #12
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	462a      	mov	r2, r5
 800ab7a:	4b09      	ldr	r3, [pc, #36]	; (800aba0 <_vfiprintf_r+0x258>)
 800ab7c:	a904      	add	r1, sp, #16
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f7fd ffd4 	bl	8008b2c <_printf_i>
 800ab84:	e7e4      	b.n	800ab50 <_vfiprintf_r+0x208>
 800ab86:	bf00      	nop
 800ab88:	0800aea8 	.word	0x0800aea8
 800ab8c:	0800aec8 	.word	0x0800aec8
 800ab90:	0800ae88 	.word	0x0800ae88
 800ab94:	0800b214 	.word	0x0800b214
 800ab98:	0800b21e 	.word	0x0800b21e
 800ab9c:	080085e5 	.word	0x080085e5
 800aba0:	0800a923 	.word	0x0800a923
 800aba4:	0800b21a 	.word	0x0800b21a

0800aba8 <_read_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d07      	ldr	r5, [pc, #28]	; (800abc8 <_read_r+0x20>)
 800abac:	4604      	mov	r4, r0
 800abae:	4608      	mov	r0, r1
 800abb0:	4611      	mov	r1, r2
 800abb2:	2200      	movs	r2, #0
 800abb4:	602a      	str	r2, [r5, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	f7f7 fb8c 	bl	80022d4 <_read>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_read_r+0x1e>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_read_r+0x1e>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	20005274 	.word	0x20005274

0800abcc <__assert_func>:
 800abcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abce:	4614      	mov	r4, r2
 800abd0:	461a      	mov	r2, r3
 800abd2:	4b09      	ldr	r3, [pc, #36]	; (800abf8 <__assert_func+0x2c>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4605      	mov	r5, r0
 800abd8:	68d8      	ldr	r0, [r3, #12]
 800abda:	b14c      	cbz	r4, 800abf0 <__assert_func+0x24>
 800abdc:	4b07      	ldr	r3, [pc, #28]	; (800abfc <__assert_func+0x30>)
 800abde:	9100      	str	r1, [sp, #0]
 800abe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abe4:	4906      	ldr	r1, [pc, #24]	; (800ac00 <__assert_func+0x34>)
 800abe6:	462b      	mov	r3, r5
 800abe8:	f000 f80e 	bl	800ac08 <fiprintf>
 800abec:	f000 f85f 	bl	800acae <abort>
 800abf0:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <__assert_func+0x38>)
 800abf2:	461c      	mov	r4, r3
 800abf4:	e7f3      	b.n	800abde <__assert_func+0x12>
 800abf6:	bf00      	nop
 800abf8:	20000060 	.word	0x20000060
 800abfc:	0800b225 	.word	0x0800b225
 800ac00:	0800b232 	.word	0x0800b232
 800ac04:	0800b260 	.word	0x0800b260

0800ac08 <fiprintf>:
 800ac08:	b40e      	push	{r1, r2, r3}
 800ac0a:	b503      	push	{r0, r1, lr}
 800ac0c:	4601      	mov	r1, r0
 800ac0e:	ab03      	add	r3, sp, #12
 800ac10:	4805      	ldr	r0, [pc, #20]	; (800ac28 <fiprintf+0x20>)
 800ac12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac16:	6800      	ldr	r0, [r0, #0]
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	f7ff fe95 	bl	800a948 <_vfiprintf_r>
 800ac1e:	b002      	add	sp, #8
 800ac20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac24:	b003      	add	sp, #12
 800ac26:	4770      	bx	lr
 800ac28:	20000060 	.word	0x20000060

0800ac2c <_fstat_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4d07      	ldr	r5, [pc, #28]	; (800ac4c <_fstat_r+0x20>)
 800ac30:	2300      	movs	r3, #0
 800ac32:	4604      	mov	r4, r0
 800ac34:	4608      	mov	r0, r1
 800ac36:	4611      	mov	r1, r2
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	f7f7 fb90 	bl	800235e <_fstat>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	d102      	bne.n	800ac48 <_fstat_r+0x1c>
 800ac42:	682b      	ldr	r3, [r5, #0]
 800ac44:	b103      	cbz	r3, 800ac48 <_fstat_r+0x1c>
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	bd38      	pop	{r3, r4, r5, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20005274 	.word	0x20005274

0800ac50 <_isatty_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4d06      	ldr	r5, [pc, #24]	; (800ac6c <_isatty_r+0x1c>)
 800ac54:	2300      	movs	r3, #0
 800ac56:	4604      	mov	r4, r0
 800ac58:	4608      	mov	r0, r1
 800ac5a:	602b      	str	r3, [r5, #0]
 800ac5c:	f7f7 fb8f 	bl	800237e <_isatty>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d102      	bne.n	800ac6a <_isatty_r+0x1a>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	b103      	cbz	r3, 800ac6a <_isatty_r+0x1a>
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	20005274 	.word	0x20005274

0800ac70 <__ascii_mbtowc>:
 800ac70:	b082      	sub	sp, #8
 800ac72:	b901      	cbnz	r1, 800ac76 <__ascii_mbtowc+0x6>
 800ac74:	a901      	add	r1, sp, #4
 800ac76:	b142      	cbz	r2, 800ac8a <__ascii_mbtowc+0x1a>
 800ac78:	b14b      	cbz	r3, 800ac8e <__ascii_mbtowc+0x1e>
 800ac7a:	7813      	ldrb	r3, [r2, #0]
 800ac7c:	600b      	str	r3, [r1, #0]
 800ac7e:	7812      	ldrb	r2, [r2, #0]
 800ac80:	1e10      	subs	r0, r2, #0
 800ac82:	bf18      	it	ne
 800ac84:	2001      	movne	r0, #1
 800ac86:	b002      	add	sp, #8
 800ac88:	4770      	bx	lr
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	e7fb      	b.n	800ac86 <__ascii_mbtowc+0x16>
 800ac8e:	f06f 0001 	mvn.w	r0, #1
 800ac92:	e7f8      	b.n	800ac86 <__ascii_mbtowc+0x16>

0800ac94 <__ascii_wctomb>:
 800ac94:	b149      	cbz	r1, 800acaa <__ascii_wctomb+0x16>
 800ac96:	2aff      	cmp	r2, #255	; 0xff
 800ac98:	bf85      	ittet	hi
 800ac9a:	238a      	movhi	r3, #138	; 0x8a
 800ac9c:	6003      	strhi	r3, [r0, #0]
 800ac9e:	700a      	strbls	r2, [r1, #0]
 800aca0:	f04f 30ff 	movhi.w	r0, #4294967295
 800aca4:	bf98      	it	ls
 800aca6:	2001      	movls	r0, #1
 800aca8:	4770      	bx	lr
 800acaa:	4608      	mov	r0, r1
 800acac:	4770      	bx	lr

0800acae <abort>:
 800acae:	b508      	push	{r3, lr}
 800acb0:	2006      	movs	r0, #6
 800acb2:	f000 f82b 	bl	800ad0c <raise>
 800acb6:	2001      	movs	r0, #1
 800acb8:	f7f7 fb02 	bl	80022c0 <_exit>

0800acbc <_raise_r>:
 800acbc:	291f      	cmp	r1, #31
 800acbe:	b538      	push	{r3, r4, r5, lr}
 800acc0:	4604      	mov	r4, r0
 800acc2:	460d      	mov	r5, r1
 800acc4:	d904      	bls.n	800acd0 <_raise_r+0x14>
 800acc6:	2316      	movs	r3, #22
 800acc8:	6003      	str	r3, [r0, #0]
 800acca:	f04f 30ff 	mov.w	r0, #4294967295
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acd2:	b112      	cbz	r2, 800acda <_raise_r+0x1e>
 800acd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acd8:	b94b      	cbnz	r3, 800acee <_raise_r+0x32>
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 f830 	bl	800ad40 <_getpid_r>
 800ace0:	462a      	mov	r2, r5
 800ace2:	4601      	mov	r1, r0
 800ace4:	4620      	mov	r0, r4
 800ace6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acea:	f000 b817 	b.w	800ad1c <_kill_r>
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d00a      	beq.n	800ad08 <_raise_r+0x4c>
 800acf2:	1c59      	adds	r1, r3, #1
 800acf4:	d103      	bne.n	800acfe <_raise_r+0x42>
 800acf6:	2316      	movs	r3, #22
 800acf8:	6003      	str	r3, [r0, #0]
 800acfa:	2001      	movs	r0, #1
 800acfc:	e7e7      	b.n	800acce <_raise_r+0x12>
 800acfe:	2400      	movs	r4, #0
 800ad00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad04:	4628      	mov	r0, r5
 800ad06:	4798      	blx	r3
 800ad08:	2000      	movs	r0, #0
 800ad0a:	e7e0      	b.n	800acce <_raise_r+0x12>

0800ad0c <raise>:
 800ad0c:	4b02      	ldr	r3, [pc, #8]	; (800ad18 <raise+0xc>)
 800ad0e:	4601      	mov	r1, r0
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	f7ff bfd3 	b.w	800acbc <_raise_r>
 800ad16:	bf00      	nop
 800ad18:	20000060 	.word	0x20000060

0800ad1c <_kill_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d07      	ldr	r5, [pc, #28]	; (800ad3c <_kill_r+0x20>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	4604      	mov	r4, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	4611      	mov	r1, r2
 800ad28:	602b      	str	r3, [r5, #0]
 800ad2a:	f7f7 fab9 	bl	80022a0 <_kill>
 800ad2e:	1c43      	adds	r3, r0, #1
 800ad30:	d102      	bne.n	800ad38 <_kill_r+0x1c>
 800ad32:	682b      	ldr	r3, [r5, #0]
 800ad34:	b103      	cbz	r3, 800ad38 <_kill_r+0x1c>
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	bd38      	pop	{r3, r4, r5, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20005274 	.word	0x20005274

0800ad40 <_getpid_r>:
 800ad40:	f7f7 baa6 	b.w	8002290 <_getpid>

0800ad44 <_init>:
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad46:	bf00      	nop
 800ad48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4a:	bc08      	pop	{r3}
 800ad4c:	469e      	mov	lr, r3
 800ad4e:	4770      	bx	lr

0800ad50 <_fini>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	bf00      	nop
 800ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad56:	bc08      	pop	{r3}
 800ad58:	469e      	mov	lr, r3
 800ad5a:	4770      	bx	lr
